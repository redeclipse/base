///////////////
// CONSTANTS //
///////////////



// Execution context:

// Executed from UI (e.g. button)
TA_CTX_UI     = 0
// Executed by a key bind
TA_CTX_KEY    = 1
// Executed from the search UI
TA_CTX_SEARCH = 2

// Property indices:

// ID index
TA_PROP_ID         = 0
// Short description index
TA_PROP_SHORT_DESC = 1
// Long description index
TA_PROP_LONG_DESC  = 2
// Icon index
TA_PROP_ICON       = 3
// Category index
TA_PROP_CATEGORY   = 4
// Search tags index
TA_PROP_TAGS       = 5
// Type
TA_PROP_TYPE       = 6
// Code to execute
TA_PROP_CODE       = 7
// Flags
TA_PROP_FLAGS      = 8
// Total number of properties
TA_PROP_NUM_PROPS  = 9

// Type:

// Standard (default)
TA_TYPE_STD    = 0
// Scroll
TA_TYPE_SCROLL = 1

// Flags:

// Non-online
TA_FLAG_NOONLINE = 1

// Bind info indices:

// Key index
TA_BI_KEY       = 0
// Modifiers index
TA_BI_MODIFIERS = 1



/////////////
// STORAGE //
/////////////



tool_actions           = []
tool_num_actions       = 0
tool_action_categories = []
tool_action_ctx        = $TA_CTX_UI



///////////////
// EXECUTION //
///////////////



// Perform an action
// 1:<action id> 2:<context>
tool_do_action = [
    tool_action_ctx = (? (< $numargs 2) $TA_CTX_UI $arg2)

    if (&& [& (at $$arg1 $TA_PROP_FLAGS) $TA_FLAG_NOONLINE] [tool_onlinelock]) [
        tool_info_show $TOOL_NOMPEDIT_DISABLED_TEXT
    ] [
        do (at $$arg1 $TA_PROP_CODE)
    ]
]



///////////
// BINDS //
///////////



// Gets bind info cache for an action
// 1:<action id>
tool_action_get_bind_info = [
    result $[tb_@arg1]
]

// Returns formatted bind info cache string for na action
// 1:<action id>
tool_action_pretty_bind_info = [
    local _bind_info
    _bind_info = (tool_action_get_bind_info $arg1)

    prettybindinfo (at $_bind_info $TA_BI_KEY) (at $_bind_info $TA_BI_MODIFIERS)
]

// Returns whether bind info cache exists for an action
// 1:<action id>
tool_action_has_bind_info = [
    identexists [tb_@arg1]
]

// Stores bind info cache for an action
// 1:<action id> 2:<key> 3:<modifiers>
tool_action_set_bind_info = [
    set [tb_@arg1] [ [@@arg2] @arg3 ]
]

// Unbinds an action
// 1:<action id>
toolunbind = [
    local _bind_info _key _modifiers

    // Get the cached bind info
    _bind_info = (tool_action_get_bind_info $arg1)
    _key = (at $_bind_info $TA_BI_KEY)
    _modifiers = (at $_bind_info $TA_BI_MODIFIERS)

    // If found a key
    if $_key [
        // Clear the bind for that key and modifiers
        editbind $_key [] $_modifiers
        // Clear bind info cache
        tool_action_set_bind_info $arg1 "" 0
    ]
]

// Gets the action bound to a combination of keys
// 1:<key> 2:<modifiers>
gettoolbind = [
    local _binding _prefix _offset
    _prefix = "tool_do_action "
    _binding = (geteditbind $arg1 $arg2)
    _offset = (strstr $_binding $_prefix)

    // If the bind starts with our prefix, extract the action ID
    if (> $_offset -1) [
        _offset = (+ $_offset (strlen $_prefix))
        _binding = (substr $_binding $_offset)
        result (at $_binding 0)
    ] [
        result ""
    ]
]

// Binds an action to a combination of keys
// 1:<key> 2:<action id> 3:<modifiers>
toolbind = [
    local _old_action _filter

    _filter = [
        mouse1
        mouse2
        mouse4
        mouse5
        left
        right
        up
        down
        return
        0
        1
        2
        3
        4
        5
        6
        7
        8
        9
    ]

    if (! (listhas $_filter (strlower $arg1))) [
        local _old_action
        _old_action = (gettoolbind $arg1 $arg3)

        toolunbind $arg2

        if $_old_action [
            tool_action_set_bind_info $_old_action "" 0
        ]

        tool_action_set_bind_info $arg2 $arg1 $arg3

        editbind $arg1 [
            tool_do_action @arg2 $TA_CTX_KEY
        ] $arg3
    ]
]



////////////////
// MANAGEMENT //
////////////////



// Adds and initializes a new action category
// 1:<name>
tool_action_add_category = [
    // Add category to the list
    append tool_action_categories $arg1

    // Sort category names
    tool_action_categories = (sortlist $tool_action_categories a b [naturalsort $a $b])

    // Initialize list of actions for this category
    [tool_actions_@arg1] = []
]

tool_action_props = [
    [ p_short_desc ""           ]
    [ p_long_desc  ""           ]
    [ p_icon       ""           ]
    [ p_category   ""           ]
    [ p_tags       ""           ]
    [ p_type       $TA_TYPE_STD ]
    [ p_code       [[]]         ]
    [ p_flags      0            ]
]

// Defines a new action
// 1:<action id> 2:<props>
tool_action = [
    @(props $tool_action_props arg2)

    // Re-use short description if no long description supplied
    if (=s $p_long_desc) [
        p_long_desc = $p_short_desc
    ]

    local _category

    // Initialize action from the supplied ID
    $arg1 = []

    // Order of properties appended has to match the indices defined in CONSTANTS
    append $arg1 [@arg1]
    append $arg1 [[@@p_short_desc]]
    append $arg1 [[@@p_long_desc]]
    append $arg1 [[@@p_icon]]
    append $arg1 [[@@p_category]]
    append $arg1 [[@@p_tags]]
    append $arg1 [@p_type]
    append $arg1 [[@@p_code]]
    append $arg1 [@p_flags]

    // Add action ID to the list
    if (listhas $tool_actions $arg1) [] [
        append tool_actions $arg1
    ]

    // Increment the counter
    tool_num_actions = (+ $tool_num_actions 1)

    // Define persistent bind info cache variables
    if (tool_action_has_bind_info $arg1) [] [
        defsvarp [tb_@arg1] ""
    ]

    // Initialize category if it doesn't exist
    if (listhas $tool_action_categories $p_category) [] [
        tool_action_add_category $p_category
    ]

    // Add action to the category
    append [tool_actions_@p_category] $arg1
]
