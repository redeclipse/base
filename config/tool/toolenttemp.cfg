/////////////
// STORAGE //
/////////////



// Entity templtes are stored in the map configuration as follows:

// ``tool_enttemp_num_cols = <integer>``
// Number of template collection slots. Some of them may be empty (unused) and hidden.

// ``tool_enttemp_col_names = <list>``
// List of names of all the collections. Empty (unused) collections are unnamed.

// ``tool_enttemp_template_col_<n> = <list>``
// List of entity templates in the template collection <n>.

// ``tool_enttemp_modifier_col_<n> = <list>``
// List of entity template modifiers in the template collection <n>.



///////////////
// CONSTANTS //
///////////////



// Modifier modes:

// No active modifier
TOOL_ENTTEMP_MOD_NONE     = 0
// Variance modifier, uses a parameter
TOOL_ENTTEMP_MOD_VARIANCE = 1
// Camera yaw modifier
TOOL_ENTTEMP_MOD_CAMYAW   = (<< 1 1)
// Camera pitch modifier
TOOL_ENTTEMP_MOD_CAMPITCH = (<< 1 2)

// Mask of modes that require a parameter property
TOOL_ENTTEMP_MOD_MODE_PARAM_MASK = $TOOL_ENTTEMP_MOD_VARIANCE

// Modifier properties:

// Mode property
TOOL_ENTTEMP_MOD_MODE_IDX  = 0
// Parameter property
TOOL_ENTTEMP_MOD_PARAM_IDX = 1

// Template property indices:

// Index of the name property
TOOL_ENTTEMP_PROP_NAME_IDX       = 0
// Index of the entity type property
TOOL_ENTTEMP_PROP_TYPE_IDX       = 1
// Index of the X offset property
TOOL_ENTTEMP_PROP_OFFSET_X_IDX   = 2
// Index of the Y offset property
TOOL_ENTTEMP_PROP_OFFSET_Y_IDX   = 3
// Index of the Z offset property
TOOL_ENTTEMP_PROP_OFFSET_Z_IDX   = 4
// Index of the first entity attribute property
TOOL_ENTTEMP_PROP_ATTR_START_IDX = 5
// Index of the first numerical entity property
TOOL_ENTTEMP_PROP_NUM_START_IDX  = $TOOL_ENTTEMP_PROP_OFFSET_X_IDX
// Number of additional numeric properties in a template (ones beside the entity attributes)
TOOL_ENTTEMP_PROP_NUM_EXTRA      = (- $TOOL_ENTTEMP_PROP_ATTR_START_IDX $TOOL_ENTTEMP_PROP_NUM_START_IDX)

// Placement modes:

// Selected only placement
TOOL_ENTTEMP_PLACE_SEL      = 0
// Sequential placement
TOOL_ENTTEMP_PLACE_SEQ      = 1
// Random placement
TOOL_ENTTEMP_PLACE_RAND     = 2
// All in the collection
TOOL_ENTTEMP_PLACE_ALL      = 3

// Link modes:

// Do not link entities
TOOL_ENTTEMP_LINK_NONE        = 0
// Link new entity to the previous one
TOOL_ENTTEMP_LINK_NEW_TO_PREV = 1
// Link previous entity to the new one
TOOL_ENTTEMP_LINK_PREV_TO_NEW = 2
// Link both ways
TOOL_ENTTEMP_LINK_BOTH        = 3



//////////////////////
// HELPER FUNCTIONS //
//////////////////////



// Returns the number of collection slots.
// The ``tool_enttemp_num_cols`` might contain an empty string,
// this function guarantees that the value is always an integer.
tool_enttep_get_num_col_slots = [
    + (getalias tool_enttemp_num_cols) 0
]

// Returns whether a collection slot at the supplied index exists
// 1:<index>
tool_enttemp_has_col_slot = [
    && [> $arg1 -1] [< $arg1 (tool_enttep_get_num_col_slots)]
]

// Returns whether a collection at the supplied index exists
// 1:<index>
tool_enttemp_has_col = [
    && [tool_enttemp_has_col_slot $arg1] [!=s (at (getalias tool_enttemp_col_names) $arg1)]
]

// Returns a unique name for a new collection.
// 1:<requested name>
tool_enttemp_get_col_name = [
    tool_get_name $arg1 (getalias tool_enttemp_col_names) " #"
]

// Returns the index of a free collection slot.
tool_enttemp_get_free_col_slot = [
    local _free_slot
    _free_slot = -1

    loopwhile i (tool_enttep_get_num_col_slots) [< $_free_slot 0] [
        if (=s (at (getalias tool_enttemp_col_names) $i)) [
            _free_slot = $i
        ]
    ]

    result $_free_slot
]

// Returns whether a modifier will need a parameter after update
// 1:<current modifier mode> 2:<mode change> 3:<value change>
tool_enttemp_modifier_needs_param = [
    // Needs param if:
    || [
        // Setting a modifier mode that takes a parameter to a non-zero value
        && [& $arg2 $TOOL_ENTTEMP_MOD_MODE_PARAM_MASK] [$arg3]
    ] [
        // Setting a modifier that takes no param, but already having a modifier that needs one
        && [! (& $arg2 $TOOL_ENTTEMP_MOD_MODE_PARAM_MASK)] [& $arg1 $TOOL_ENTTEMP_MOD_MODE_PARAM_MASK]
    ]
]

// Calculates a numerical entity property from a template and modifiers
// 1:<template> 2:<modifiers> 3:<property index>
tool_enttemp_calc_ent_prop = [
    local _value _mod _mod_mode _mod_param
    _value     = (at $arg1 $arg3)
    _mod       = (at $arg2 (- $arg3 $TOOL_ENTTEMP_PROP_NUM_START_IDX))
    _mod_mode  = (at $_mod $TOOL_ENTTEMP_MOD_MODE_IDX)
    _mod_param = (at $_mod $TOOL_ENTTEMP_MOD_PARAM_IDX)

    if (& $_mod_mode $TOOL_ENTTEMP_MOD_VARIANCE) [
        _value = (+ $_value (rnd $_mod_param (* $_mod_param -1)))
    ]

    if (& $_mod_mode $TOOL_ENTTEMP_MOD_CAMYAW) [
        _value = (+ $_value (toint (round $camerayaw)))
    ]

    if (& $_mod_mode $TOOL_ENTTEMP_MOD_CAMPITCH) [
        _value = (+ $_value (toint (round $camerapitch)))
    ]

    result $_value
]

// Picks next template for placement
tool_enttemp_pick_template = [
    local _temp_idx
    _temp_idx = -1

    case $tool_enttemp_place_mode $TOOL_ENTTEMP_PLACE_SEL [
        _temp_idx = $tool_enttemp_sel_template_idx
    ] $TOOL_ENTTEMP_PLACE_SEQ [
        _temp_idx = $tool_enttemp_last_placed_idx
        _temp_idx = (mod (+ $_temp_idx 1) (listlen (getalias $tool_enttemp_sel_template_col)))
    ] $TOOL_ENTTEMP_PLACE_RAND [
        _temp_idx = (rnd (listlen (getalias $tool_enttemp_sel_template_col)))
    ]

    tool_enttemp_last_placed_idx = $_temp_idx

    result $_temp_idx
]

// Returns whether two last entities can be linked
// 1:<new entity index>
tool_enttemp_can_link_ents = [
    && [
        != $tool_enttemp_link_mode $TOOL_ENTTEMP_LINK_NONE
    ] [
        > $tool_enttemp_last_ent_idx -1
    ] [
        > $arg1 $tool_enttemp_last_ent_idx
    ]
]



///////////
// STATE //
///////////



// Whether template collection lists are compatible with the current version
tool_enttemp_compatible       = 0
// Index of the selected template
tool_enttemp_sel_template_idx = -1
// Index of the active template collection
tool_enttemp_sel_col_idx      = -1
// Name of the variable containing templates in the active collection
tool_enttemp_sel_template_col = []
// Name of the variable containing template modifiers in the active collection
tool_enttemp_sel_modifier_col = []
// Copy of the currently active template for quick access
tool_enttemp_cur_template     = []
// Copy of the currently active template's modifiers for quick access
tool_enttemp_cur_modifiers    = []
// Template placement enabled
tool_enttemp_place_enabled    = 0
// Template placement mode
tool_enttemp_place_mode       = $TOOL_ENTTEMP_PLACE_SEL
// Template placement link mode
tool_enttemp_link_mode        = $TOOL_ENTTEMP_LINK_NONE
// Last placed template index
tool_enttemp_last_placed_idx  = -1
// Index of the last created entity
tool_enttemp_last_ent_idx     = -1

// Initializes the template system state
tool_enttemp_init = [
    tool_enttemp_last_ent_idx = -1
]

// Resets the selection and template system state
tool_enttemp_reset = [
    tool_enttemp_template_select -1

    tool_enttemp_sel_col_idx      = -1
    tool_enttemp_sel_template_col = []
    tool_enttemp_sel_modifier_col = []

    tool_enttemp_init
]



///////////////////////////
// COLLECTION MANAGEMENT //
///////////////////////////



// Changes the active collection
// 1:<index>
tool_enttemp_set_collection = [
    if (> $arg1 -1) [
        tool_enttemp_sel_template_col = [tool_enttemp_template_col_@arg1]
        tool_enttemp_sel_modifier_col = [tool_enttemp_modifier_col_@arg1]
    ] [
        tool_enttemp_sel_template_col = []
        tool_enttemp_sel_modifier_col = []
    ]

    tool_enttemp_sel_col_idx = $arg1
    tool_enttemp_template_select -1

    tool_enttemp_init
]

// Copies collection templates
// 1:<copy from index> 2:<copy to index>
tool_enttemp_copy_collection = [
    if (&& [tool_enttemp_has_col $arg1] [tool_enttemp_has_col $arg2]) [
        mapmeta [tool_enttemp_template_col_@arg2] $[tool_enttemp_template_col_@arg1]
        mapmeta [tool_enttemp_modifier_col_@arg2] $[tool_enttemp_modifier_col_@arg1]
    ] [
        error "tool_enttemp_copy_collection error: invalid indices"
    ]
]

// Creates and selects a new collection.
// Optionally copies templates from a collection at the supplied index.
// Returns the name of the new collection.
// 1:<requested name> 2:<copy from index (optional)>
tool_enttemp_add_collection = [
    local _name _slot _num_slots _col_names
    _name      = (tool_enttemp_get_col_name $arg1)
    _slot      = (tool_enttemp_get_free_col_slot)
    _num_slots = (tool_enttep_get_num_col_slots)
    _col_names = (getalias tool_enttemp_col_names)

    if (< $_slot 0) [
        // New slot
        _slot = $_num_slots
        mapmeta tool_enttemp_col_names (concat $_col_names [[@@_name]])
        mapmeta tool_enttemp_num_cols (+ $_num_slots 1)
    ] [
        // Reuse unused slot
        mapmeta tool_enttemp_col_names (listsplice $_col_names [[@@_name]] $_slot 1)
    ]

    // Initialize lists
    mapmeta [tool_enttemp_template_col_@_slot] []
    mapmeta [tool_enttemp_modifier_col_@_slot] []

    // Copy lists if requested
    if (> $numargs 1) [
        tool_enttemp_copy_collection $arg2 $_slot
    ]

    tool_enttemp_set_collection $_slot

    result $_name
]

// Removes the collection at the supplied index
// 1:<index>
tool_enttemp_rem_collection = [
    if (tool_enttemp_has_col $arg1) [
        local _col_names
        _col_names = (getalias tool_enttemp_col_names)

        // Clear the collection name
        mapmeta tool_enttemp_col_names (listsplice $_col_names [[]] $arg1 1)
        // Clear the lists
        mapmeta [tool_enttemp_template_col_@arg1] []
        mapmeta [tool_enttemp_modifier_col_@arg1] []

        // Reset the state if that was the currently active collection
        if (= $arg1 $tool_enttemp_sel_col_idx) [
            tool_enttemp_reset
        ]
    ] [
        error "tool_enttemp_rem_collection error: invalid index"
    ]
]

// Renames the collection at the supplied index
// 1:<index> 2:<requested name>
tool_enttemp_rename_collection = [
    if (tool_enttemp_has_col $arg1) [
        local _name _col_names
        _name      = (tool_enttemp_get_col_name $arg2)
        _col_names = (getalias tool_enttemp_col_names)

        mapmeta tool_enttemp_col_names (listsplice $_col_names [[@@_name]] $arg1 1)
    ] [
        error "tool_enttemp_rename_collection error: invalid index"
    ]
]

// Returns the name of the collection at the supplied index
// 1:<index>
tool_enttemp_collection_get_name = [
    at (getalias tool_enttemp_col_names) $arg1
]



///////////////////////////
// TEMPLATE MANIPULATION //
///////////////////////////



// Adds a template to the collection and activates it
// 1:<template> 2:<modifiers>
tool_enttemp_template_append = [
    local _temp_col _mod_col
    _temp_col = (getalias $tool_enttemp_sel_template_col)
    _mod_col  = (getalias $tool_enttemp_sel_modifier_col)

    append _temp_col [[@@arg1]]
    append _mod_col  [[@@arg2]]

    mapmeta $tool_enttemp_sel_template_col $_temp_col
    mapmeta $tool_enttemp_sel_modifier_col $_mod_col

    tool_enttemp_template_select (- (listlen $$tool_enttemp_sel_template_col) 1)
]

// Adds a new template
// 1:<entity type>
tool_enttemp_template_add = [
    local _num_attrs _num_temp_props _temp _mods
    _num_attrs      = (entityattrs (indexof $tool_ent_types $arg1) 1)
    _num_temp_props = (+ $_num_attrs $TOOL_ENTTEMP_PROP_NUM_EXTRA)

    _temp = [[] @arg1 @(loopconcat i $_num_temp_props 0)]
    _mods = (loopconcat i $_num_temp_props 0)

    tool_enttemp_template_append $_temp $_mods
]

// Adds a new template from the selected entity
tool_enttemp_template_froment = [
    local _num_attrs _num_temp_props _temp _mods

    entloopread [
        _num_attrs      = (entityattrs (indexof $tool_ent_types (enttype)) 1)
        _num_temp_props = (+ $_num_attrs $TOOL_ENTTEMP_PROP_NUM_EXTRA)

        // TODO: Calculate offsets from the base position?
        // Problem: base position from what? First entity? Selection?
        // How to solve interaction with inconsistent dropentity positioning?

        _temp = [[] @(enttype) @_offset @(loopconcat i $TOOL_ENTTEMP_PROP_NUM_EXTRA 0) @(sublist (entget) 1)]
        _mods = (loopconcat i $_num_temp_props 0)

        tool_enttemp_template_append $_temp $_mods
    ]
]

// Duplicates a template
tool_enttemp_template_duplicate = [
    if (>= $tool_enttemp_sel_template_idx 0) [
        local _temp_col _mod_col _temp _mods
        _temp_col = (getalias $tool_enttemp_sel_template_col)
        _mod_col  = (getalias $tool_enttemp_sel_modifier_col)

        _temp = (at $_temp_col $tool_enttemp_sel_template_idx)
        _mods = (at $_mod_col $tool_enttemp_sel_template_idx)

        tool_enttemp_template_append $_temp $_mods
    ] [
        error "tool_enttemp_template_duplicate error: no template selected"
    ]
]

// Removes a template
// 1:<template index>
tool_enttemp_template_remove = [
    local _temp_col _mod_col
    _temp_col = (getalias $tool_enttemp_sel_template_col)
    _mod_col  = (getalias $tool_enttemp_sel_modifier_col)

    _temp_col = (listsplice $_temp_col [] $arg1 1)
    _mod_col  = (listsplice $_mod_col  [] $arg1 1)

    mapmeta $tool_enttemp_sel_template_col $_temp_col
    mapmeta $tool_enttemp_sel_modifier_col $_mod_col

    caseif (= $tool_enttemp_sel_template_idx $arg1) [
        // This was the active template, deselect
        tool_enttemp_template_select -1
    ] (> $tool_enttemp_sel_template_idx $arg1) [
        // The current index was higher than removed, select the new index
        tool_enttemp_template_select (- $tool_enttemp_sel_template_idx 1)
    ]
]

// Selects a template at the supplied index for manipulation
// 1:<index>
tool_enttemp_template_select = [
    local _temp_col_len
    _temp_col_len = (listlen (getalias $tool_enttemp_sel_template_col))

    if (&& [< $arg1 $_temp_col_len]) [
        tool_enttemp_sel_template_idx = (clamp $arg1 -1 (- $_temp_col_len 1))

        // Store the template data for quick access
        if (< $arg1 0) [
            tool_enttemp_cur_template  = []
            tool_enttemp_cur_modifiers = []
        ] [
            tool_enttemp_cur_template  = (at (getalias $tool_enttemp_sel_template_col) $arg1)
            tool_enttemp_cur_modifiers = (at (getalias $tool_enttemp_sel_modifier_col) $arg1)
        ]
    ] [
        error "tool_enttemp_sel_template error: invalid index"
    ]
]

// Updates the template property at the supplied indices with new values
// 1:<property indices> 2:<values>
tool_enttemp_template_update = [
    if (>= $tool_enttemp_sel_template_idx 0) [
        local _temp_col _temp _value
        _temp_col = (getalias $tool_enttemp_sel_template_col)
        _temp     = $tool_enttemp_cur_template

        loop i (listlen $arg1) [
            _value = (at $arg2 $i)

            // Simplify 0 values to integers for consistency
            if (=s $_value 0.0) [
                _value = 0
            ]

            _temp  = (listsplice $_temp $_value (at $arg1 $i) 1)
        ]

        tool_enttemp_cur_template = $_temp

        _temp_col = (listsplice $_temp_col [[@@_temp]] $tool_enttemp_sel_template_idx 1)
        mapmeta $tool_enttemp_sel_template_col $_temp_col
    ] [
        error "tool_enttemp_template_update error: no template selected"
    ]
]

// Updates the template name
// 1:<name>
tool_enttemp_template_update_name = [
    tool_enttemp_template_update $TOOL_ENTTEMP_PROP_NAME_IDX [[[@@@arg1]]]
]

// Updates the template offset
// 1:<offset vector>
tool_enttemp_template_update_offset = [
    tool_enttemp_template_update [
        @TOOL_ENTTEMP_PROP_OFFSET_X_IDX
        @TOOL_ENTTEMP_PROP_OFFSET_Y_IDX
        @TOOL_ENTTEMP_PROP_OFFSET_Z_IDX
    ] $arg1
]

// Updates a template attribute
// 1:<attribute index> 2:<value>
tool_enttemp_template_update_attr = [
    tool_enttemp_template_update (+ $TOOL_ENTTEMP_PROP_ATTR_START_IDX $arg1) $arg2
]

// Returns the entity of the template at the supplied index.
// If no index supplied, currently active template is taken.
// 1:<index (optional)>
tool_enttemp_template_get_ent = [
    local _temp

    if $numargs [
        _temp = (at (getalias $tool_enttemp_sel_template_col) $arg1)
    ] [
        _temp = $tool_enttemp_cur_template
    ]

    concat (at $_temp $TOOL_ENTTEMP_PROP_TYPE_IDX) (sublist $_temp $TOOL_ENTTEMP_PROP_ATTR_START_IDX)
]

// Returns the position offset of the template at the supplied index.
// If no index supplied, currently active template is taken.
// 1:<index (optional)>
tool_enttemp_template_get_offset = [
    local _temp

    if $numargs [
        _temp = (at (getalias $tool_enttemp_sel_template_col) $arg1)
    ] [
        _temp = $tool_enttemp_cur_template
    ]

    sublist $_temp $TOOL_ENTTEMP_PROP_OFFSET_X_IDX 3
]

// Returns the name of the template at the supplied index.
// If no index supplied, currently active template is taken.
// 1:<index (optional)>
tool_enttemp_template_get_name = [
    local _temp

    if $numargs [
        _temp = (at (getalias $tool_enttemp_sel_template_col) $arg1)
    ] [
        _temp = $tool_enttemp_cur_template
    ]

    at $_temp $TOOL_ENTTEMP_PROP_NAME_IDX
]

// Updates the modifier at the supplied property index with a new value.
// 1:<property index> 2:<modifier type> 3:<value>
tool_enttemp_modifier_update = [
    if (>= $tool_enttemp_sel_template_idx 0) [
        // No modifiers for the first non-numerical properties
        arg1 = (- $arg1 $TOOL_ENTTEMP_PROP_NUM_START_IDX)

        local _mod_col _mods _mod _mod_mode _mod_param
        _mod_col   = (getalias $tool_enttemp_sel_modifier_col)
        _mods      = $tool_enttemp_cur_modifiers
        _mod       = (at $_mods $arg1)
        _mod_mode  = (at $_mod $TOOL_ENTTEMP_MOD_MODE_IDX)
        _mod_param = (at $_mod $TOOL_ENTTEMP_MOD_PARAM_IDX)

        if $arg3 [
            // Enable a modifier mode
            _mod_mode = (| $_mod_mode $arg2)
        ] [
            // Disable a modifier mode
            _mod_mode = (& $_mod_mode (~ $arg2))
        ]

        if (tool_enttemp_modifier_needs_param $_mod_mode $arg2 $arg3) [
            // Has parameter
            if (& $arg2 $TOOL_ENTTEMP_MOD_MODE_PARAM_MASK) [
                // The modifier we're trying to set right now takes a parameter,
                // so let's put the new value in
                _mod_param = $arg3
            ] // Otherwise, keep the previous value

            _mod = [[@@_mod_mode @@_mod_param]]
        ] [
            // Not taking any parameters, just update the mode
            _mod = $_mod_mode
        ]

        _mods    = (listsplice $_mods $_mod $arg1 1)
        _mod_col = (listsplice $_mod_col [[@@_mods]] $tool_enttemp_sel_template_idx 1)

        tool_enttemp_cur_modifiers = $_mods

        mapmeta $tool_enttemp_sel_modifier_col $_mod_col
    ] [
        error "tool_enttemp_modifier_update error: no template selected"
    ]
]

// Returns the modifier parameter at the supplied index.
// If no parameter set, returns 0.
// 1:<modifier index>
tool_enttemp_modifier_get_param = [
    local _mod_idx _mod
    _mod_idx = (- $arg1 $TOOL_ENTTEMP_PROP_NUM_START_IDX)
    _mod     = (at $tool_enttemp_cur_modifiers $_mod_idx)

    if (> (listlen $_mod) 1) [
        at $_mod $TOOL_ENTTEMP_MOD_PARAM_IDX
    ] [
        // No parameter set, result 0
        result 0
    ]
]

// Returns the modifier mode at the supplied index
// 1:<modifier index>
tool_enttemp_modifier_get_mode = [
    local _mod_idx
    _mod_idx = (- $arg1 $TOOL_ENTTEMP_PROP_NUM_START_IDX)

    at (at $tool_enttemp_cur_modifiers $_mod_idx) $TOOL_ENTTEMP_MOD_MODE_IDX
]



////////////////////////////
// TEMPLATE INSTANTIATION //
////////////////////////////



// Returns whether a template can be placed
tool_enttemp_can_place = [
    // Can place if:
    && [
        // Placement enabled
        $tool_enttemp_place_enabled
    ] [
        // Has templates
        !=s (getalias $tool_enttemp_sel_template_col)
    ]
]

// Places a given template in the map
// 1:<template index>
tool_enttemp_place_template = [
    if (tool_enttemp_can_place) [
        local _temp _mods _ent_type _num_attrs _ent _prop_idx _offset_x _offset_y _offset_z _new_ent
        local _old_offset
        _temp      = (at (getalias $tool_enttemp_sel_template_col) $arg1)
        _mods      = (at (getalias $tool_enttemp_sel_modifier_col) $arg1)
        _ent_type  = (at $_temp $TOOL_ENTTEMP_PROP_TYPE_IDX)
        _num_attrs = (entityattrs (indexof $tool_ent_types $_ent_type) 1)
        _ent       = $_ent_type

        loop i $_num_attrs [
            _prop_idx = (+ $i $TOOL_ENTTEMP_PROP_ATTR_START_IDX)
            append _ent (tool_enttemp_calc_ent_prop $_temp $_mods $_prop_idx)
        ]

        _offset_x = (tool_enttemp_calc_ent_prop $_temp $_mods $TOOL_ENTTEMP_PROP_OFFSET_X_IDX)
        _offset_y = (tool_enttemp_calc_ent_prop $_temp $_mods $TOOL_ENTTEMP_PROP_OFFSET_Y_IDX)
        _offset_z = (tool_enttemp_calc_ent_prop $_temp $_mods $TOOL_ENTTEMP_PROP_OFFSET_Z_IDX)

        _old_offset = (entdropoffset)
        entdropoffset $_offset_x $_offset_y $_offset_z

        // TODO: Add rotation support for offsets

        do [
            _new_ent = (newent @_ent)
        ]

        do [
            entdropoffset @_old_offset
        ]

        // Link entities if requested
        if (tool_enttemp_can_link_ents $_new_ent) [
            entlinkidx $_new_ent $tool_enttemp_last_ent_idx (- $tool_enttemp_link_mode 1)
        ]

        tool_enttemp_last_ent_idx = $_new_ent
    ]
]

// Picks and places templates in the map
tool_enttemp_place = [
    if (= $tool_enttemp_place_mode $TOOL_ENTTEMP_PLACE_ALL) [
        // Place all templates in the collection
        loop i (listlen (getalias $tool_enttemp_sel_template_col)) [
            tool_enttemp_place_template $i
        ]
    ] [
        // Pick and place one of the templates
        tool_enttemp_place_template (tool_enttemp_pick_template)
    ]
]

// Selects all entites matching a template
// 1:<template index>
tool_enttemp_search = [
    local _temp _mods _proc _num_attrs _prop_idx
    _temp      = (at (getalias $tool_enttemp_sel_template_col) $arg1)
    _mods      = (at (getalias $tool_enttemp_sel_modifier_col) $arg1)
    _num_attrs = (entityattrs (indexof $tool_ent_types (at $_temp $TOOL_ENTTEMP_PROP_TYPE_IDX)) 1)

    _proc = [
        local _result
        _result = (=s (enttype) (at $_temp $TOOL_ENTTEMP_PROP_TYPE_IDX))

        // Loop through all standard entity attributes in the template
        loopwhile i $_num_attrs [$_result] [
            _prop_idx  = (+ $i $TOOL_ENTTEMP_PROP_ATTR_START_IDX)
            _mod       = (at $_mods (- $_prop_idx $TOOL_ENTTEMP_PROP_NUM_START_IDX))
            _mod_mode  = (at $_mod $TOOL_ENTTEMP_MOD_MODE_IDX)
            _mod_param = (at $_mod $TOOL_ENTTEMP_MOD_PARAM_IDX)

            // Skip attribute checks when modifiers are enabled
            // TODO: Implement attribute matching with modifiers enabled,
            // needs exposed attribute range/wrap-around mechanisms
            if $_mod_mode [] [
                if (!= (entattr $i) (at $_temp $_prop_idx)) [
                    _result = 0
                ]
            ]
        ]

        result $_result
    ]

    entselect _proc
]



/////////////////////////////
// BACKWARDS COMPATIBILITY //
/////////////////////////////



// Converts collections to version 2
tool_enttemp_convert_v2 = [
    local _mod_col _mods _mod
    _mod_col = []
    _mods    = []
    _mod     = []

    // Convert the lists
    loop i (getalias tool_ent_placer_num_template_lists) [
        _mod_col = (getalias [tool_ent_placer_mods_@i])

        loop j (listlen $_mod_col) [
            _mods = (at $_mod_col $j)

            loop k (listlen $_mods) [
                if (>= $k 2) [
                    _mod = (at $_mods $k)

                    // Convert to multi-mode modifier storage
                    if $_mod [
                        _mods = (listsplice $_mods [[@@TOOL_ENTTEMP_MOD_VARIANCE @@_mod]] $k 1)
                    ] [
                        _mods = (listsplice $_mods $TOOL_ENTTEMP_MOD_NONE $k 1)
                    ]
                ]
            ]

            _mod_col = (listsplice $_mod_col [[@@_mods]] $j 1)
        ]

        if (!=s $_mod_col) [
            mapmeta [tool_ent_placer_mods_@i] $_mod_col
        ]
    ]
]

// Converts collections to version 3
# tool_enttemp_convert_v3 = [
    local _temp_col _name_col _mod_col _temp _name _ent_type _mods _z_offset _z_offset_var
    _temp_col = []
    _name_col = []
    _temp     = []
    _name     = []
    _mod_col  = []
    _mods     = []
    _mod      = []
    _z_offset = 0

    // Name change
    if (!=s (getalias tool_ent_placer_num_template_lists)) [
        mapmeta tool_enttemp_num_cols $tool_ent_placer_num_template_lists
        remmapmeta tool_ent_placer_num_template_lists
    ]

    // Name change
    if (!=s (getalias tool_ent_placer_template_list_names)) [
        mapmeta tool_enttemp_col_names $tool_ent_placer_template_list_names
        remmapmeta tool_ent_placer_template_list_names
    ]

    // Convert the lists
    loop i (getalias tool_enttemp_num_cols) [
        _temp_col = (getalias [tool_ent_placer_templates_@i])
        _name_col = (getalias [tool_ent_placer_template_names_@i])
        _mod_col  = (getalias [tool_ent_placer_mods_@i])

        // Names/storage changed, remove old variables
        remmapmeta [tool_ent_placer_templates_@i]
        remmapmeta [tool_ent_placer_template_names_@i]
        remmapmeta [tool_ent_placer_mods_@i]

        loop j (listlen $_temp_col) [
            _temp         = (at $_temp_col $j)
            _mods         = (at $_mod_col $j)
            _name         = (at $_name_col $j)
            _z_offset     = (at $_mods 0)
            _z_offset_var = (at $_mods 1)
            _ent_type     = (at $_temp 0)

            // Template names and entity offsets are now stored within the template list itself
            _temp = [[@@_name] @_ent_type 0 0 @_z_offset @(sublist $_temp 1)]

            // Remove Z offset modifiers from the modifier list
            _mods = (sublist $_mods 2)

            // If there was a Z offset variance set
            if $_z_offset_var [
                // Insert 0 modifiers for the X and Y offsets at the beginning,
                // converting the Z offset variance to the common format
                _mods = [0 0 [#TOOL_ENTTEMP_MOD_VARIANCE $_z_offset_var] @_mods]
            ] [
                // Insert 0 modifiers for the X, Y, Z offsets at the beginning
                _mods = [0 0 0 @_mods]
            ]

            _temp_col = (listsplice $_temp_col [[@@_temp]] $j 1)
            _mod_col  = (listsplice $_mod_col  [[@@_mods]] $j 1)
        ]

        mapmeta [tool_enttemp_template_col_@i] $_temp_col
        mapmeta [tool_enttemp_modifier_col_@i] $_mod_col
    ]
]

// Checks version and performs backwards compatibility conversion if needed
tool_enttemp_version_compat = [
    local _saved_version
    _saved_version = (getalias tool_saved_version)

    if (!=s $_saved_version "") [
        if (<= $_saved_version $TOOL_VERSION) [
            if (< $_saved_version 2) [
                tool_enttemp_convert_v2
            ]

            if (< $_saved_version 3) [
                tool_enttemp_convert_v3
            ]

            tool_enttemp_compatible = 1
        ] [
            tool_enttemp_compatible = 0
            error "Map editor metadata version newer than current!"
        ]
    ]
]



/////////////////
// ON MAP LOAD //
/////////////////



// Reset state and perform backwards compatibility routines on map load
tool_enttemp_on_mapload = [
    tool_enttemp_reset
    tool_enttemp_version_compat
]
tool_on_mapload tool_enttemp_on_mapload
