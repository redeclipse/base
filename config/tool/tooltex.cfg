exec "config/tool/tooltexparam.cfg"

tool_tex_cur           = -1
tool_tex_cur_edit      = -1
tool_tex_variantsrc    = -1
tool_tex_replace       = -1
tool_tex_autoapply_old = 0
tool_tex_autoapply     = 0
tool_tex_variant_edit  = 0
tool_tex_replace_sel   = 0

tool_tex_edit        = 0
tool_tex_sync_params = 0

tool_tex_props_disabled = 0

tool_tex_blend_brushes = []

defvarp texeditdefaultautoapply 0 1 1

tool_goto_control_Textures = [
    tool_tex_editvariant
]

// 1:<description> 2:<tags>
tool_tex_register_control = [
    tool_register_control $arg1 $arg2 "Textures"
]

loop brushidx (blendbrush -1) [
    append tool_tex_blend_brushes (getblendbrushname $brushidx)
]

tool_tex_can_focus = [
    = $tool_tex_edit 0
]

// 1:<slot> 2:<edit mode>
tool_focus_tex = [
    tool_tex_cur_edit = $arg1
    if $arg2 [] [
        tool_tex_cur = $arg1
    ]
    tool_tex_variantsrc = (getslottex (getvindex $arg1))
]

// 1:<from> 2:<to> 3:<insidefaces> 4:<decal>
tool_tex_cull = [
    local _oldtexnum _cullednum

    if $arg4 [
        _oldtexnum = $numdecalslots

        removedecalslots $arg1 $arg2

        _cullednum = (- $_oldtexnum $numdecalslots)
    ] [
        _oldtexnum = $numvslots

        if $arg3 [
            fixinsidefaces
        ]

        compactvslots 1 $arg1 $arg2

        _cullednum = (- $_oldtexnum $numvslots)
    ]

    tool_info_show (format "Culled %1 texture%2" $_cullednum (? (= $_cullednum 1) "" "s"))
]

// 1:<slot> 2:<decal>
tool_tex_cull_from = [
    tool_tex_cull $arg1 -1 0 $arg2
]

// 1:<slot> 2:<decal>
tool_tex_cull_group = [
    local _from _to _slot
    _from = -1
    _to = -1
    _slot = $arg1

    while [&& [>= $_slot 0] [< $_from 0]] [
        if (!=s (gettexgroup $arg1 $arg2) (gettexgroup $_slot $arg2)) [
            _from = (+ $_slot 1)
        ]

        _slot = (- $_slot 1)
    ]

    _slot = $arg1

    while [&& [>= $_slot 0] [< $_to 0]] [
        if (!=s (gettexgroup $arg1 $arg2) (gettexgroup $_slot $arg2)) [
            _to = (- $_slot 1)
        ]

        _slot = (+ $_slot 1)
    ]

    if (> $_from 0) [
        tool_tex_cull $_from $_to 0 $arg2
    ]
]

filename = [
    listlast (strreplace (strreplace $arg1 "/" " ") "\" " ")
]

// 1:<slot> 2:<decal>
tool_tex_remove = [
    if $arg2 [
        removedecalslots $arg1 $arg1
    ] [
        local _src
        _src = (getvindex $arg1)

        if (!= $_src $arg1) [
            replacetex $_src $arg1
        ] [
            replacetex 1 $arg1
        ]

        compactvslots 1 $arg1 $arg1
    ]
]

tool_action_tex_editcancel = [
    tool_tex_param_edit_end 0
    tool_tex_edit = 0
]

tool_action_tex_editconfirm = [
    tool_tex_param_edit_end 1
    tool_tex_edit = 0
]

tool_tex_on_close = [
    if $tool_tex_edit [
        tool_action_tex_editcancel

        if $texeditdefaultautoapply [
            tool_tex_autoapply = $tool_tex_autoapply_old
        ]
    ]
]

tool_tex_editvariant = [
    toolpanel_open tool_textures right [
        p_title       = "Textures"
        p_clear_stack = 1
    ]

    tool_tex_edit = 1
    tool_tex_param_edit_begin

    if $texeditdefaultautoapply [
        tool_tex_autoapply_old = $tool_tex_autoapply
        tool_tex_autoapply     = 1
    ]
]

tool_tex_editslot_decal                   = 0
tool_texeditslot_specfromdiffuse          = 0
tool_texeditslot_heightfromnormal         = 0
tool_texeditslot_specfromdiffuse_enabled  = 0
tool_texeditslot_heightfromnormal_enabled = 0
tool_texeditslot_force_spec               = 0
tool_texeditslot_force_reflection         = 0
tool_texeditslot_force_triplanar          = 0
tool_texeditslot_force_pulse              = 0

// 1:<slot> 2:<decal>
tool_tex_editslot = [
    tool_tex_cur            = $arg1
    tool_tex_editslot_decal = (? $arg2 1 0)

    toolpanel_open tool_texeditslot right [
        p_title = "Edit texture slot"
    ]
]

tool_tex_editslot_parseslot = [
    local _texcount _textype _shadername _shaderidx _shaderlist
    _texcount   = (getvtexcount $tool_tex_cur $tool_tex_editslot_decal)
    _shadername = (getvshadername $tool_tex_cur $tool_tex_editslot_decal)

    //
    // Get texture paths
    //

    loop i $TEX_TYPES [
        [tool_texeditslot_tex@i] = ""
    ]

    loop i $_texcount [
        _textype = (getvtextype $tool_tex_cur $i $tool_tex_editslot_decal)
        [tool_texeditslot_tex@_textype] = (fixpathslashes (getvtexname $tool_tex_cur $i $tool_tex_editslot_decal))
    ]

    //
    // Parse shader information
    //

    _shaderlist = (? $tool_tex_editslot_decal decalshaders worldshaders)

    _shaderidx = (listfind i $$_shaderlist [
        =s $_shadername (at $i 0)
    ])

    tool_texeditslot_hints = (at $$_shaderlist $_shaderidx 1)

    if $tool_tex_editslot_decal [
        // Filter out decal-specific control hints
        tool_texeditslot_hints = (strreplace $tool_texeditslot_hints "b" "")
    ]

    tool_tex_editslot_checkhints

    // Parse hints to enable flags
    if (strhaschars $tool_texeditslot_hints "s") [
        local _specmap
        _specmap = (!=s $[tool_texeditslot_tex@TEX_SPEC] "")

        if (strhaschars $tool_texeditslot_hints "S") [
            tool_texeditslot_specfromdiffuse_enabled = (&& [
                $tool_texeditslot_specfromdiffuse
            ] [
                ! $_specmap
            ])

            tool_texeditslot_force_spec = (! $tool_texeditslot_specfromdiffuse_enabled)
        ] [
            tool_texeditslot_specfromdiffuse_enabled = 0
            tool_texeditslot_force_spec              = 1
        ]
    ] [
        tool_texeditslot_specfromdiffuse_enabled = 0
        tool_texeditslot_force_spec              = 0
    ]

    if (strhaschars $tool_texeditslot_hints "p") [
        local _parallax
        _parallax = (!=s $[tool_texeditslot_tex@TEX_DEPTH] "")

        tool_texeditslot_heightfromnormal_enabled = (&& [
            $tool_texeditslot_heightfromnormal
        ] [
            ! $_parallax
        ])
    ] [
        tool_texeditslot_heightfromnormal_enabled = 0
    ]

    if (strhaschars $tool_texeditslot_hints "er") [
        local _reflection
        _reflection = (!=s $[tool_texeditslot_tex@TEX_ENVMAP] "")

        tool_texeditslot_force_reflection = (! $_reflection)
    ] [
        tool_texeditslot_force_reflection = 0
    ]

    tool_texeditslot_force_triplanar = (strhaschars $tool_texeditslot_hints "T")
    tool_texeditslot_force_pulse     = (strhaschars $tool_texeditslot_hints "G")

    //
    // Parse grass parameters
    //

    if $tool_tex_editslot_decal [] [
        local _grassscale _grassheight
        _grassscale  = (getvgrasscale $tool_tex_cur)
        _grassheight = (getvgrassheight $tool_tex_cur)

        if $_grassscale [] [
            _grassscale = 2
        ]
        _grassscale = (- $_grassscale 1)

        if $_grassheight [] [
            _grassheight = 4
        ]

        tool_texeditslot_grass = (getvgrassname $tool_tex_cur)
        tool_texeditslot_grass_params = [
            [@@(getvgrasscolour $tool_tex_cur)]
            @(getvgrassblend $tool_tex_cur)
            @(-f 1 (divf $_grassscale 63))
            @_grassheight
        ]
    ]
]

tool_tex_editslot_updatehints = [
    local _add_hint
    _add_hint = [
        if (< (strstr $tool_texeditslot_hints $arg1) 0) [
            appendword tool_texeditslot_hints $arg1
        ]
    ]

    // Build shader hints based on current textures
    local _normal _glow _pulse _reflection _spec _specmap _parallax _alpha _disp _triplanar
    _normal     = 0
    _glow       = 0
    _pulse      = 0
    _reflection = 0
    _spec       = 0
    _specmap    = 0
    _parallax   = 0
    _alpha      = 0
    _disp       = 0
    _triplanar  = 0

    tool_texeditslot_hints = ""

    // Normal
    if (strhaschars $tool_texeditslot_allowedhints "n") [
        _normal = (!=s $[tool_texeditslot_tex@TEX_NORMAL] "")
    ]

    // Glow
    if (strhaschars $tool_texeditslot_allowedhints "g") [
        _glow = (!=s $[tool_texeditslot_tex@TEX_GLOW] "")

        if (strhaschars $tool_texeditslot_allowedhints "G") [
            _pulse = $tool_texeditslot_force_pulse
        ]
    ]

    // Reflections
    if (strhaschars $tool_texeditslot_allowedhints "er") [
        _reflection = (|| [
            $tool_texeditslot_force_reflection
        ] [
            !=s $[tool_texeditslot_tex@TEX_ENVMAP] ""
        ])
    ]

    // Specular map
    if (strhaschars $tool_texeditslot_allowedhints "S") [
        _specmap = (|| [
            && $tool_texeditslot_specfromdiffuse $tool_texeditslot_specfromdiffuse_enabled
        ] [
            !=s $[tool_texeditslot_tex@TEX_SPEC] ""
        ])
    ]

    // Specular
    if (strhaschars $tool_texeditslot_allowedhints "s") [
        if $_specmap [
            _spec = 1
        ] [
            _spec = $tool_texeditslot_force_spec
        ]
    ]

    // Parallax
    if (strhaschars $tool_texeditslot_allowedhints "p") [
        _parallax = (|| [
            && $tool_texeditslot_heightfromnormal $tool_texeditslot_heightfromnormal_enabled
        ] [
            !=s $[tool_texeditslot_tex@TEX_DEPTH] ""
        ])
    ]

    // Alpha
    if (strhaschars $tool_texeditslot_allowedhints "m") [
        _alpha = (!=s $[tool_texeditslot_tex@TEX_ALPHA] "")
    ]

    // Displacement
    if (strhaschars $tool_texeditslot_allowedhints "v") [
        _disp = (!=s $[tool_texeditslot_tex@TEX_DISPMAP] "")
    ]

    // Triplanar
    if (strhaschars $tool_texeditslot_allowedhints "T") [
        _triplanar = $tool_texeditslot_force_triplanar
    ]

    if $_normal [
        _add_hint "n"
    ]

    if $_glow [
        _add_hint "g"

        if $_pulse [
            _add_hint "G"
        ]
    ]

    if $_reflection [
        _add_hint "e"
        _add_hint "r"

        // Reflections modulated by specular map
        if $_specmap [
            _add_hint "R"
        ]
    ]

    if $_spec [
        _add_hint "s"

        if $_specmap [
            _add_hint "S"
        ]
    ]

    if $_parallax [
        _add_hint "p"
    ]

    if $_alpha [
        _add_hint "m"
    ]

    if $_disp [
        _add_hint "v"
    ]

    if $_triplanar [
        _add_hint "T"
    ]
]

// 1:<update>
tool_tex_editslot_checkhints = [
    if $tool_tex_editslot_decal [
        tool_texeditslot_allowedhints = [n e er eR erR s Ss p g gG v]
    ] [
        tool_texeditslot_allowedhints = [n e er eR erR s Ss p g gG m T v]
    ]

    if (!=s $[tool_texeditslot_tex@TEX_DIFFUSE] "") [
        tool_texeditslot_specfromdiffuse = (> (gettexbpp $[tool_texeditslot_tex@TEX_DIFFUSE] 1) 3)
    ] [
        tool_texeditslot_specfromdiffuse = 0
    ]

    if (!=s $[tool_texeditslot_tex@TEX_NORMAL] "") [
        tool_texeditslot_heightfromnormal = (> (gettexbpp $[tool_texeditslot_tex@TEX_NORMAL] 1) 3)
    ] [
        tool_texeditslot_heightfromnormal = 0
    ]

    if $arg1 [
        tool_tex_editslot_updatehints
    ]

    // Filter out forbidden hint combinations
    if (!=s $tool_texeditslot_hints "") [
        looprev i (listlen $tool_texeditslot_allowedhints) [
            local _hint _check
            _hint = (at $tool_texeditslot_allowedhints $i)

            if (! (strhaschars $tool_texeditslot_hints $_hint)) [
                _check = $tool_texeditslot_hints
                loop j (strlen $_hint) [
                    if (< (strstr $tool_texeditslot_hints (substr $_hint $j 1)) 0) [
                        appendword _check (substr $_hint $j 1)
                    ]
                ]

                if (< (findworldshader $_check) 0) [
                    tool_texeditslot_allowedhints = (listsplice $tool_texeditslot_allowedhints "" $i 1)
                ]
            ]
        ]
    ]
]

tool_tex_editslot_apply_rescale = 1

// 1:<rescale>
tool_tex_editslot_apply = [
    local _shaderidx _settex _hints _rescale
    _hints = $tool_texeditslot_hints

    if $tool_tex_editslot_decal [
        _rescale = 0

        if (< (strstr $_hints "n") 0) [
            appendword _hints "b"
        ]

        _shaderidx = (finddecalshader $_hints)

        if (>= $_shaderidx 0) [
            _shader = (at $decalshaders $_shaderidx 0)
        ] [
            _shader = "stddecal"
        ]
    ] [
        _rescale = $tool_tex_editslot_apply_rescale

        _shaderidx = (findworldshader $_hints)

        if (>= $_shaderidx 0) [
            _shader = (at $worldshaders $_shaderidx 0)
        ] [
            _shader = "stdworld"
        ]
    ]

    // 1:<type> 2:<path>
    _settex = [
        if (!=s $arg2 "") [
            texture $arg1 $arg2
        ] [
            remtexture $arg1
        ]
    ]

    editslot $tool_tex_cur [
        _settex 0 $[tool_texeditslot_tex@TEX_DIFFUSE]
        _settex n $[tool_texeditslot_tex@TEX_NORMAL]
        _settex g $[tool_texeditslot_tex@TEX_GLOW]
        _settex s $[tool_texeditslot_tex@TEX_SPEC]
        _settex z $[tool_texeditslot_tex@TEX_DEPTH]
        _settex a $[tool_texeditslot_tex@TEX_ALPHA]
        _settex e $[tool_texeditslot_tex@TEX_ENVMAP]
        _settex v $[tool_texeditslot_tex@TEX_DISPMAP]

        changeslotshader $_shader

        if $tool_tex_editslot_decal [] [
            local _grassscale _grassheight
            _grassscale  = (at $tool_texeditslot_grass_params 2)
            _grassscale  = (clamp (round (-f 64 (*f $_grassscale 63))) 1 64)
            _grassheight = (at $tool_texeditslot_grass_params 3)

            texgrass $tool_texeditslot_grass
            do [
                texgrasscolor @(at $tool_texeditslot_grass_params 0)
            ]
            texgrassblend (at $tool_texeditslot_grass_params 1)
            texgrassscale $_grassscale
            texgrassheight $_grassheight
        ]

    ] $_rescale $tool_tex_editslot_decal
]

tool_action ta_textures [
    p_short_desc = "Texture panel"
    p_long_desc  = "Open the texture panel"
    p_icon       = "<grey>textures/icons/edit/texture"
    p_category   = "Textures"
    p_code       = [
        toolpanel_toggle tool_textures right [
            p_title       = "Textures"
            p_clear_stack = 1
        ]
    ]
]

tool_action ta_tex_apply [
    p_short_desc = "Apply texture"
    p_long_desc  = "Apply currenly picked texture"
    p_icon       = "<grey>textures/icons/attack"
    p_category   = "Textures"
    p_code       = [
        settex $tool_tex_cur
    ]
]

tool_action ta_tex_apply_allfaces [
    p_short_desc = "Apply texture on all faces"
    p_long_desc  = "Apply currenly picked texture on all faces"
    p_icon       = "<grey>textures/icons/attack"
    p_category   = "Textures"
    p_code       = [
        local _allfaces_old
        _allfaces_old = $allfaces

        allfaces 1
        settex $tool_tex_cur
        allfaces = $_allfaces_old
    ]
]

tool_action ta_tex_get [
    p_short_desc = "Get texture"
    p_long_desc  = "Get texture from current in-map selection"
    p_icon       = "<grey>textures/icons/arrow"
    p_category   = "Textures"
    p_code       = [
        tool_focus_tex (getseltex 1)
        tool_info_show "Selected texture" [
            p_children = [
                uivslotview @@tool_tex_cur $ui_toolinfo_action_image_size $ui_toolinfo_action_image_size
            ]
        ]
    ]
]

tool_action ta_tex_editvariant [
    p_short_desc = "Toggle texture variant edit"
    p_long_desc  = "Toggle editing of texture variant parameters"
    p_icon       = "<grey>textures/icons/voices"
    p_category   = "Textures"
    p_code       = [
        if (&& (toolpanel_isopen tool_textures) $tool_tex_edit) [
            tool_tex_param_edit_end 0
            tool_tex_edit = 0

            if $texeditdefaultautoapply [
                tool_tex_autoapply = $tool_tex_autoapply_old
            ]
        ] [
            tool_tex_editvariant
        ]
    ]
]

tool_action ta_recalc [
    p_short_desc = "Recalculate map"
    p_long_desc  = "Recalculate map vertices, normals, cubemaps and blending"
    p_icon       = "<grey>textures/icons/editing"
    p_category   = "Textures"
    p_code       = [
        recalc
        calclight
    ]
]

tool_action ta_tex_cull [
    p_short_desc = "Cull textures"
    p_long_desc  = "Cull unused texture slots and optimize inside faces"
    p_icon       = "<grey>textures/icons/editing"
    p_category   = "Textures"
    p_flags      = $TA_FLAG_NOONLINE
    p_code       = [
        tool_confirm_prompt "Do you want to cull all textures?" [
            tool_tex_cull 0 -1 1
        ] [
            p_noundo_warn = 1
        ]
    ]
]

tool_action ta_tex_replace [
    p_short_desc = "Replace textures"
    p_long_desc  = "Replace texture instances with a different one"
    p_icon       = "<grey>textures/icons/editing"
    p_category   = "Textures"
    p_flags      = $TA_FLAG_NOONLINE
    p_code       = [
        tool_tex_edit = 0
        toolpanel_toggle tool_texreplace right [
            p_title = "Replace texture"
        ]
    ]
]

tool_action ta_tex_paint [
    p_short_desc = "Blendmap paint panel"
    p_long_desc  = "Open texture blend painting panel"
    p_icon       = "<grey>textures/icons/editing"
    p_category   = "Textures"
    p_flags      = $TA_FLAG_NOONLINE
    p_code       = [
        tool_tex_edit = 0
        toolpanel_toggle tool_texpaint right [
            p_title = "Texture blend painting"
        ]
    ]
]

tool_action ta_toggle_blankgeom [
    p_short_desc = "Toggle blank geometry mode"
    p_long_desc  = "Toggle blank geometry mode, disabling rendering of diffuse textures"
    p_icon       = "<grey>textures/icons/edit/texture"
    p_category   = "Textures"
    p_code       = [
        blankgeom (! $blankgeom)
    ]
]

tool_action ta_newslot [
    p_short_desc = "Add a new texture slot"
    p_long_desc  = "Add a new texture slot"
    p_icon       = "<grey>textures/icons/edit/texture"
    p_category   = "Textures"
    p_flags      = $TA_FLAG_NOONLINE
    p_code       = [
        texgroup "Custom"
        setshader stdworld
        texture 0 "textures/default"
    ]
]

tool_action ta_newdecal [
    p_short_desc = "Add a new texture decal"
    p_long_desc  = "Add a new texture decal"
    p_icon       = "<grey>textures/icons/edit/decal"
    p_category   = "Textures"
    p_flags      = $TA_FLAG_NOONLINE
    p_code       = [
        texgroup "Custom"
        setshader stddecal
        texture decal "textures/default"
    ]
]
