tool_modes = [
    dm
    ctf
    dac
    bb
    speedrun
]

tool_muts = [
    ffa
    coop
    insta
    medi
    kaboom
    duel
    surv
    classic
    ons
    vamp
    resize
    hard
    arena
    dark
]

tool_team_names = [
    "Neutral"
    "Alpha"
    "Omega"
]

tool_weapon_names = [
    [@@clawlongname]
    [@@pistollongname]
    [@@swordlongname]
    [@@shotgunlongname]
    [@@smglongname]
    [@@flamerlongname]
    [@@plasmalongname]
    [@@zapperlongname]
    [@@riflelongname]
    [@@corroderlongname]
    [@@grenadelongname]
    [@@minelongname]
    [@@rocketlongname]
]

tool_weapon_pickup_names = [
    @(sublist $tool_weapon_names 2)
]

tool_palette_ids = [
    [
        "No palette"
        "Dark fire"
        "Bright fire"
        "Disco"
        "Shock"
        "Bleed"
        "Buff"
        "Warning"
        "Regen"
        "Flash"
    ] [
        @@tool_team_names
    ] [
        @@tool_weapon_names
    ]
]

tool_palette_enforce_vals = [0 @(listlen $tool_team_names) 13]

UNDO_NONE = 0
UNDO_CUBE = 1
UNDO_ENT = 2

// 1:<values> 2:<blue fix> 3:<zero fix>
# tool_colour_toint = [
    local _r _g _b
    _r = (at $arg1 0)
    _g = (at $arg1 1)
    _b = (at $arg1 2)

    if $arg2 [
        if (&& [=f $_r 0] [=f $_g 0] [>f $_b 0]) [
            _r = #(divf 1 255)
            _g = #(divf 1 255)
        ]
    ]

    if $arg3 [
        if (&& [=f $_r 0] [=f $_g 0] [=f $_b 0]) [
            _r = #(divf 1 255)
            _g = #(divf 1 255)
            _b = #(divf 1 255)
        ]
    ]

    intcolour $_r $_g $_b
]

// 1:<colour integer>
tool_colour_rem_alpha = [
    if (colourhasalpha $arg1) [
        tohex (& $arg1 0x00FFFFFF)
    ] [
        result $arg1
    ]
]

// 1:<colour integer>
tool_colour_get_alpha = [
    if (colourhasalpha $arg1) [
        tohex (& (>> $arg1 24) 0xFF)
    ] [
        result 0xFF
    ]
]

// 1:<colour integer> 2:<alpha>
tool_colour_add_alpha = [
    if (colourhasalpha $arg1) [
        arg1 = (tool_colour_rem_alpha $arg1)
    ]

    tohex (| $arg1 (<< $arg2 24))
]

tool_procs = []

// 1:<function>
tool_proc_add = [
    if (listhas $tool_procs $arg1) [] [
        append tool_procs $arg1
    ]
]

// 1:<function>
tool_proc_remove = [
    local _index
    _index = (listfind=s $tool_procs $arg1)

    if (>= $_index 0) [
        tool_procs = (listsplice $tool_procs [] $_index 1)
    ]
]

tool_proc = [
    looplist proc $tool_procs [
        $proc
    ]
]

// 1:<index>
p_list = [
    result [
        p_get = [(at $arg1 @@arg1)]
        p_set = [(listsplice $$arg2 $arg1 @@arg1 1)]
        p_id = @arg1
    ]
]

// 1:<integer> 2:<byte>
tool_get_byte = [
    & (>> $arg1 (* $arg2 8)) 0xFF
]

// 1:<integer> 2:<byte val> 3:<byte>
tool_set_byte = [
    local _val _mask
    _mask = (^ (<< 0xFF (* $arg3 8)))
    _val  = (& $arg1 $_mask)

    | $_val (<< $arg2 (* $arg3 8))
]

// Returns a unique name.
// If a name already exists, instance number is appened at the end, e.g.:
// 'Item #2', 'Item #3', etc...
// 1:<requested name> 2:<existing names> 3:<index prefix>
tool_get_name = [
    local _base_name _base_name_len _new_name _idx_pos _idx _idx_prefix_len
    _base_name      = $arg1
    _base_name_len  = (strlen $_base_name)
    _new_name       = $arg1
    _idx            = 1
    _idx_prefix_len = (strlen $arg3)

    // Find the base name if requested name contains an index suffix
    // Ensure the remaining characters are all digits making up the index
    _idx_pos = (strstr $_base_name $arg3)
    if (&& [> $_idx_pos -1] [is_integer (substr $_base_name (+ $_idx_pos $_idx_prefix_len))]) [
        // Remove the index suffix, that's the base name
        _base_name = (substr $_base_name 0 $_idx_pos)
    ]

    // Add and increment the index suffix if name already exists
    while [listhas $arg2 $_new_name] [
        _idx = (+ $_idx 1)

        // Don't add the suffix for the first index
        if (> $_idx 1) [
            _new_name = (concatword $_base_name $arg3 $_idx)
        ]
    ]

    result $_new_name
]

tool_image_exts = ["jpg" "png" "tga"]
tool_sound_exts = ["wav" "ogg"]

TOOL_FILE_ANY = 0
TOOL_FILE_IMAGE = 1
TOOL_FILE_SOUND = 2
TOOL_FILE_CONFIG = 3
TOOL_FILE_ASSETPACK = 4

// 1:<type>
tool_file_type_exts = [
    case $arg1 @TOOL_FILE_ANY [
        result []
    ] @TOOL_FILE_IMAGE [
        result [@@tool_image_exts]
    ] @TOOL_FILE_SOUND [
        result [@@tool_sound_exts]
    ] @TOOL_FILE_CONFIG [
        result "cfg"
    ]
]

// 1:<file> 2:<type>
tool_file_is_type = [
    local _exts
    _exts = (tool_file_type_exts $arg2)

    if (!=s $_exts) [
        >= (listfind=s $_exts (fileext $arg1)) 0
    ] [
        result 1
    ]
]

// 1:<file>
tool_file_isimage = [
    tool_file_is_type $arg1 @TOOL_FILE_IMAGE
]

// 1:<file>
tool_file_ishidden = [
    = (strstr $arg1 ".") 0
]

// Strips texture commands from a texture path
// E.g. "<invert><mad:0/0.5/0.2>folder/image.jpg" -> "folder/image.jpg"
// 1:<path>
tool_path_striptexcmds = [
    local _bracket
    _bracket = (strrstr $arg1 ">")

    if (>= $_bracket 0) [
        substr $arg1 (+ $_bracket 1)
    ] [
        result $arg1
    ]
]

// Returns a list of texture commands from a texture path
// E.g. "<invert><mad:0/0.5/0.2>folder/image.jpg" -> [[invert] [mad [0 0.5 0.2]]]
// 1:<path>
tool_path_gettexcmds = [
    local _path _open_bracket _close_bracket _cmd _parsed_cmd _cmds
    _path = $arg1
    _open_bracket = (strstr $_path "<")
    _cmds = []

    while [>= $_open_bracket 0] [
        _close_bracket = (strstr $_path ">")
        _cmd = (substr $_path (+ $_open_bracket 1) (- $_close_bracket $_open_bracket 1))

        // Remove ":" and "," separators
        _cmd = (strreplace (strreplace $_cmd ":" " ") "," " ")

        // Format the command arguments into sublists
        loop i (listlen $_cmd) [
            if (= $i 0) [
                _parsed_cmd = (at $_cmd 0)
            ] [
                append _parsed_cmd [[@@(strreplace (at $_cmd $i) "/" " ")]]
            ]
        ]

        // Add the command to the list
        append _cmds [[@@_parsed_cmd]]

        // Remove the command from the path
        _path = (substr $_path (+ $_close_bracket 1))

        // Find the next command
        _open_bracket = (strstr $_path "<")
    ]

    result $_cmds
]

// Returns a formatted texture command
// E.g. "mad [0 0.5 0.2]" -> "<mad:0/0.5/0.2>"
// 1:<command>
tool_path_maketexcmd = [
    local _cmd _cmd_len _cmd_str _cmdlet
    _cmd = $arg1
    _cmd_len = (listlen $_cmd)

    if (> $_cmd_len 1) [
        _cmd_str = (concatword "<" (at $_cmd 0) ":")

        // Add the command arguments
        loop i (- $_cmd_len 1) [
            _cmdlet = (strreplace (at $_cmd (+ $i 1)) " " "/")

            if (= $i (- $_cmd_len 2)) [
                _cmd_str = (concatword $_cmd_str $_cmdlet)
            ] [
                _cmd_str = (concatword $_cmd_str $_cmdlet ",")
            ]
        ]

        concatword $_cmd_str ">"
    ] [
        concatword "<" $_cmd ">"
    ]
]

TOOL_VERSION = 3

tool_on_mapload_handlers = []

// 1:<handler>
tool_on_mapload = [
    append tool_on_mapload_handlers $arg1
]

tool_remember_version_on_mapload = [
    looplist _handler $tool_on_mapload_handlers [
        $_handler
    ]

    mapmeta tool_saved_version $TOOL_VERSION
]

onevent $CMD_EVENT_MAPLOAD tool_remember_version_on_mapload

// Returns if non-online operations are currently allowed
tool_onlinelock = [
    && $nompedit $isonline
]

TOOL_NOMPEDIT_DISABLED_TEXT = "Option disabled in multiplayer"
TOOL_NOMPEDIT_WARN_TEXT     = "Option will cause online desync"

tool_nompedit_text = [
    if $isonline [
        ? (tool_onlinelock) $TOOL_NOMPEDIT_DISABLED_TEXT $TOOL_NOMPEDIT_WARN_TEXT
    ]
]
