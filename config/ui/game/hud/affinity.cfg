loadsound S_HUD_AFFINITY_TAKE    "sounds/interface/affinity_take"    0.8  1 1 -1 -1 1
loadsound S_HUD_AFFINITY_DELIVER "sounds/interface/affinity_deliver" 0.8  1 1 -1 -1 1
loadsound S_HUD_AFFINITY_DROP    "sounds/interface/affinity_drop"    0.8  1 1 -1 -1 1
loadsound S_HUD_AFFINITY_HOLD    "sounds/interface/affinity_hold"    0.8  1 1 -1 -1 1

GAME_HUD_AFFINITY_SCORE  = 0
GAME_HUD_AFFINITY_SECURE = 1
GAME_HUD_AFFINITY_DROP   = 2
GAME_HUD_AFFINITY_RETURN = 3
GAME_HUD_AFFINITY_HOLD   = 4

// Animation sequence timings
game_hud_def_seqstep GAME_HUD_AFFINITY_ANIMSTEP_APPEAR      400
game_hud_def_seqstep GAME_HUD_AFFINITY_ANIMSTEP_APPEAR_HOLD 500
game_hud_def_seqstep GAME_HUD_AFFINITY_ANIMSTEP_SHRINK      750
game_hud_def_seqstep GAME_HUD_AFFINITY_ANIMSTEP_HOLD        1500
game_hud_def_seqstep GAME_HUD_AFFINITY_ANIMSTEP_FADE        300


game_hud_def_seq GAME_HUD_AFFINITY_FULL_EVENT_SEQ [
    GAME_HUD_AFFINITY_ANIMSTEP_APPEAR
    GAME_HUD_AFFINITY_ANIMSTEP_APPEAR_HOLD
    GAME_HUD_AFFINITY_ANIMSTEP_SHRINK
    GAME_HUD_AFFINITY_ANIMSTEP_HOLD
    GAME_HUD_AFFINITY_ANIMSTEP_FADE
]

game_hud_def_seq GAME_HUD_AFFINITY_SHORT_EVENT_SEQ [
    GAME_HUD_AFFINITY_ANIMSTEP_APPEAR
    GAME_HUD_AFFINITY_ANIMSTEP_APPEAR_HOLD
    GAME_HUD_AFFINITY_ANIMSTEP_SHRINK
    GAME_HUD_AFFINITY_ANIMSTEP_FADE
]

// Returns animation state a given event type should persist at
// 1:<event type>
# game_hud_affinity_get_event_persist = [
    local _result
    _result = 0

    if (&& [= $gamemode $G_DEFEND] [= $arg1 $GAME_HUD_AFFINITY_HOLD]) [
        if $game_hud_affinity_event_short_anim [
            _result = #(at (game_hud_anim_times_rev $GAME_HUD_AFFINITY_SHORT_EVENT_SEQ $GAME_HUD_AFFINITY_ANIMSTEP_SHRINK) 1)
        ] [
            _result = #(at (game_hud_anim_times_rev $GAME_HUD_AFFINITY_FULL_EVENT_SEQ $GAME_HUD_AFFINITY_ANIMSTEP_SHRINK) 1)
        ]
    ]

    result $_result
]

// Transient event queue
game_hud_affinity_transient_events = []

// Persistent event (no queue, only one event is allowed)
game_hud_affinity_persist_event = []

// Current event
game_hud_affinity_cur_event          = []
game_hud_affinity_event_persist      = 0
game_hud_affinity_event_short_anim   = 0
game_hud_affinity_event_anim         = 0
game_hud_affinity_event_text         = ""
game_hud_affinity_event_icon         = ""
game_hud_affinity_event_target_used  = 0
game_hud_affinity_event_top          = ui_game_hud_affinity_icon
game_hud_affinity_event_icon_content = []

// Bit mask of the available affinity layout targets
// Space for two affinities
game_hud_affinity_avail_targets = 3

// Gets the layout target num for the icon to move to
game_hud_affinity_event_get_icon_target_num = [
    if (&& [= (at $game_hud_affinity_cur_event 0) $GAME_HUD_AFFINITY_SECURE] [!= $gamemode $G_DEFEND]) [
        if (& $game_hud_affinity_avail_targets 1) [
            result 1
        ] [
            if (& $game_hud_affinity_avail_targets 2) [
                result 2
            ] // Else, no space available? Don't error to avoid spamming the console
        ]
    ]
]

// Gets the layout target for the icon to move to
// 1:<target num>
game_hud_affinity_event_get_icon_target = [
    case $arg1 1 [
        if (& $game_hud_affinity_avail_targets 1) [
            game_hud_affinity_avail_targets = (& $game_hud_affinity_avail_targets 2)
            result game_hud_player_affinity_target1
        ]
    ] 2 [
        if (& $game_hud_affinity_avail_targets 2) [
            game_hud_affinity_avail_targets = (& $game_hud_affinity_avail_targets 1)
            result game_hud_player_affinity_target2
        ]
    ]
]

// Puts the icon target back into the available targets
// 1:<target name>
game_hud_affinity_event_put_icon_target = [
    if (=s $arg1 game_hud_player_affinity_target1) [
        game_hud_affinity_avail_targets = (| $game_hud_affinity_avail_targets 1)
    ] [
        if (=s $arg1 game_hud_player_affinity_target2) [
            game_hud_affinity_avail_targets = (| $game_hud_affinity_avail_targets 2)
        ]
    ]
]

loadsound S_AFFINITY_TICK "sounds/interface/tick" 1.0  1 1 -1 -1 1
game_hud_affinity_last_tick = 99999

ui_game_hud_affinity_icon_bomb_ticker = [
    local _bombertick _bombertickscore
    _bombertick      = (divf (mod $gametimesync $bomberholdinterval) $bomberholdinterval)
    _bombertickscore = (concatword "+" $bomberholdpoints)

    if (<f $_bombertick $game_hud_affinity_last_tick) [
        soundbyname S_AFFINITY_TICK 64
    ]
    game_hud_affinity_last_tick = $_bombertick

    _bombertick = (gameui_anim_segment $_bombertick 0 (divf (min 400 $bomberholdinterval) $bomberholdinterval))

    uiclip $_w $_h (*f $_w 1) (*f $_h 1) [
        uifill (*f $_w 3) (*f $_h 3)
        uifont "play/clear/bold" [
            uitext $_bombertickscore (lerpf 0 1 (gameui_anim_segment $_bombertick 0 0.5)) [
                uicolourblend (-f 1 $_bombertick)
            ]
            uitext $_bombertickscore (lerpf 0 3 $_bombertick) [
                uicolourblend (*f (-f 1 $_bombertick) 0.5)
            ]
        ]
    ]
]

# ui_game_hud_affinity_icon_bomb_timer = [
    local _time_left _warn_level
    _time_left = (max (ceilf (divf (- $bombercarrytime (- $lastmillis (getbombertaketime $arg1))) 1000)) 0)

    if (!= $_time_left $game_hud_affinity_last_tick) [
        _warn_level = (clampf (*f (-f 6 $_time_left) #(divf 1 5)) 0 1)
        soundbyname S_AFFINITY_TICK (lerp 64 255 $_warn_level) 0 (lerpf 1 2 $_warn_level)
    ]
    game_hud_affinity_last_tick = $_time_left

    uifont "play/clear/bold" [
        uicolourtext $_time_left (? (<f $_time_left 5) (pulsecolour $PULSE_WARN) 0xffffff)
    ]
]

ui_game_hud_affinity_icon = [
    local _image_size

    if $_icon_target [
        _image_size = (*f $game_hud_largepanel_width 0.3)
    ] [
        _image_size = (lerpf 0 (*f $game_hud_largepanel_width 0.3) $_layout_anim)
    ]

    uiimage (game_hud_get_affinity_icon) $_affinity_colour 0 $_image_size $_image_size [
        local _affinity_blend _sub_icon_blend _sub_icon_size _shadow_offset
        _sub_icon_blend = (*f $_aff_anim 0.67 (-f 1 $_flash_anim))
        _sub_icon_size  = (*f $_image_size 0.5)
        _shadow_offset  = (*f $_image_size 0.035)

        if (&& $_icon_target [! $game_hud_affinity_event_target_used]) [
            // At the end of animation
            if (=f $_aff_anim 0) [
                game_hud_affinity_event_target_used = 1
                _icon_target = (game_hud_affinity_event_get_icon_target $_icon_target)

                game_hud_show_dyn_layout $_icon_target 750 [
                    uiimage (game_hud_get_affinity_icon) (game_hud_get_affinity_colour @(at $game_hud_affinity_cur_event 1)) 0 $_w $_h [
                        if (!=s $game_hud_affinity_event_icon_content []) [
                            $game_hud_affinity_event_icon_content @@@(at $game_hud_affinity_cur_event 1)
                        ]
                        uicolourblend 0.67
                    ]
                ] [
                    ! (game_hud_is_affinity_owned @(at $game_hud_affinity_cur_event 1))
                ] [
                    game_hud_affinity_event_put_icon_target $p_target
                ]
            ]

            _affinity_blend = (*f (ceilf $_aff_anim) 0.67 (-f 1 $_flash_anim))
        ] [
            _affinity_blend = $_sub_icon_blend
        ]

        uicolourblend $_affinity_blend

        uigroup [
            uialign 1 1

            uioffset $_shadow_offset $_shadow_offset [
                uiimage $game_hud_affinity_event_icon 0 0 $_sub_icon_size $_sub_icon_size
            ]

            uiimage $game_hud_affinity_event_icon 0x888888 0 $_sub_icon_size $_sub_icon_size

            uipropagate [ uicolourblend $_sub_icon_blend ]
        ]
    ]
]

ui_game_hud_affinity_progress = [
    local _base_size _image_size _affinity_flash_colour _blend _owner_colour _shadow_size _occupy
    _base_size             = (lerpf 0 (*f $game_hud_largepanel_width 0.3) $_layout_anim)
    _image_size            = (*f $_base_size 0.75)
    _affinity_flash_colour = (lerpcolourhsv $_affinity_colour $_team_colour (gameui_anim_pulse 0.25 0 1))
    _blend                 = (*f $_aff_anim 0.67 (-f 1 $_flash_anim))
    _owner_colour          = (getteamcolour (getdefendowner (at $game_hud_affinity_cur_event 1)))
    _occupy                = (getdefendoccupied (at $game_hud_affinity_cur_event 1))

    uifont "play/clear/bold" [
        uivlist 0 [
            uigroup [
                uiimage $glowtex $_affinity_flash_colour 0 $_base_size $_base_size [
                    uicolourblend 0.5
                ]

                uiimage (game_hud_get_affinity_icon) $_affinity_flash_colour 0 $_image_size $_image_size [
                    local _printable _font_size _shadow_offset
                    _printable = (getprintable (at $game_hud_affinity_cur_event 1))
                    _font_size = (*f (gameui_anim_pulse 0.25 20 25) $_base_size)
                    _shadow_offset = (*f $_font_size 0.0015)

                    uigroup [
                        uioffset $_shadow_offset $_shadow_offset [
                            uicolourtext $_printable 0 $_font_size [
                                uicolourblend 0.85
                            ]
                        ]

                        uitext $_printable $_font_size [
                            uicolourblend 0.85
                        ]
                    ]
                ]

                uioffset 0 (*f $_base_size 0.8) [
                    local _shadow_offset _text_colour
                    _shadow_offset = 0.003
                    _text_colour = (modcolourhsv $_affinity_flash_colour 1 0.5 1)

                    uioffset $_shadow_offset $_shadow_offset [
                        uicolourtext (getdefendname (at $game_hud_affinity_cur_event 1)) 0 1.5 [
                            uicolourblend 0.85
                        ]
                    ]

                    uicolourtext (getdefendname (at $game_hud_affinity_cur_event 1)) $_text_colour 1.5
                ]
            ]

            uifill 0 0 [
                uihlist 0 [
                    uiborderedimageclamped $skintex $_owner_colour 0 $ui_texborder $ui_screenborder (*f $_base_size 1.5 (-f 1 $_occupy)) (*f $_base_size 0.04)
                    uiborderedimageclamped $skintex $_team_colour 0 $ui_texborder $ui_screenborder (*f $_base_size 1.5 $_occupy) (*f $_base_size 0.04)
                ]

                ui_gameui_shadow
            ]

            uipropagate [ uicolourblend $_blend ]
        ]
    ]
]

ui_game_hud_affinity_event = [
    local _anim_seq _fade_seq_step _team_colour _affinity_colour _flash_anim _layout_anim _aff_anim _fade_anim _text_size _glow_size _icon_target

    if $game_hud_affinity_event_short_anim [
        _flash_anim  = @@(game_hud_anim_seq_rev $GAME_HUD_AFFINITY_SHORT_EVENT_SEQ $GAME_HUD_AFFINITY_ANIMSTEP_APPEAR [$game_hud_affinity_event_anim])
        _layout_anim = @@(game_hud_anim_seq_rev $GAME_HUD_AFFINITY_SHORT_EVENT_SEQ $GAME_HUD_AFFINITY_ANIMSTEP_SHRINK [$game_hud_affinity_event_anim])
        _fade_anim   = @@(game_hud_anim_seq_rev $GAME_HUD_AFFINITY_SHORT_EVENT_SEQ $GAME_HUD_AFFINITY_ANIMSTEP_FADE   [$game_hud_affinity_event_anim])
    ] [
        _flash_anim  = @@(game_hud_anim_seq_rev $GAME_HUD_AFFINITY_FULL_EVENT_SEQ $GAME_HUD_AFFINITY_ANIMSTEP_APPEAR [$game_hud_affinity_event_anim])
        _layout_anim = @@(game_hud_anim_seq_rev $GAME_HUD_AFFINITY_FULL_EVENT_SEQ $GAME_HUD_AFFINITY_ANIMSTEP_SHRINK [$game_hud_affinity_event_anim])
        _fade_anim   = @@(game_hud_anim_seq_rev $GAME_HUD_AFFINITY_FULL_EVENT_SEQ $GAME_HUD_AFFINITY_ANIMSTEP_FADE   [$game_hud_affinity_event_anim])
    ]

    _layout_anim     = (smoothstep $_layout_anim)
    _team_colour     = (getteamcolour (getclientteam $ui_hud_focus))
    _aff_anim        = (gameui_anim_segment $_layout_anim 0.75 1)
    _text_size       = (lerpf $game_hud_status_text_size (*f $game_hud_status_text_size 1.5) $_layout_anim)
    _glow_size       = (*f $game_hud_largepanel_width 0.3 $_layout_anim)
    _affinity_colour = (game_hud_get_affinity_colour (at $game_hud_affinity_cur_event 1))
    _icon_target     = (game_hud_affinity_event_get_icon_target_num (at $game_hud_affinity_cur_event 0))

    uigroup [
        uialign 0 1

        uivlist 0 [
            uiimage $glowtex $_affinity_colour 0 (*f $_glow_size 1.5) $_glow_size [
                uicolourblend $_flash_anim
            ]

            uifill 0 (lerpf (*f $_glow_size 0.5) 0 $_flash_anim)
        ]

        uivlist (*f $game_hud_largepanel_width 0.01) [
            game_hud_affinity_event_top

            uifill 0 (lerpf 0 (*f $game_hud_largepanel_width 0.02) (smoothstep (gameui_anim_dual_edge $_flash_anim 0.45 0.55)))

            uifill 0 0 [
                ui_gameui_advshadowhoriz [
                    p_colour  = (modcolourhsv $_team_colour 1 (-f 1 $_flash_anim) 1)
                    p_bgblend = (*f (gameui_anim_pulse 1 0.5 1) $_layout_anim)
                ]

                uispace (*f $game_hud_largepanel_width 0.2) (*f $game_hud_largepanel_width 0.005) [
                    uifont "play/clear" [
                        uitext $game_hud_affinity_event_text $_text_size
                    ]
                ]
            ]

            uifill 0 (lerpf 0 0.05 $_layout_anim)
        ]

        uipropagate [
            uicolourblend $_fade_anim
        ]
    ]
]

// 1:<event type> 2:<affinity id>
game_hud_affinity_set_props_capture = [
    case $arg1 $GAME_HUD_AFFINITY_SECURE [
        if (= (getcaptureteam $arg2) (getclientteam $ui_hud_focus)) [
            game_hud_affinity_event_text = "You've picked up your flag!"
        ] [
            game_hud_affinity_event_text = "You've picked up the enemy flag!"
        ]
        game_hud_affinity_event_icon = $flagtakentex
        soundbyname S_HUD_AFFINITY_TAKE
    ] $GAME_HUD_AFFINITY_DROP [
        if (= (getcaptureteam $arg2) (getclientteam $ui_hud_focus)) [
            game_hud_affinity_event_text = "You've dropped your flag!"
        ] [
            game_hud_affinity_event_text = "You've dropped the enemy flag!"
        ]
        game_hud_affinity_event_icon = $flagdroptex
        soundbyname S_HUD_AFFINITY_DROP
    ] $GAME_HUD_AFFINITY_SCORE [
        game_hud_affinity_event_text = "You've scored!"
        game_hud_affinity_event_icon = ""
        soundbyname S_HUD_AFFINITY_DELIVER
    ] $GAME_HUD_AFFINITY_RETURN [
        game_hud_affinity_event_text = "You've returned your flag!"
        game_hud_affinity_event_icon = ""
        soundbyname S_HUD_AFFINITY_DELIVER
    ]
]

// 1:<event type> 2:<affinity id>
game_hud_affinity_set_props_bomber = [
    case $arg1 $GAME_HUD_AFFINITY_SECURE [
        game_hud_affinity_event_text = "You've picked up the bomb!"
        game_hud_affinity_event_icon = $bombtakentex
        game_hud_affinity_last_tick  = 99999

        if (hasmut $G_M_GSP1) [
            game_hud_affinity_event_icon_content = ui_game_hud_affinity_icon_bomb_ticker
        ] [
            game_hud_affinity_event_icon_content = ui_game_hud_affinity_icon_bomb_timer
        ]

        soundbyname S_HUD_AFFINITY_TAKE
    ] $GAME_HUD_AFFINITY_DROP [
        game_hud_affinity_event_text = "You've dropped the bomb!"
        game_hud_affinity_event_icon = $bombdroptex
        soundbyname S_HUD_AFFINITY_DROP
    ] $GAME_HUD_AFFINITY_SCORE [
        game_hud_affinity_event_text = "You've scored!"
        game_hud_affinity_event_icon = ""
        soundbyname S_HUD_AFFINITY_DELIVER
    ]
]

// 1:<event type> 2:<affinity id>
game_hud_affinity_set_props_defend = [
    case $arg1 $GAME_HUD_AFFINITY_HOLD [
        game_hud_affinity_event_text       = "Capturing point in progress..."
        game_hud_affinity_event_icon       = ""
        game_hud_affinity_event_top        = ui_game_hud_affinity_progress
        game_hud_affinity_event_short_anim = 1
        soundbyname S_HUD_AFFINITY_HOLD
    ] $GAME_HUD_AFFINITY_SECURE [
        game_hud_affinity_event_text = "You've captured the point!"
        game_hud_affinity_event_icon = ""
        soundbyname S_HUD_AFFINITY_DELIVER
    ]
]

// Begins the current event and updates its properties
game_hud_affinity_begin_event = [
    local _type _affinity_id
    _type        = (at $game_hud_affinity_cur_event 0)
    _affinity_id = (at $game_hud_affinity_cur_event 1)

    game_hud_affinity_event_anim         = 1
    game_hud_affinity_event_target_used  = 0
    game_hud_affinity_event_short_anim   = 0
    game_hud_affinity_event_top          = ui_game_hud_affinity_icon
    game_hud_affinity_event_icon_content = []

    case $gamemode $G_CAPTURE [
        game_hud_affinity_set_props_capture $_type $_affinity_id
    ] $G_BOMBER [
        game_hud_affinity_set_props_bomber $_type $_affinity_id
    ] $G_DEFEND [
        game_hud_affinity_set_props_defend $_type $_affinity_id
    ]

    game_hud_affinity_event_persist = (game_hud_affinity_get_event_persist $_type)
]

// Propagates the current event to the announcer
game_hud_affinity_propagate_event = [
    local event_affinity event_affinity_owner event_is_focus_affinity
    event_affinity          = (at $game_hud_affinity_cur_event 1)
    event_affinity_owner    = (event_get_affinity_owner $event_affinity)
    event_is_focus_affinity = (= $event_affinity_owner (getclientteam $ui_hud_focus))

    game_announcer_bind_handler $GAME_ANNOUNCER_EVENT_HUD_AFFINITY (at $game_hud_affinity_cur_event 0) $event_affinity
]

// Updates the current event by selecting the next
// Priority is given to transient events
game_hud_affinity_next_event = [
    caseif (!=s $game_hud_affinity_transient_events []) [
        game_hud_affinity_cur_event        = (at $game_hud_affinity_transient_events 0)
        game_hud_affinity_transient_events = (sublist $game_hud_affinity_transient_events 1)
    ] (!=s $game_hud_affinity_persist_event []) [
        game_hud_affinity_cur_event     = $game_hud_affinity_persist_event
        game_hud_affinity_persist_event = []
    ] (1) [
        // No more events
        game_hud_affinity_cur_event = []
    ]

    if (!=s $game_hud_affinity_cur_event []) [
        game_hud_affinity_begin_event
        game_hud_affinity_propagate_event
    ]
]

// 1:<event type> 2:<affinity id> 3:<persist cond>
game_hud_affinity_event = [
    if (= (getclientstate $ui_hud_focus) 0) [
        if (!=f (game_hud_affinity_get_event_persist $arg1) 0) [
            if (=s $game_hud_affinity_cur_event []) [
                game_hud_affinity_persist_event = [@arg1 @arg2 [@@arg3]]
            ]
        ] [
            append game_hud_affinity_transient_events [[@@arg1 @@arg2]]
        ]
    ]
]

// Finds the affinity the focused player is defending
game_hud_affinity_defend_find = [
    local _result
    _result = -1

    loopdefend 0 0 i [
        if (&& [! (isspectator $ui_hud_focus)] [getdefendinside $i $ui_hud_focus] [= (getdefendenemy $i) (getclientteam $ui_hud_focus)]) [
            _result = $i
        ]
    ]

    result $_result
]

ui_game_hud_affinity = [
    if (= $gamemode $G_DEFEND) [
        local _defending
        _defending = (game_hud_affinity_defend_find)

        if (> $_defending -1) [
            game_hud_affinity_event $GAME_HUD_AFFINITY_HOLD $_defending [
                = (game_hud_affinity_defend_find) @_defending
            ]
        ]
    ]

    if (!=s $game_hud_affinity_cur_event []) [
        local _seq_len

        if $game_hud_affinity_event_short_anim [
            _seq_len = (game_hud_anim_seq_len $GAME_HUD_AFFINITY_SHORT_EVENT_SEQ)
        ] [
            _seq_len = (game_hud_anim_seq_len $GAME_HUD_AFFINITY_FULL_EVENT_SEQ)
        ]

        ui_game_hud_affinity_event

        game_hud_affinity_event_anim = (animstep $game_hud_affinity_event_anim $_seq_len -1)

        if (!=f $game_hud_affinity_event_persist 0) [
            local _persist_cond
            _persist_cond = (at $game_hud_affinity_cur_event 2)

            if (_persist_cond) [
                game_hud_affinity_event_anim = (maxf $game_hud_affinity_event_persist $game_hud_affinity_event_anim)
            ]
        ]

        if (=f $game_hud_affinity_event_anim 0) [
            // Event animation finished and it is no longer shown, select the next event
            game_hud_affinity_cur_event = []
        ]
    ] [
        game_hud_affinity_next_event
    ]
]
