game_hud_recalc = [
    game_hud_panel_width              = (*f (get game_hud_scale) 0.32)
    game_hud_largepanel_width         = (*f (get game_hud_scale) 0.6)
    game_hud_status_width             = (*f (get game_hud_scale) 0.6)

    game_hud_panel_icon_width         = (*f (get game_hud_panel_width) 0.22)
    game_hud_panel_content_width      = (-f (get game_hud_panel_width) $game_hud_panel_icon_width)

    game_hud_player_effect_height     = (*f $game_hud_panel_content_width 0.067)

    game_hud_player_mainbar_width     = $game_hud_panel_content_width
    game_hud_player_mainbar_height    = (*f $game_hud_panel_content_width 0.08)
    game_hud_player_mainbar_text_size = (*f $game_hud_player_mainbar_height 50)

    game_hud_player_subbar_width      = (*f $game_hud_panel_content_width 0.8)
    game_hud_player_subbar_height     = (*f $game_hud_player_subbar_width 0.08)

    game_hud_largepanel_text_size     = (*f $game_hud_largepanel_width 2.5)

    game_hud_status_text_size         = (*f $game_hud_status_width 1.5)

    game_hud_event_text_size          = (*f $game_hud_scale $ui_textxtiny)
    game_hud_event_image_size         = (*f 0.015 $game_hud_scale)
]

deffvarp game_hud_scale 0.5 1 2.0 [
    game_hud_recalc
]

deffvarp game_hud_maxaspect 1 2 4

game_hud_recalc

// Returns the total anim sequence length in milliseconds
// 1:<sequence>
game_hud_anim_seq_len = [
    at $arg1 0
]

// Returns normalized start and end times for a step in animation sequence
// 1:<sequence> 2:<step>
game_hud_anim_times = [
    local _start _stop _seq_total _seq_steps _seq_step _seq_step_index
    _seq_total = (at $arg1 0)
    _seq_steps = (at $arg1 1)
    _start     = 0
    _stop      = 0

    _seq_step_index = (listfind i $_seq_steps [
        = (at $$i 0) (at $arg2 0)
    ])

    loop i (+ $_seq_step_index 1) [
        _seq_step = $(at $_seq_steps $i)
        _start    = $_stop
        _stop     = (+ $_stop (at $_seq_step 1))
    ]

    _start = (divf $_start $_seq_total)
    _stop  = (divf $_stop $_seq_total)

    result [@_start @_stop]
]

// Returns normalized start and end times for a step in animation sequence
// Reverse mode (anim from 1 to 0)
// 1:<sequence> 2:<step>
game_hud_anim_times_rev = [
    local _start _stop _seq_total _seq_steps _seq_step _seq_step_index
    _seq_total = (at $arg1 0)
    _seq_steps = (at $arg1 1)
    _start     = $_seq_total
    _stop      = $_seq_total

    _seq_step_index = (listfind i $_seq_steps [
        = (at $$i 0) (at $arg2 0)
    ])

    loop i (+ $_seq_step_index 1) [
        _seq_step = $(at $_seq_steps $i)
        _start    = $_stop
        _stop     = (- $_stop (at $_seq_step 1))
    ]

    _start = (divf $_start $_seq_total)
    _stop  = (divf $_stop $_seq_total)

    result [@_stop @_start]
]

// Macro returning code that returns the animation segment for a step in the sequence
// 1:<sequence> 2:<step> 3:<anim state var>
game_hud_anim_seq = [
    local _times
    _times = (game_hud_anim_times $arg1 $arg2)

    result [(gameui_anim_segment @arg3 @_times)]
]

// Macro returning code that returns the animation segment for a step in the sequence
// Reverse mode (anim from 1 to 0)
// 1:<sequence> 2:<step> 3:<anim state var>
game_hud_anim_seq_rev = [
    local _times
    _times = (game_hud_anim_times_rev $arg1 $arg2)

    result [(gameui_anim_segment @arg3 @_times)]
]

game_hud_last_seqstep_def = -1

// Defines a unique animation step handle
// 1:<name> 2:<length>
game_hud_def_seqstep = [
    inc game_hud_last_seqstep_def 1

    $arg1 = [@game_hud_last_seqstep_def @arg2]
]

// Defines an animation sequence
// 1:<name> 2:<steps>
game_hud_def_seq = [
    local _total_length
    _total_length = 0

    looplist i $arg2 [
        inc _total_length (at $$i 1)
    ]

    $arg1 = [
        @_total_length
        [@@arg2]
    ]
]

// 1:<affinity id>
game_hud_get_affinity_colour = [
    case $gamemode $G_CAPTURE [
        getteamcolour (getcaptureteam $arg1)
    ] $G_BOMBER [
        pulsecolour $PULSE_DISCO
    ] $G_DEFEND [
        getteamcolour (getdefendowner $arg1)
    ]
]

game_hud_get_affinity_icon = [
    case $gamemode $G_CAPTURE [
        result $flagtex
    ] $G_BOMBER [
        result $bombtex
    ] $G_DEFEND [
        result $pointtex
    ]
]

// 1:<affinity id>
game_hud_is_affinity_owned = [
    case $gamemode $G_CAPTURE [
        = (getcaptureowner $arg1) $ui_hud_focus
    ] $G_BOMBER [
        = (getbomberowner $arg1) $ui_hud_focus
    ]

]

game_hud_dyn_layout_props = [
    [ p_target ""   ]
    [ p_time   0    ]
    [ p_children [] ]
    [ p_start  0    ]
]

looplist _dyn_layout (getalias game_hud_dyn_layouts) [
    $_dyn_layout = []
]

game_hud_dyn_layouts = []

// 1:<target id>
game_hud_has_dyn_layout = [
    !=s (getalias (concatword $arg1 _object)) ""
]

// 1:<target id> 2:<time> 3:<children> 4:<remove cond> 5:<on remove>
game_hud_show_dyn_layout = [
    local _object_name
    _object_name = (concatword $arg1 _object)

    if (=s (getalias $_object_name) "") [
        $_object_name = [
            p_target    = @arg1
            p_time      = @arg2
            p_children  = [@@arg3]
            p_remove    = [@@arg4]
            p_on_remove = [@@arg5]
            p_pos       = [@@uilastsx @@uilastsy]
            p_size      = [@@uilastw @@uilasth]
            p_start     = @totalmillis
        ]

        append game_hud_dyn_layouts $_object_name
    ]
]

// 1:<layout id>
game_hud_remove_dyn_layout = [
    $arg1 = []

    game_hud_dyn_layouts = (listdel $game_hud_dyn_layouts $arg1)
]

// 1:<id>
game_hud_layout_target = [
    $arg1 = [
        @uilastsx
        @uilastsy
        @uilastw
        @uilasth
    ]
]

// 1:<layout> 2:<layout id>
ui_game_hud_dyn_layout = [
    @(props $game_hud_dyn_layout_props _dyn_layout)

    local _t _x _y _w _h
    _t = (smoothstep (-f 1 (clampf (divf (- $totalmillis $p_start) $p_time) 0 1)))
    _x = (lerpf (at $$p_target 0) (at $p_pos 0) $_t)
    _y = (lerpf (at $$p_target 1) (at $p_pos 1) $_t)
    _w = (lerpf (at $$p_target 2) (at $p_size 0) $_t)
    _h = (lerpf (at $$p_target 3) (at $p_size 1) $_t)

    uigroup [
        p_children

        uiposition $_x $_y
    ]

    if (p_remove) [
        p_on_remove
        game_hud_remove_dyn_layout $arg2
    ]
]

ui_game_hud_dyn_layouts = [
    looplist _dyn_layout $game_hud_dyn_layouts [
        ui_game_hud_dyn_layout $$_dyn_layout $_dyn_layout
    ]
]
