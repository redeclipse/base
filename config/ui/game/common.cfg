///////////////
// USER VARS //
///////////////



// Opening animation time of UI panels
deffvarp gameui_panel_anim_time 0 600 10000

// Opening animation time of UI panel overlays
deffvarp gameui_panel_overlay_anim_time 0 300 10000


///////////
// STATE //
///////////



// Current tip
gameui_tip                       = ""

// Confirm panel text
gameui_confirm_text              = ""

// Confirm panel action
gameui_confirm_action            = []

// Number of widget states to reset
gameui_num_states                = 0

// ID of the element currently being hovered on
gameui_hover_id                  = -1

// ID of the element emiting hover sound
gameui_hover_sound_id            = -1

// Whether currently hovering on an element inside the panel
gameui_hovering                  = 0

// Panel animation state (0 - 1)
gameui_panel_anim                = 0

// Panel sound state
gameui_panel_sound               = 0

// Panel overlay animation state (0 - 1)
gameui_panel_overlay_anim        = 0

// If the panel was previously closed
gameui_panel_first_open          = 0

// Panel positions and sizes
gameui_panel_old_size            = 0
gameui_panel_new_size            = 0
gameui_panel_old_pos             = 0
gameui_panel_new_pos             = 0

// Initially requested panel position and size
gameui_panel_req_dims            = []

// Panel overlay position and size
gameui_panel_overlay_pos         = 0
gameui_panel_overlay_w           = 0
gameui_panel_overlay_h           = 0

// Variable holding the content of the current panel
gameui_panel_content_var         = []

// Variable holding the overlay content of the current panel
gameui_panel_overlay_content_var = []

// Default panel handler
gameui_panel_default             = []

// Panel stack
gameui_panel_stack               = []

// Panel stack size
gameui_panel_stack_num           = 0

// Content autoscroll timer
gameui_autoscroll                = 0



///////////////
// CONSTATNS //
///////////////



// Panel stack info UI variable
GAMEUI_PANEL_INFO_UI   = 0

// Panel stack info size
GAMEUI_PANEL_INFO_SIZE = 1

// Panel stack info position
GAMEUI_PANEL_INFO_POS  = 2



//////////////////////
// HELPER FUNCTIONS //
//////////////////////



gameui_last_id        = -1
gameui_last_id_stride = 0

// Registered widgets
gameui_widgets = []

// Registers a widget type
// 1:<type> 2:<num ids>
gameui_widget_register = [
    append gameui_widgets [[@@arg1 @@arg2]]
]

// Returns number of widget IDs consumed by a widget type
// 1:<type>
gameui_widget_get_num_ids = [
    local _idx

    _idx = (listfind i $gameui_widgets [
        =s (at $i 0) $arg1
    ])

    if (!= $_idx -1) [
        at (at $gameui_widgets $_idx) 1
    ] [
        error "gameui_widget_get_num_ids: invalid type" $arg1
        result 0
    ]
]

// Returns next unique ID
// 1:<widget type> 2:<stride (optional)>
gameui_get_id = [
    local _stride

    if (> $numargs 1) [
        _stride = $arg2
    ] [
        _stride = (gameui_widget_get_num_ids $arg1)
    ]

    if (> $_stride 0) [
        gameui_last_id = (+ $gameui_last_id $gameui_last_id_stride)

        // Increment the maximum number of stored states if needed
        if (> $gameui_last_id $gameui_num_states) [
            gameui_num_states = $gameui_last_id
        ]

        gameui_last_id_stride = $_stride

        result $gameui_last_id
    ] [
        result [[]]
    ]
]

// Resets the unique ID counter
gameui_begin_ids = [
    gameui_last_type = []
    gameui_last_id   = -1
]

// Macro for getting the variable holding the animation state
// 1:<widget id>
gameui_get_anim_var = [
    result [(concatword "gameui_widget_anim_" $@arg1)]
]

// Enables interaction after resize part (first half) of panel open animation
gameui_can_interact = [
    >=f $gameui_panel_anim 0.5
]

// Derives a segment of supplied 't' time and scales its length to 1
// 1:<t> 2:<start> 3:<end>
gameui_anim_segment = [
    clampf (divf (-f $arg1 $arg2) (-f $arg3 $arg2)) 0 1
]

// Dual-edge interpolation
// 1:<t> 2:<top begin> 3:<top end>
gameui_anim_dual_edge = [
    if (<=f $arg1 $arg2) [
        gameui_anim_segment $arg1 0 $arg2
    ] [
        -f 1 (gameui_anim_segment $arg1 $arg3 1)
    ]
]

// One-shot flash interpolation
// 1:<t> 2:<tension> 3:<length>
gameui_anim_flash = [
    local _r
    _r = (*f 4 (pow $arg3 -2))
    clampf (pow (*f $_r $arg1 (-f $arg3 $arg1)) $arg2) 0 1
]

// Constant pulse animation
// 1:<freq> 2:<min> 3:<max>
gameui_anim_pulse = [
    +f (*f (+f (sin (*f $totalmillis $arg1)) 1) 0.5 (-f $arg3 $arg2)) $arg2
]

// Universal hover event used by game UI widgets with valid IDs
// 1:<muted>
gameui_hover = [
    gameui_hovering = 1

    // p_* vars coming from the current widget properties
    if (!= $p_id $gameui_hover_id) [
        gameui_hover_id = $p_id
        gameui_tip      = $p_tip
    ]

    if (! $arg1) [
        gameui_hovering = (| $gameui_hovering 2)

        if (!= $p_id $gameui_hover_sound_id) [
            gameui_hover_sound_id = $p_id
            soundbyname $p_sound_hover
        ]
    ]
]

// Returns a pretty game version string
gameui_pretty_version = [
    local _text
    _text = (concatword "v" $versionstring " (" $versionrelease ")")
    if $versionbuild [_text = (concatword $_text " [" $versionbranch ":" $versionbuild "]")]

    result $_text
]


//////////////////////
// PANEL MANAGEMENT //
//////////////////////



// Pushes current panel onto the stack
gameui_push_stack = [
    local _panel_info
    _panel_info = $gameui_panel_content_var
    append _panel_info $gameui_panel_new_size
    append _panel_info $gameui_panel_new_pos

    append gameui_panel_stack [[@@_panel_info]]

    gameui_panel_stack_num = (+ $gameui_panel_stack_num 1)
]

// Pops and opens the last panel from the stack
gameui_pop_stack = [
    local _panel_info _ui _size _pos
    _panel_info            = (at $gameui_panel_stack -1)
    _ui                    = (at $_panel_info $GAMEUI_PANEL_INFO_UI)
    _size                  = (at $_panel_info $GAMEUI_PANEL_INFO_SIZE)
    _pos                   = (at $_panel_info $GAMEUI_PANEL_INFO_POS)
    gameui_panel_stack     = (listsplice $gameui_panel_stack [] (- $gameui_panel_stack_num 1) 1)
    gameui_panel_stack_num = (- $gameui_panel_stack_num 1)

    gameui_open $_ui 1
]

// Clears the game UI panel stack
gameui_clear_stack = [
    gameui_panel_stack     = []
    gameui_panel_stack_num = 0
]

// Checks if a panel exists in the stack
// 1:<panel>
gameui_panel_in_stack = [
    local _result
    _result = 0

    loopwhile i $gameui_panel_stack_num [= $_result 0] [
        if (=s (at (at $gameui_panel_stack $i) 0) $arg1) [
            _result = 1
        ]
    ]

    result $_result
]

// Checks if a panel is open or in the stack
// 1:<panel>
gameui_panel_isopen = [
    || [=s $gameui_panel_content_var $arg1] [gameui_panel_in_stack $arg1]
]

// 1:<skip panel check>
gameui_recalc_pos = [
    if (|| $arg1 [gameui_has_panel]) [
        local _norm_size
        _norm_size = (divf (at $gameui_panel_req_dims 0) $uiaspect)

        if (< (listlen $gameui_panel_req_dims) 2) [
            gameui_panel_new_pos = (*f (-f 1 $_norm_size) 0.5)
        ] [
            gameui_panel_new_pos = (at $gameui_panel_req_dims 1)
        ]

        // Check if the panel goes beyond the right edge of the screen
        if (>f (+f $gameui_panel_new_pos $_norm_size) 1) [
            gameui_panel_new_pos = (-f 1 $_norm_size)
        ]
    ]
]
onevent $CMD_EVENT_SETUPDISPLAY gameui_recalc_pos

// Opens new content in the game UI panel
// Size and position will be taken from the variable '<content_var>_dims'.
// Positions and dimensions use normalized (0 - 1) coordinates.
// 1:<content var> 2:<no push stack>
# gameui_open = [
    if (!=s $gameui_panel_content_var $arg1) [
        if (&& [!=s $gameui_panel_content_var] [! $arg2]) [
            gameui_push_stack
        ]

        local _dims_var
        _dims_var = (concatword $arg1 "_dims")

        if (! (uitest "main")) [
            gameui_panel_first_open = 1
            gameui_panel_old_size   = 0
            gameui_panel_old_pos    = 0.5
        ] [
            gameui_panel_first_open = 0
            gameui_panel_old_size   = $gameui_panel_new_size
            gameui_panel_old_pos    = $gameui_panel_new_pos
        ]

        gameui_panel_anim     = 0
        gameui_panel_sound    = 0
        gameui_panel_new_size = (at $$_dims_var 0)
        gameui_panel_req_dims = $$_dims_var

        // Reset the hover state
        gameui_hover_id       = -1
        gameui_hover_sound_id = -1

        if (!=s $gameui_panel_content_var $arg1) [
            local _open_handler
            _open_handler = (getalias (concatword $arg1 "_on_open"))

            if (!=s $_open_handler "") [
                _open_handler
            ]
        ]

        gameui_recalc_pos 1

        // Skip resize animation if panel doesn't change
        if (&& [
            <f (absf (-f $gameui_panel_old_size $gameui_panel_new_size)) 0.00001
        ] [
            <f (absf (-f $gameui_panel_old_pos $gameui_panel_new_pos)) 0.00001
        ] [
            !=s $gameui_panel_content_var ""
        ]) [
            gameui_panel_anim = 0.5
        ] [
            soundbyname S_UI_ANIM1
        ]

        gameui_panel_content_var = $arg1

        loop i $gameui_num_states [
            #(gameui_get_anim_var i) = []
        ]

        if (! (uitest "main")) [
            showui "main"
        ]
    ]
]

// Returns whether there's any panel content to be displayed
gameui_has_panel = [
    !=s $gameui_panel_content_var ""
]

// Closes all panels
gameui_close_all = [
    ui_menu_close_main_overlay = 1

    hideui "main"
    hideui "main_overlay"
    gameui_panel_content_var         = []
    gameui_panel_overlay_content_var = []
    gameui_clear_stack
]

// Closes the current panel
// 1:<inhibit check>
gameui_close = [
    local _can_close _close_handler

    if $arg1 [
        _can_close = (getalias (concatword $gameui_panel_content_var "_can_close"))

        if (!=s $_can_close "") [
            // Overwrite with the result
            _can_close = (_can_close)
        ] [
            _can_close = 1
        ]
    ] [
        _can_close = 1
    ]

    // Prevent closing the main menu outside the game
    if (&& $_can_close [|| $isconnected [> $gameui_panel_stack_num 0]]) [
        _close_handler = (getalias (concatword $gameui_panel_content_var "_on_close"))

        if (!=s $_close_handler "") [
            _close_handler
        ]

        if (> $gameui_panel_stack_num 0) [
            gameui_pop_stack
            soundbyname S_UI_BACK
        ] [
            gameui_close_all
        ]
    ]
]

// Opens new overlay content in the game UI panel
// Positions and dimensions use uniform, aspect-dependent coordinates.
// 1:<content var> 2:<pos>
gameui_overlay_open = [
    gameui_panel_overlay_anim        = 0
    gameui_panel_overlay_w           = 0
    gameui_panel_overlay_h           = 0
    gameui_panel_overlay_content_var = $arg1
    gameui_panel_overlay_pos         = $arg2

    if (!=s $gameui_panel_overlay_content_var $arg1) [
        local _open_handler
        _open_handler = (getalias (concatword $arg1 "_on_open"))

        if (!=s $_open_handler "") [
            _open_handler
        ]
    ]

    showui "main_overlay"
]

// Closes the current panel overlay
gameui_overlay_close = [
    local _close_handler
    _close_handler = (getalias (concatword $gameui_panel_overlay_content_var "_on_close"))

    if (!=s $_close_handler "") [
        _close_handler
    ]

    gameui_panel_overlay_content_var = []

    ui_menu_close_main_overlay = 1
    hideui "main_overlay"
]

// Returns whether there's any panel overlay content to be displayed
gameui_has_panel_overlay = [
    !=s $gameui_panel_overlay_content_var ""
]

// Opens the confirmation panel
// 1:<text> 2:<action>
gameui_confirm = [
    gameui_confirm_text   = $arg1
    gameui_confirm_action = $arg2

    gameui_open ui_gameui_confirm
]



////////////
// SOUNDS //
////////////



loadsound S_UI_ANIM1          "sounds/interface/ui_anim1"          0.8  1 1 -1 -1 1
loadsound S_UI_ANIM2          "sounds/interface/ui_anim2"          0.15 1 1 -1 -1 1
loadsound S_UI_BACK           "sounds/interface/ui_back"           0.25 1 1 -1 -1 1
loadsound S_UI_ERROR          "sounds/interface/ui_error"          0.8  1 1 -1 -1 1
loadsound S_UI_SWOOSH         "sounds/interface/ui_swoosh"         0.1  1 1 -1 -1 1
loadsound S_UI_ACTION         "sounds/interface/ui_action_short"   0.8  1 1 -1 -1 1
loadsound S_UI_ACTION_ENABLE  "sounds/interface/ui_action_enable"  0.5  1 1 -1 -1 1
loadsound S_UI_ACTION_DISABLE "sounds/interface/ui_action_disable" 0.5  1 1 -1 -1 1
loadsound S_UI_HOVER          "sounds/interface/ui_hover"          0.8  1 1 -1 -1 1
loadsound S_UI_TICK           "sounds/interface/tick"              0.5  3 1 -1 -1 1



/////////////
// WIDGETS //
/////////////



exec "config/ui/game/widgets/widgets.cfg"



//////////////
// PANEL UI //
//////////////



# ui_gameui_backbutton = [
    local _id
    _id = (gameui_get_id button)

    result [
        uispace 0.02 0.02 [
            ui_gameui_button [
                p_label       = "Back"
                p_label_size  = 1.2
                p_width       = 0.09
                p_height      = 0.04
                p_colour      = 0xff8888
                p_on_click    = [
                    gameui_close
                ]
                p_id          = #1 _id
            ]
        ]
        uiprev [uialign -1 1]
    ]
]

ui_gameui_confirm_dims = 0.72

# ui_gameui_confirm = [
    #(gameui_begin_ids)

    uivlist 0.05 [
        uistyle clampx

        uicolour 0x55010101 0 0 [
            uistyle clampx

            uitext $gameui_confirm_text 1.5

            ui_gameui_shadowhoriz
        ]

        uihlist 0 [
            ui_gameui_prettybutton [
                p_label       = "Yes"
                p_label_align = 0
                p_width       = 0.2
                p_pad_h_shift = 0
                p_on_click    = [
                    gameui_close
                    gameui_confirm_action
                ]
                p_id          = #(gameui_get_id prettybutton)
            ]

            ui_gameui_prettybutton [
                p_label       = "No"
                p_label_align = 0
                p_width       = 0.2
                p_pad_h_shift = 0
                p_on_click    = [
                    gameui_close
                ]
                p_id          = #(gameui_get_id prettybutton)
            ]
        ]
    ]
]

ui_gameui_panel = [
    // Initialize state
    gameui_hovering = 0

    gameui_autoscroll = (autoscroll_timer (divf $totalmillis 1000))

    local _anim_smooth _anim_size _anim_fadein _size _pos _close_overlay
    // First half of the opening sequence
    _anim_size          = (gameui_anim_segment $gameui_panel_anim 0 0.5)
    _anim_size_smooth   = (-f 1 (*f (-f 1 $_anim_size) (-f 1 $_anim_size)))
    _size               = (lerpf $gameui_panel_old_size $gameui_panel_new_size $_anim_size_smooth)
    _pos                = (lerpf $gameui_panel_old_pos $gameui_panel_new_pos $_anim_size_smooth)
    _pos                = (uiwidth $_pos)
    // Second half of the opening sequence
    _anim_fadein        = (gameui_anim_segment $gameui_panel_anim 0.5 1)
    _anim_fadein_smooth = (-f 1 (*f (-f 1 $_anim_fadein) (-f 1 $_anim_fadein)))
    _close_overlay      = 1

    uiclip $uiaspect 1 0 0 [
        uicolourtext (gameui_pretty_version) 0x88ffffff 0.8
        uiprev [uialign 1 1]

        uiclip $_size 1 0 0 [
            uistyle clampy
            uiposition $_pos

            uicolour 0 $_size 1 [
                uistyle clampy
                uipropagate [uicolourblend (*f (? $isconnected 0.5 0.33) (? $gameui_panel_first_open $_anim_size 1))]

                if (>f $gameui_panel_anim 0.5) [
                    uioffset 0 (lerpf -0.015 0 $_anim_fadein_smooth) [
                        uistyle clampxy

                        uifont "play/clear" [
                            uistyle clampxy

                            gameui_panel_content_var
                            uipropagate [uicolourblend $_anim_fadein]
                        ]
                    ]

                    if (! $gameui_panel_sound) [
                        gameui_panel_sound = 1
                        soundbyname S_UI_ANIM2
                    ]
                ]
            ]
        ]

        uitarget $uiaspect 1 [
            uirelease [
                if $_close_overlay [
                    gameui_overlay_close
                ]
            ]
        ]
    ]

    // Reset hover ID when not hovering, handled in the overlay otherwise
    if (! (gameui_has_panel_overlay)) [
        if (! (& $gameui_hovering 1)) [
            gameui_hover_id = -1
        ]

        if (! (& $gameui_hovering 2)) [
            gameui_hover_sound_id = -1
        ]
    ]

    gameui_panel_anim = (animstep $gameui_panel_anim $gameui_panel_anim_time 1)
]

ui_gameui_panel_overlay = [
    // Clamp to 0.00001, as 0 fits clip to content
    uiclip (maxf $gameui_panel_overlay_w 0.00001) (maxf $gameui_panel_overlay_h 0.00001) 0 0 [
        uitarget $gameui_panel_overlay_w $gameui_panel_overlay_h [
            uihover [
                _close_overlay = 0
            ]

            uiescrelease [
                gameui_overlay_close
            ]
        ]

        local _overlay_anim_smooth
        _overlay_anim_smooth   = (-f 1 (*f (-f 1 $gameui_panel_overlay_anim) (-f 1 $gameui_panel_overlay_anim)))
        gameui_panel_overlay_w = (lerpf 0 $uiclipvirtw $_overlay_anim_smooth)
        gameui_panel_overlay_h = (lerpf 0 $uiclipvirth $_overlay_anim_smooth)

        gameui_panel_overlay_content_var

        uipropagate [uicolourblend $gameui_panel_overlay_anim]
    ]

    // Reset hover ID when not hovering
    if (! (& $gameui_hovering 1)) [
        gameui_hover_id = -1
    ]

    if (! (& $gameui_hovering 2)) [
        gameui_hover_sound_id = -1
    ]

    gameui_panel_overlay_anim = (animstep $gameui_panel_overlay_anim $gameui_panel_overlay_anim_time 1)
]

newui "main" $SURFACE_FOREGROUND [
    uimenu 1
    uiallowinput 1

    uiescrelease [
        // Escape key handler

        if (gameui_has_panel_overlay) [
            gameui_overlay_close
        ] [
            gameui_close 1
        ]
    ]

    ui_gameui_panel
] [
    // Call the default handler when opening the UI, to initialize the default panel
    if (&& [! (gameui_has_panel)] [!=s $gameui_panel_default []]) [
        $gameui_panel_default
    ]

    // If no panel is open, close the UI
    if (gameui_has_panel) [] [
        hideui "main"
    ]
] [
    // Reset the state when the UI was closed externally
    gameui_close_all
]

newui "main_overlay" $SURFACE_FOREGROUND [
    uimenu 1
    uiallowinput 1

    ui_menu_current = "main_overlay"
    ui_menu_close_main_overlay = 0

    do [ uisetpos @gameui_panel_overlay_pos ]
    uizindex 1

    ui_gameui_panel_overlay

    ui_menu_current = ""
] [] [
    gameui_overlay_close

    if (gameui_has_panel_overlay) [] [
        hideui "main_overlay"
    ]
]

gameui_leave_game = [
    gameui_close_all
]
onevent $CMD_EVENT_GAME_LEAVE gameui_leave_game
