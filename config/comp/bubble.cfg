shader $SHADER_DEFAULT "compositebubble" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform vec4 curmillis;
    uniform vec3 params; // xrot yrot iters
    varying vec2 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    mat2 mm2(float a)
    {
        float c = cos(a), s = sin(a);
        return mat2(c, -s, s, c);
    }

    float noise(vec3 p)
    {
        vec3 pi = floor(p);
        vec3 pf = p - pi;
        vec3 pfmin1 = pf - 1.0;
        pi.xyz = pi.xyz - floor(pi.xyz * (1.0 / 69.0)) * 69.0;
        vec3 piinc1 = step(pi, vec3(69.0 - 1.5)) * (pi + 1.0);
        vec4 pt = vec4(pi.xy, piinc1.xy) + vec2(50.0, 161.0).xyxy;
        pt *= pt;
        pt = pt.xzxz * pt.yyww;
        vec2 hashmod = vec2(1.0 / (635.298681 + vec2(pi.z, piinc1.z) * 48.500388));
        vec4 hashlowz = fract(pt * hashmod.xxxx);
        vec4 hashhighz = fract(pt * hashmod.yyyy);
        vec3 blend = pf * pf * pf * (pf * (pf * 6.0 - 15.0) + 10.0);
        vec4 res0 = mix(hashlowz, hashhighz, blend.z);
        vec4 blend2 = vec4(blend.xy, vec2(1.0 - blend.xy));
        return dot(res0, blend2.zxzx * blend2.wwyy);
    }

    mat3 m3 = mat3(0.00, 0.80, 0.60, -0.80, 0.36, -0.48, -0.60, -0.48, 0.64);

    float flow(vec3 p, float t)
    {
        float z = 2.0, rz = 0.0;
        vec3 bp = p;

        for(float i = 1.0; i < params.z; i++)
        {
            p += curmillis.x * 0.1;
            rz += (sin(noise(p + t * 0.8) * 6.0) * 0.5 + 0.5) / z;
            p = mix(bp, p, 0.6);
            z *= 2.0;
            p *= 2.01;
            p *= m3;
        }

        return rz;
    }

    vec2 dosphere(vec3 ro, vec3 rd)
    {
        vec3 oc = ro;
        float b = dot(oc, rd), c = dot(oc, oc) - 1.0, h = b * b - c;

        if(h < 0.0) return vec2(-1.0);

        return vec2((-b - sqrt(h)), (-b + sqrt(h)));
    }

    void main(void)
    {
        vec2 co = texcoord0 * 2.0 - 1.0;
        vec3 ro = vec3(0.0, 0.0, 5.0), rd = normalize(vec3(co * 0.7, -1.5));
        mat2 mx = mm2(curmillis.x * params.x), my = mm2(curmillis.x * params.y);

        ro.xz *= mx;
        rd.xz *= mx;
        ro.xy *= my;
        rd.xy *= my;

        float outcol = 0.0;
        vec2 sph = dosphere(ro, rd);

        if(sph.x <= 0.0) discard;

        vec3 pos = ro + rd * sph.x, pos2 = ro + rd * sph.y, rf = reflect(rd, pos), rf2 = reflect(rd, pos2);
        float nz = -log(abs(flow(rf * 1.2, curmillis.x) - 0.01)), nz2 = -log(abs(flow(rf2 * 1.2, -curmillis.x) - 0.01));
        fragcolor.rg = vec2(nz * nz, nz2 * nz2) * colorscale.ra;
    }
] 1

newui bubble $SURFACE_COMPOSITE [
    @(localargs params [0.5 0.5 5.0])
    execid uiarg1
    uivlist 0 [
        loop i 2 [
            uihlist 0 [
                loop j 2 [
                    uirender compositebubble 0.5 0.5 [
                        uirenderparam params (*f $params1 $i) (*f $params2 $j) $params3
                    ]
                ]
            ]
        ]
    ]
]
