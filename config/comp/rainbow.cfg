shader $SHADER_DEFAULT compositerainbow [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2D tex0, tex1;
    uniform vec4 params;    // base multiplier size speed
    uniform vec4 curmillis;
    varying vec2 texcoord0;
    uniform vec4 texsize0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    vec3 getcolor(vec2 coord, float delta)
    {
        return vec3(params.x + params.y * cos((params.z * (coord.y + delta * params.w)) + vec3(0, 23, 21)));
    }

    void main(void)
    {
        vec4 diffuse = texture2D(tex0, texcoord0), mask = texture2D(tex1, texcoord0);
        fragcolor = vec4(mix(getcolor(texcoord0, curmillis.x), diffuse.rgb, mask.a), diffuse.a) * colorscale;
    }
]

newui rainbow $SURFACE_COMPOSITE [
    @(localargs params [0.5 0.5 5.0 -1.0])
    @(localargs tex ["textures/icon" "textures/icon"])
    execid uiarg1
    uirender compositerainbow 1 1 [
        uirenderparam params $params1 $params2 $params3 $params4
        uirendertex $tex1
        uirendertex $tex2
    ]
]
