compositeburn = [
    shader $SHADER_DEFAULT $arg1 [
        attribute vec4 vvertex, vcolor;
        attribute vec2 vtexcoord0;
        uniform mat4 hudmatrix;
        varying vec2 texcoord0;
        varying vec4 colorscale;

        void main(void)
        {
            gl_Position = hudmatrix * vvertex;
            texcoord0 = vtexcoord0;
            colorscale = vcolor;
        }
    ] [
        uniform vec4 curmillis;
        uniform vec4 params; // rotation length iters speed
        varying vec2 texcoord0;
        varying vec4 colorscale;

        fragdata(0) vec4 fragcolor;

        float noise(vec3 p)
        {
            vec3 pi = floor(p);
            vec3 pf = p - pi;
            vec3 pfmin1 = pf - 1.0;
            pi.xyz = pi.xyz - floor(pi.xyz * (1.0 / 69.0)) * 69.0;
            vec3 piinc1 = step(pi, vec3(69.0 - 1.5)) * (pi + 1.0);
            vec4 pt = vec4(pi.xy, piinc1.xy) + vec2(50.0, 161.0).xyxy;
            pt *= pt;
            pt = pt.xzxz * pt.yyww;
            vec2 hashmod = vec2(1.0 / (635.298681 + vec2(pi.z, piinc1.z) * 48.500388));
            vec4 hashlowz = fract(pt * hashmod.xxxx);
            vec4 hashhighz = fract(pt * hashmod.yyyy);
            vec3 blend = pf * pf * pf * (pf * (pf * 6.0 - 15.0) + 10.0);
            vec4 res0 = mix(hashlowz, hashhighz, blend.z);
            vec4 blend2 = vec4(blend.xy, vec2(1.0 - blend.xy));
            return dot(res0, blend2.zxzx * blend2.wwyy);
        }

        float fnoise(vec3 p, float time)
        {
            float f = 0.0;
            p = p + vec3(0.0, 1.0, 0.0) * 0.5 * time;
            p = p * 3.0;
            f += 0.50000 * noise(p); p = 2.0 * p;
            f += 0.25000 * noise(p); p = 2.0 * p;
            f += 0.12500 * noise(p); p = 2.0 * p;
            f += 0.06250 * noise(p); p = 2.0 * p;
            f += 0.03125 * noise(p);
            return f;
        }

        float model(vec3 p)
        {
            vec3 q = p;
            q.y -= 0.1;
            float sphere = length(q) - params.y;
            float res = sphere + fnoise(q * 1.5, curmillis.x * params.w) * 0.4;
            return res * 0.8;
        }

        float raymarch(vec3 ro, vec3 rd)
        {
            float dist = 0.;
            for(int i = 0; i < params.z; i++)
            {
                float m = model(ro + rd * dist);
                dist += m;

                if(m < 0.01) return dist;
                else if(dist > 2.0) break;
            }
            return -1.0;
        }

        float saturation(float bri, float adjustment)
        {
            vec3 brightness = vec3(bri);
            vec3 intensity = vec3(dot(brightness, vec3(0.75)));
            vec3 mixer = mix(intensity, brightness, adjustment);
            return mixer.r;
        }

        vec2 volume(vec3 p, vec3 rd, vec3 ld, vec2 sp)
        {
            vec3 op = p;
            float trans = 1.0;
            float td = 0.0;
            float dif = 0.0;
            float emit = 0.0;
            for(int i = 0; i < params.z; i++)
            {
                float m = model(p);
                p += rd * 0.03;

                float dens = 1.0 - smoothstep(0.0, 0.35, -m);
                td += dens;
                trans *= dens;

                if(td > 1.0 && dif <= 0.0)
                {
                    td = 1.0;
                    dif = clamp(1.0 - model(p - 0.1 * ld), 0.0, 1.0);
                    emit = pow(smoothstep(-0.3, 0.0, model(p)), 4.0);
                }
            }
            trans = smoothstep(0.0, 1.0, 1.0 - pow(td / params.z, 4.5));

            float sat = clamp(saturation(((emit * trans) * 0.8 + 0.2) * 0.2, pow(trans, 0.5) * 0.4) * 5.0 - 0.4, 0.0, 1.0);
            @(if (>= (strstr $arg1 "fire") 0) [result [
                return vec2(mix(0.0, sat, trans), clamp(fnoise(p + trans + sat, curmillis.x) * 3.0 - 1.0, 0.0, 1.0) * trans);
            ]] [result [
                return vec2(mix(0.0, sat, trans), trans);
            ]])
        }

        void main(void)
        {
            vec2 co = texcoord0 * 2.0 - 1.0;
            vec3 ta = vec3(0.0, 0.1, 0.0);
            vec3 ro = vec3(cos(params.x), 1.0, sin(params.x));
            vec3 w = normalize(ta - ro);
            vec3 u = normalize(cross(w, vec3(0., 1.0, 0.0)));
            vec3 v = normalize(cross(u, w));
            vec3 rd = normalize(mat3(u, v, w) * vec3(co.xy, 1.0));
            float dist = raymarch(ro, rd);
            if(dist <= 0.0) discard;
            fragcolor.rg = volume(ro + rd * dist, rd, vec3(-1.0, 1.0, 0.0), co) * colorscale.ra;
        }
    ]
]

compositeburn "compositeburnfire"
compositeburn "compositeburnsmoke"

newui fire $SURFACE_COMPOSITE [
    @(localargs params [0.0 1.0 6.0 2.0])
    execid uiarg1
    uivlist 0 [
        @(localdef k 0)
        loop i 2 [
            uihlist 0 [
                loop j 2 [
                    uirender compositeburnfire 0.5 0.5 [
                        uirenderparam params (+f $params1 (*f $k 45)) $params2 $params3 $params4
                    ]
                    k = (+ $k 1)
                ]
            ]
        ]
    ]
]

newui smoke $SURFACE_COMPOSITE [
    @(localargs params [0.0 1.0 4.0 1.0])
    execid uiarg1
    uivlist 0 [
        @(localdef k 0)
        loop i 2 [
            uihlist 0 [
                loop j 2 [
                    uirender compositeburnsmoke 0.5 0.5 [
                        uirenderparam params (+f $params1 (*f $k 45)) $params2 $params3 $params4
                        uicolourblend 0.5
                    ]
                    k = (+ $k 1)
                ]
            ]
        ]
    ]
]
