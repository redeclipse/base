shader $SHADER_DEFAULT compositecathode [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2D tex0;
    uniform vec4 params;    // density opacity noise flicker
    uniform vec4 bgcol;     // r g b a (alpha is threshold mix)
    uniform vec2 feather;   // xoff yoff
    uniform vec4 curmillis;
    varying vec2 texcoord0;
    uniform vec4 texsize0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    float random(vec2 st)
    {
        return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);
    }

    float blend(float x, float y)
    {
        return (x < 0.5) ? (2.0 * x * y) : (1.0 - 2.0 * (1.0 - x) * (1.0 - y));
    }

    vec3 blend(vec3 x, vec3 y, float opacity)
    {
        vec3 z = vec3(blend(x.r, y.r), blend(x.g, y.g), blend(x.b, y.b));
        return z * opacity + x * (1.0 - opacity);
    }

    void main(void)
    {
        vec4 diffuse = texture2D(tex0, texcoord0);
        if(bgcol.a > 0)
        {
            if(diffuse.a < bgcol.a) diffuse.rgb = mix(bgcol.rgb, diffuse.rgb, smoothstep(0.0, bgcol.a, diffuse.a));
            diffuse.a = 1.0;
        }

        float count = texsize0.y * params.x;
        vec2 sl = vec2(sin(texcoord0.y * count), cos(texcoord0.y * count));
        vec3 scanlines = vec3(sl.x, sl.y, sl.x);

        diffuse.rgb += diffuse.rgb * scanlines * params.y;
        diffuse.rgb += diffuse.rgb * vec3(random(texcoord0 * curmillis.x)) * params.z;
        diffuse.rgb += diffuse.rgb * sin(110.0 * curmillis.x) * params.w;

        if(feather.x > 0)
        {
            float offset = texcoord0.x < feather.x ? texcoord0.x : 1.0 - texcoord0.x;
            if(offset < feather.x) diffuse.a *= offset / feather.x;
        }
        if(feather.y > 0)
        {
            float offset = texcoord0.y < feather.y ? texcoord0.y : 1.0 - texcoord0.y;
            if(offset < feather.y) diffuse.a *= offset / feather.y;
        }
        fragcolor = diffuse * colorscale;
    }
]

newui cathode $SURFACE_COMPOSITE [
    @(localargs params [1.0 0.3 0.2 0.1])
    @(localargs bgcol [0.0 0.0 0.0 0.0])
    @(localargs feather [0.0 0.0])
    @(localdef tex "textures/icon")
    execid uiarg1
    uirender compositecathode 1 1 [
        uirenderparam params $params1 $params2 $params3 $params4
        uirenderparam bgcol $bgcol1 $bgcol2 $bgcol3 $bgcol4
        uirenderparam feather $feather1 $feather2
        uirendertex $tex
    ]
]
