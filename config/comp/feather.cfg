shader $SHADER_DEFAULT compositefeather [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2D tex0;
    uniform vec2 params;   // xoff yoff
    varying vec2 texcoord0;
    uniform vec4 texsize0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    float random(vec2 st)
    {
        return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);
    }

    float blend(float x, float y)
    {
        return (x < 0.5) ? (2.0 * x * y) : (1.0 - 2.0 * (1.0 - x) * (1.0 - y));
    }

    vec3 blend(vec3 x, vec3 y, float opacity)
    {
        vec3 z = vec3(blend(x.r, y.r), blend(x.g, y.g), blend(x.b, y.b));
        return z * opacity + x * (1.0 - opacity);
    }

    void main(void)
    {
        vec4 diffuse = texture2D(tex0, texcoord0);

        if(params.x > 0)
        {
            float offset = texcoord0.x < params.x ? texcoord0.x : 1.0 - texcoord0.x;
            if(offset < params.x) diffuse.a *= offset / params.x;
        }
        if(params.y > 0)
        {
            float offset = texcoord0.y < params.y ? texcoord0.y : 1.0 - texcoord0.y;
            if(offset < params.y) diffuse.a *= offset / params.y;
        }

        fragcolor = diffuse * colorscale;
    }
]

newui feather $SURFACE_COMPOSITE [
    @(localargs params [0.1 0.0])
    @(localdef tex "textures/icon")
    execid uiarg1
    uirender compositefeather 1 1 [
        uirenderparam params $params1 $params2
        uirendertex $tex
    ]
]
