newui "blank" $SURFACE_COMPOSITE [
    uicolour 0xFFFFFFFF 1.0 1.0
]

shader $SHADER_DEFAULT "loading" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2D tex0;
    uniform vec4 curticks;
    uniform vec4 params; // rotation length iters speed
    varying vec2 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    const float PI = 3.1415926535;

    bool belongs(float time, vec2 uv, float near, float far, float sections)
    {
        near += sin(uv.x - time * 8.0) / 50.0;
        far += cos(uv.y - time * 8.0) / 50.0;
        vec2 center = vec2(0.5, 0.5);
        vec2 xy = uv - center;
        float dist = distance(xy, vec2(0.0, 0.0));
        float angle = mod(atan(xy.y, xy.x) + time * 2.5 + sin(time * 4.0) / 1.0, PI * 2.0);
        float oddity = mod(angle / (2.0 * PI) * sections * 2.0, 2.0);
        if(dist > near && dist < far && floor(mod(oddity, 2.0)) == 0.0) return true;
        return false;
    }

    void main()
    {
        if(belongs(curticks.x, texcoord0, 0.2, 0.25, 3.0) || belongs(curticks.x + 0.5, texcoord0, 0.3, 0.35, 4.0) || belongs(curticks.x + 1.0, texcoord0, 0.4, 0.45, 5.0))
            fragcolor.rg = vec2(1.0) * colorscale.ra;
        else discard;
    }
] 1

newui "loading" $SURFACE_COMPOSITE [ uirender "loading" 1 1 ]

shader $SHADER_DEFAULT "targeting" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2D tex0;
    uniform vec4 curticks;
    uniform vec4 params; // rotation length iters speed
    varying vec2 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    const float PI = 3.1415926535;

    bool belongs(float time, vec2 uv, float near, float far)
    {
        near += sin(uv.x - time * 8.0) / 50.0;
        far += cos(uv.y - time * 8.0) / 50.0;
        vec2 center = vec2(0.5, 0.5);
        vec2 xy = uv - center;
        float dist = distance(xy, vec2(0.0, 0.0));
        float angle = mod(atan(xy.y, xy.x) - time * 2.5 - sin(time * 4.0) / 1.0, PI * 2.0);
        float oddity = mod(angle / (2.0 * PI) * 5.0 * 2.0, 2.0);
        if(dist > near && dist < far && floor(mod(oddity, 2.0)) == 0.0) return true;
        return false;
    }

    void main()
    {
        if(belongs(curticks.x, texcoord0, 0.425, 0.475)) fragcolor.rg = vec2(1.0) * colorscale.ra;
        else discard;
    }
] 1

newui "targeting" $SURFACE_COMPOSITE [ uirender "targeting" 1 1 ]

shader $SHADER_DEFAULT "blur" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2D tex0;
    uniform float blurradius;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    void main()
    {
        vec4 diffuse = texture2D(tex0, texcoord0);

        if(blurradius > 0.0)
        {
            diffuse += texture2D(tex0, texcoord0 + vec2(0.0,            -blurradius));
            diffuse += texture2D(tex0, texcoord0 + vec2(-blurradius,    0.0));

            diffuse += texture2D(tex0, texcoord0 + vec2(0.0,            blurradius));
            diffuse += texture2D(tex0, texcoord0 + vec2(blurradius,     0.0));

            diffuse += texture2D(tex0, texcoord0 + vec2(-blurradius,    -blurradius));
            diffuse += texture2D(tex0, texcoord0 + vec2(blurradius,     blurradius));

            diffuse += texture2D(tex0, texcoord0 + vec2(-blurradius,    blurradius));
            diffuse += texture2D(tex0, texcoord0 + vec2(blurradius,     -blurradius));

            diffuse *= 0.11111112;
        }

        fragcolor = diffuse;
    }
]

newui "blur" $SURFACE_COMPOSITE [
    @(localdef tex "<grey>textures/notexture")
    @(localdef blur 0.0075)

    execid uiarg1

    uirender "blur" 1 1 [
        uirenderparam blurradius $blur
        uirendertex $tex
    ]
]

newui "combine" $SURFACE_COMPOSITE [
    @(localdef texs [])
    @(localdef colours [])

    execid uiarg1

    local _len _factor _tex _colours

    _len = (listlen $texs)
    _colours = (listlen $colours)

    while (> $_len $_colours) [
        append $colours 0xFFFFFF
        _colours = (+ $_colours 1)
    ]

    if $_len [
        _factor = (divf 1.0 $_len)

        looplistn _tex _idx texs [
            uiimage $_tex (at $colours $_idx) 0 1.0 1.0 [ uicolourblend $_factor ]
        ]
    ]
]
