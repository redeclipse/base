game_announcer_current = -1

game_announcer_queue = []

game_announcer_lines = []

game_announcer_last_line       = []
game_announcer_last_line_time  = 0
game_announcer_last_line_refid = -1

// 1:<id> 2:<priority> 3:<sound file>
game_announcer_defline = [
    local _new_line
    _new_line = []

    append _new_line $arg1
    append _new_line $arg2
    append _new_line $arg3

    append game_announcer_lines [[@@_new_line]]
]

GAME_ANNOUNCER_EVENT_HUD_AFFINITY = 0
GAME_ANNOUNCER_EVENT_GAME         = 1
GAME_ANNOUNCER_EVENT_GLOBAL       = 2

game_announcer_bind_vars = (getalias game_announcer_bind_vars)

// Clear binds
game_announcer_clear_binds = [
    looplist _binds $game_announcer_bind_vars [
        $_binds = []
    ]
]
game_announcer_clear_binds

// 1:<type> 1:<event>
game_announcer_get_event_binds_var = [
    local _category

    case $arg1 $GAME_ANNOUNCER_EVENT_HUD_AFFINITY [
        _category = "hud_affinity"
    ] $GAME_ANNOUNCER_EVENT_GAME [
        _category = (at $arg2 0)
    ] $GAME_ANNOUNCER_EVENT_GLOBAL [
        _category = "global"
    ]

    concatword "game_announcer_event_" $_category "_binds"
]

// 1:<type> 2:<event> 3:<bind>
game_announcer_bind_match = [
    case $arg1 $GAME_ANNOUNCER_EVENT_HUD_AFFINITY [
        = (at $arg3 1) $arg2
    ] $GAME_ANNOUNCER_EVENT_GAME [
        =s (at $arg3 1) $arg2
    ] $GAME_ANNOUNCER_EVENT_GLOBAL [
        = (at $arg3 1) $arg2
    ]
]

// 1:<type> 2:<event> 3:<ref id>
game_announcer_bind_handler = [
    local _binds _bind _bind_cond
    _binds = (game_announcer_get_event_binds_var $arg1 $arg2)

    looplist _bind (getalias $_binds) [
        if (game_announcer_bind_match $arg1 $arg2 $_bind) [
            _bind_cond = (at $_bind 2)

            if (|| [=s $_bind_cond []] [_bind_cond]) [
                game_announcer_push (at $_bind 0) $arg3
            ]
        ]
    ]
]

// 1:<event id> 2:<event type> 3:<event action>
game_announcer_bind_game_event_handler = [
    game_announcer_bind_handler $GAME_ANNOUNCER_EVENT_GAME [@arg2 @arg3] $event_affinity
]
event_register_handler game_announcer_bind_game_event_handler

// 1:<event id>
game_announcer_bind_global_event_handler = [
    game_announcer_bind_handler $GAME_ANNOUNCER_EVENT_GLOBAL [@arg1]
]
onevent -1 game_announcer_bind_global_event_handler

// 1:<line> 2:<type> 3:<event> 4:<cond>
game_announcer_bind = [
    local _binds _new_bind
    _binds = (game_announcer_get_event_binds_var $arg2 $arg3)

    _new_bind = []
    append _new_bind $arg1
    append _new_bind [[@@arg3]]
    append _new_bind [[@@arg4]]

    if (! (identexists $_binds)) [
        $_binds = []
        append game_announcer_bind_vars $_binds
    ]

    append $_binds [[@@_new_bind]]
]

exec "config/announcer/defs.cfg"

// 1:<variant>
game_announcer_loadlines = [
    local _path

    looplist i $game_announcer_lines [
        _path = (format "sounds/announcer/%1/%2" $arg1 (at $i 2))
        loadsound (at $i 0) $_path 1.0 1 1 -1 -1 1 1
    ]
]

game_announcer_variant_names = [
    "male"
    "female"
]

game_announcer_variant_prettynames = [
    "Male"
    "Female"
]

game_announcer_init = [
    game_announcer_loadlines (at $game_announcer_variant_names (getvar game_announcer_variant))
]

defvarp  game_announcer_env     0   0 1 game_announcer_init
defvarp  game_announcer_variant 0   0 1 game_announcer_init
deffvarp game_announcer_volume  0 0.5 1
game_announcer_init

// 1:<ref id>
game_announcer_find_queued = [
    local _elem _result
    _result = -1

    loopwhile i (listlen $game_announcer_queue) [< $_result 0] [
        _elem = (at $game_announcer_queue $i)

        if (= (at $_elem 1) $arg1) [
            _result = $i
        ]
    ]

    result $_result
]

game_announcer_line_finished = [
    // Wait until next frame to avoid playing again mid-state-change of the sound source
    sleep 1 [game_announcer_play_next]
]

game_announcer_play_next = [
    if (!=s $game_announcer_queue []) [
        local _elem _sound_idx
        _elem                = (at $game_announcer_queue 0)
        _sound_idx           = (soundslot (at $_elem 0))
        game_announcer_queue = (sublist $game_announcer_queue 1)

        game_announcer_current = (announce $_sound_idx (! $game_announcer_env) (| $SND_UNMAPPED $SND_DUCKING) $game_announcer_volume)
        soundcshook $game_announcer_current game_announcer_line_finished

        game_announcer_last_line       = $_elem
        game_announcer_last_line_time  = $totalmillis
        game_announcer_last_line_refid = (at $_elem 1)
    ] [
        game_announcer_current = -1
    ]
]

// Prevents the same line from being played again within a short time
// 1:<line> 2:<ref id>
game_announcer_repetetive = [
    && [
        !=s $game_announcer_last_line []
    ] [
        =s (at $game_announcer_last_line 0) $arg1
    ] [
        < (- $totalmillis $game_announcer_last_line_time) 10000
    ] [
        = $game_announcer_last_line_refid $arg2
    ] [
        !=s $game_announcer_last_line_refid []
    ]
]

// 1:<line> 2:<ref id>
game_announcer_push = [
    local _new_elem _replace_idx
    _replace_idx = -1

    if (!=s $arg2 []) [
        _replace_idx = (game_announcer_find_queued $arg2)
        _new_elem = [[@@arg1 @@arg2]]
    ] [
        _new_elem = [[@@arg1]]
    ]

    if (> $_replace_idx -1) [
        game_announcer_queue = (listsplice $game_announcer_queue $_new_elem $_replace_idx 1)
    ] [
        if (! (game_announcer_repetetive $arg1 $arg2)) [
            append game_announcer_queue [@@_new_elem]
        ]
    ]

    if (< $game_announcer_current 0) [
        game_announcer_play_next
    ]
]

// Returns whether announcer should currently be neutral
game_announcer_neutral = [
    || $isspectator $game_announcer_env
]

// Plays random line
game_announcer_test = [
    if (>f $game_announcer_volume 0) [
        soundbyname S_ANNCR_ENEMYHASBOMB (*f $game_announcer_volume 255) $SND_DUCKING
    ]
]
