// Shaders to preload on startup. Engine doesn't update UI (meaning
// no shaders are in use) while loading from this file.

shader 0 "null" [
    attribute vec4 vvertex;
    void main(void)
    {
        gl_Position = vvertex;
    }
] [
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        fragcolor = vec4(1.0, 0.0, 1.0, 1.0);
    }
]

shader 0 "hud" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2D tex0;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        vec4 color = texture2D(tex0, texcoord0);
        fragcolor = colorscale * color;
    }
]

shader 0 "hudtext" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2D tex0;
    uniform vec4 textparams;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        vec4 color = texture2D(tex0, texcoord0);
        fragcolor = colorscale * color;
    }
]

shader 0 "hudnotexture" [
    attribute vec4 vvertex, vcolor;
    uniform mat4 hudmatrix;
    varying vec4 color;
    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        color = vcolor;
    }
] [
    varying vec4 color;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        fragcolor = color;
    }
]

// uses [(-1, -1), (1, 1)] coordinates
shader 0 "hudbackground" [
    uniform mat4 hudmatrix;
    attribute vec4 vvertex;
    varying vec2 pos;
    void main() {
        gl_Position = hudmatrix * vvertex;
        pos = vvertex.xy;
    }
] [
    const vec2 center = vec2(0.0, 1.5);
    // distance from center to the most distant corner of the screen
    const float maxdist = 2.69258; // = distance(center, vec2(-1, -1))
    const float waterweight = 1.2;
    const float caustweight = 0.9;
    const float cloudweight = 0.5;

    const float totalweight = caustweight + waterweight + cloudweight;
    const float caustw = caustweight / totalweight;
    const float waterw = waterweight / totalweight;
    const float cloudw = cloudweight / totalweight;

    uniform float time;
    uniform vec3 colour;
    uniform vec4 scale;
    uniform vec4 blend;
    uniform vec4 speed;
    uniform sampler2D tex0; // water
    uniform sampler2D tex1; // caustic
    uniform sampler2D tex2; // cloud
    uniform sampler2D tex3; // aura
    uniform sampler2D tex4; // haze
    uniform sampler2D tex5; // glimmer

    varying vec2 pos;

    fragdata(0) vec4 fragcolor;

    void main() {
        vec2 dir = pos - center;
        float dist = length(dir);
        dir /= dist;
        float k = log(dist) / log(maxdist);
        float angle = (dot(dir, vec2(1.0, 0.0)) + 1.0) / 2.0;
        vec2 uv = vec2(angle, time / 200.0);
        vec3 fg = colour * clamp(waterw * -log(-log(texture2D(tex0, uv / 3.0).r)) + caustw * texture2D(tex1, uv).r, 0.0, 1.0);
        vec3 bg = cloudw * texture2D(tex2, (pos + 1.0) / 2.0).r * colour;
        vec2 guv0 = vec2(pos.x, pos.y - time * speed.x);
        vec2 guv1 = vec2(pos.x, pos.y - time * speed.z);
        vec2 guv2 = vec2(pos.x, pos.y - time * speed.y);
        vec2 guv3 = vec2(pos.x + 0.3, pos.y - time * speed.w);
        float gpf = (1.0 - mod((1.0 + pos.y) / 2.0, 1.0)) * k;
        vec4 glim = texture2D(tex3, guv0).r * vec4(colour, gpf) * scale.x;
        glim += texture2D(tex5, guv1).r * vec4(colour, gpf) * scale.z;
        glim += texture2D(tex4, guv2).r * vec4(colour, gpf) * scale.y;
        glim += texture2D(tex5, guv3).r * vec4(colour, gpf) * scale.w;
        fragcolor = vec4(mix(fg, mix(bg, glim.rgb, glim.a), k), 1.0);
    }
]
