// Shaders that must be loaded before the engine can render any basic UI.

shader $SHADER_DEFAULT "null" [
    attribute vec4 vvertex;

    void main(void)
    {
        gl_Position = vvertex;
    }
] [
    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        fragcolor = vec4(1.0, 0.0, 1.0, 1.0);
    }
]

shader $SHADER_DEFAULT "hud" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2D tex0;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        vec4 diffuse = texture2D(tex0, texcoord0), color = diffuse * colorscale;
        if(color.a <= 0.0) discard;
        fragcolor = color;
    }
]

shader $SHADER_DEFAULT "hudrect" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2DRect tex0;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        vec4 color = colorscale * texture2DRect(tex0, texcoord0);
        if(color.a <= 0.0) discard;
        fragcolor = color;
    }
]

shader $SHADER_DEFAULT "hudoutline" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2D tex0;
    uniform vec4 textparams;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        vec4 color = texture2D(tex0, texcoord0);
        float dist = color.r * color.a;
        float border = smoothstep(textparams.x, textparams.y, dist);
        float outline = smoothstep(textparams.z, textparams.w, dist);
        vec4 diffuse = vec4(colorscale.rgb * outline, colorscale.a * border);
        if(diffuse.a <= 0.0) discard;
        fragcolor = diffuse;
    }
]

shader $SHADER_DEFAULT "hudtext" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2D tex0;
    uniform vec4 textparams;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        float dist = texture2D(tex0, texcoord0).r;

        @(if $textsupersample [result [
            float width = fwidth(dist);
            vec2 delta = 0.354 * fwidth(texcoord0);
            vec4 square = vec4(texcoord0 - delta, texcoord0 + delta);

            float dist1 = texture2D(tex0, square.xy).r, dist2 = texture2D(tex0, square.zw).r;
            float dist3 = texture2D(tex0, square.xw).r, dist4 = texture2D(tex0, square.zy).r;

            float border = smoothstep(textparams.x - width, textparams.y + width, dist);
            border += smoothstep(textparams.x - width, textparams.y + width, dist1);
            border += smoothstep(textparams.x - width, textparams.y + width, dist2);
            border += smoothstep(textparams.x - width, textparams.y + width, dist3);
            border += smoothstep(textparams.x - width, textparams.y + width, dist4);
            border *= 0.25;

            float outline = smoothstep(textparams.z - width, textparams.w + width, dist);
            outline += smoothstep(textparams.z - width, textparams.w + width, dist1);
            outline += smoothstep(textparams.z - width, textparams.w + width, dist2);
            outline += smoothstep(textparams.z - width, textparams.w + width, dist3);
            outline += smoothstep(textparams.z - width, textparams.w + width, dist4);
            outline *= 0.25;
        ]] [result [
            float border = smoothstep(textparams.x, textparams.y, dist);
            float outline = smoothstep(textparams.z, textparams.w, dist);
        ]])

        vec4 diffuse = vec4(colorscale.rgb * outline, colorscale.a * border);
        if(diffuse.a <= 0.0) discard;

        fragcolor = diffuse;
    }
]

shader $SHADER_DEFAULT "hudnotexture" [
    attribute vec4 vvertex, vcolor;
    uniform mat4 hudmatrix;
    varying vec4 color;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        color = vcolor;
    }
] [
    varying vec4 color;

    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        if(color.a <= 0.0) discard;
        fragcolor = color;
    }
]

shader $SHADER_DEFAULT "hudminimap" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 screenpos;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        screenpos = (hudmatrix * vvertex).xy;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform float millis;
    uniform sampler2D tex0;
    uniform vec4 minimapparams;
    varying vec2 screenpos;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    uint hash(uint x)
    {
        x += (x << 10u);
        x ^= (x >>  6u);
        x += (x <<  3u);
        x ^= (x >> 11u);
        x += (x << 15u);

        return x;
    }

    float hash(float x) { return uintBitsToFloat(hash(floatBitsToUint(x))); }

    void main(void)
    {
        vec4 diffuse = texture2D(tex0, texcoord0), color = diffuse * colorscale;
        vec2 texel = vec2(1.0 / minimapparams.x);

        vec4 s1 = texture2D(tex0, (texcoord0 + vec2(   0,  0.5) * texel));
        vec4 s2 = texture2D(tex0, (texcoord0 + vec2( 0.5,    0) * texel));
        vec4 s3 = texture2D(tex0, (texcoord0 + vec2(   0, -0.5) * texel));
        vec4 s4 = texture2D(tex0, (texcoord0 + vec2(-0.5,    0) * texel));

        vec4 dy = (s1 - s3) * 0.5;
        vec4 dx = (s2 - s4) * 0.5;

        float noise = clamp(hash(screenpos.x + screenpos.y + (int(millis*10)&255)), 0.5, 1.0);
        float edge = dot((sqrt(dx*dx + dy*dy) * 10.0).rgb, vec3(0.333));

        color.rgb += min(edge, 0.5) * noise;

        // CRT scan effect
        // screenpos is in -1 to 1 range
        float scanlineIntensity = 0.0;
        scanlineIntensity += abs(fract(screenpos.y * 120.0) * 2.0 - 1.0);
        color.rgb *= 1.0 - (scanlineIntensity * 0.4);

        fragcolor = color;
    }
]

// uses [(-1, -1), (1, 1)] coordinates
shader $SHADER_DEFAULT "hudbackground" [
    uniform mat4 hudmatrix;
    attribute vec4 vvertex;
    attribute vec2 vtexcoord0;
    varying vec2 texcoord0;
    varying vec2 pos;

    void main()
    {
        gl_Position = hudmatrix * vvertex;
        pos = vvertex.xy;
        texcoord0 = vtexcoord0;
    }
] [
    uniform float time;
    uniform float aspect;

    uniform sampler2D tex0; // background image
    uniform sampler2D tex1; // water
    uniform sampler2D tex2; // caustics
    uniform sampler2D tex3; // mask

    varying vec2 pos;
    varying vec2 texcoord0;

    fragdata(0) vec4 fragcolor;

    void main()
    {
        vec4 mask = texture2D(tex3, texcoord0);

        mask.rgb *= mask.a;

        float nebulamask = mask.r * 0.4;

        float xspeed1 = sin((pos.x*10)+time*0.5)*0.05;
        float yspeed1 = cos((pos.y*10)+time*0.5)*0.05;

        float xspeed2 = sin((pos.x*10)+time*0.6)*0.05;
        float yspeed2 = cos((pos.y*10)+time*0.6)*0.05;

        vec2 guv0 = vec2((pos.x*0.75+nebulamask)-xspeed1, (pos.y*0.75+nebulamask)-yspeed1);
        vec2 guv1 = vec2((pos.x*0.5+nebulamask)-yspeed1, (pos.y*0.5+nebulamask)-xspeed1);
        vec2 guv2 = vec2((pos.x*0.5+nebulamask)-xspeed2, (pos.y*0.5+nebulamask)-yspeed2);
        vec2 guv3 = vec2(pos.x-time*0.08, pos.y+time*0.1);
        vec2 guv4 = vec2(pos.x-time*0.05, pos.y+time*0.05);

        vec4 bg = texture2D(tex0, texcoord0);
        vec4 nebula1 = texture2D(tex1, guv0);
        vec4 nebula2 = texture2D(tex1, guv1);
        vec4 nebula3 = texture2D(tex2, guv2);
        vec4 glimmer = texture2D(tex1, guv3);
        vec4 ring    = texture2D(tex2, guv4);

        // Base image
        vec4 col = bg;

        // Nebulae
        col.r *= mix(vec4(1, 1, 1, 1), (nebula1 + nebula2) * nebula3, 0.6 - (mask.r * 0.4)).r;

        // Star glimmer
        glimmer.r = smoothstep(0.5, 1.0, glimmer.r*1.3);
        float threshold = min(bg.g * (1 / 0.9), 1.0);
        float glimmer_mix = threshold * (1.0 - smoothstep(0.0, 0.5, mask.r));
        col *= mix(1.0, max(pow(glimmer.r, 1) * 3, 0.5), glimmer_mix);

        // Eclipse ring highlight
        col *= mix(1.0 , ring.r * 3.5, pow(mask.r, 5));

        fragcolor = col;
    }
]

