////////////////////////////////////////////////
//
// particle shaders
//
////////////////////////////////////////////////

// wobbles the vertices of an explosion sphere
// and generates all texcoords
// and blends the edge color
// and modulates the texture
explosionshader = [
    shader $SHADER_DEFAULT $arg1 [
        //:fog
        attribute vec4 vvertex, vcolor;
        uniform mat4 explosionmatrix;
        uniform vec3 center;
        uniform float millis;
        attribute vec2 vtexcoord0;
        uniform vec4 texgenS, texgenT;
        @(? (>= (strstr $arg1 "soft") 0) [
            uniform vec2 lineardepthscale;
            varying float lineardepth;
        ])
        varying vec4 color;
        varying vec2 texcoord0, texcoord1, texcoord2;
        void main(void)
        {
            vec4 wobble = vec4(vvertex.xyz*(1.0 + 0.5*abs(fract(dot(vvertex.xyz, center) + millis*2.0) - 0.5)), vvertex.w);
            gl_Position = explosionmatrix * wobble;
            @(? (>= (strstr $arg1 "soft") 0) [
                lineardepth = dot(lineardepthscale, gl_Position.zw);
            ])

            color = vcolor;

            texcoord0 = vtexcoord0;
            vec2 texgen = vec2(dot(texgenS, vvertex), dot(texgenT, vvertex));
            texcoord1 = texgen;
            texcoord2 = 0.5*texgen - millis*0.5;
        }
    ] [
        @(if (>= (strstr $arg1 "soft") 0) [result [
            @(gfetchdefs refractdepth)
            uniform vec3 softparams;
            varying float lineardepth;
        ]])
        varying vec4 color;
        varying vec2 texcoord0, texcoord1, texcoord2;
        uniform sampler2D tex0;
        uniform vec2 blendparams;
        fragdata(0) vec4 fragcolor;
        void main(void)
        {
            vec2 dtc = texcoord0 + texture2D(tex0, texcoord2).xy*0.1; // use color texture as noise to distort texcoords
            vec4 diffuse = texture2D(tex0, dtc);
            float blend = max(pow(clamp(1.0 - dot(texcoord1, texcoord1), 0.0, 1.0), blendparams.x), blendparams.y);
            diffuse *= blend*4.0; // dup alpha into RGB channels + intensify and over saturate
            diffuse.b += 0.5 - blend*0.5; // blue tint

            @(if (>= (strstr $arg1 "soft") 0) [result [
                fragcolor.rgb = diffuse.rgb * color.rgb;

                @(gdepthunpack depth [gfetch(refractdepth, gl_FragCoord.xy)])
                fragcolor.a = diffuse.a * max(clamp((depth - lineardepth)*softparams.x - softparams.y, 0.0, 1.0) * color.a, softparams.z);
            ]] [result [
                fragcolor = diffuse * color;
            ]])
        }
    ]
]

explosionshader "explosion"
explosionshader "explosionsoft"

shader $SHADER_DEFAULT "particlenotexture" [
    //:fog
    attribute vec4 vvertex, vcolor;
    uniform mat4 camprojmatrix;
    uniform vec4 colorscale;
    varying vec4 color;
    void main(void)
    {
        gl_Position = camprojmatrix * vvertex;
        color = vcolor * colorscale;
    }
] [
    varying vec4 color;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        fragcolor = color;
    }
]

shader $SHADER_DEFAULT "particletext" [
    //:fog
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 camprojmatrix;
    uniform float ldrscale;
    varying vec4 color;
    varying vec2 texcoord0;
    void main(void)
    {
        gl_Position = camprojmatrix * vvertex;
        texcoord0 = vtexcoord0;
        color = vec4(vcolor.rgb * ldrscale, vcolor.a);
    }
] [
    uniform vec4 textparams;
    uniform sampler2D tex0;
    varying vec4 color;
    varying vec2 texcoord0;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        float dist = texture2D(tex0, texcoord0).r;
        float border = smoothstep(textparams.x, textparams.y, dist);
        float outline = smoothstep(textparams.z, textparams.w, dist);
        fragcolor = vec4(color.rgb * outline, color.a * border);
    }
]

particleshader = [
    shader $SHADER_DEFAULT $arg1 [
        @(? (< (strstr $arg1 "haze") 0) [
            //:fog
        ])
        attribute vec4 vvertex, vcolor;
        attribute vec3 vhintcolor;
        attribute vec2 vtexcoord0, vhintblend;
        uniform mat4 camprojmatrix;
        uniform vec4 colorscale;
        varying vec4 color;
        varying vec3 hintcolor;
        varying vec2 texcoord0, hintblend;
        @(? (|| (>= (strstr $arg1 "soft") 0) (>= (strstr $arg1 "haze") 0)) [
            uniform vec2 lineardepthscale;
            varying float lineardepth;
        ])
        @(? (>= (strstr $arg1 "soft") 0) [
            varying vec2 surface;
        ])
        @(? (>= (strstr $arg1 "haze") 0) [
            uniform float millis;
            uniform vec4 hazetexgen;
            varying vec2 texcoord1, texcoord2, texcoord3;
        ])
        @(? (>= (strstr $arg1 "env") 0) [
            uniform vec3 camera;
            uniform mat3 envmatrix;
            varying vec3 texcoord4;
        ])
        void main(void)
        {
            gl_Position = camprojmatrix * vvertex;
            texcoord0 = vtexcoord0;
            color = vcolor * colorscale;

            @(? (>= (strstr $arg1 "env") 0) [
                texcoord4 = -normalize(camera - vvertex.xyz) * envmatrix;
            ])
            @(? (|| (>= (strstr $arg1 "soft") 0) (>= (strstr $arg1 "haze") 0)) [
                lineardepth = dot(lineardepthscale, gl_Position.zw);
            ])
            @(? (>= (strstr $arg1 "soft") 0) [
                surface = texcoord0.xy*2.82842712474619 - 1.4142135623731;
            ])
            @(? (>= (strstr $arg1 "haze") 0) [
                texcoord1 = (texcoord0 + hazetexgen.zw) * hazetexgen.xy;
                texcoord2 = texcoord1 * 0.18 + millis*vec2( 0.25,  0.75)*0.1250;
                texcoord3 = texcoord1 * 0.18 + millis*vec2(-0.75, -0.25)*0.1450;
            ])

            hintcolor = vhintcolor;
            hintblend = vhintblend;
        }
    ] [
        uniform sampler2D tex0;
        varying vec4 color;
        varying vec3 hintcolor;
        varying vec2 texcoord0, hintblend;
        @(if (|| (>= (strstr $arg1 "soft") 0) (>= (strstr $arg1 "haze") 0)) [result [
            @(if (>= (strstr $arg1 "ref") 0) [result [
                @(gfetchdefs [refractmask refractdepth])
            ]] [result [
                @(gfetchdefs refractdepth)
            ]])
            varying float lineardepth;
        ]])
        @(? (>= (strstr $arg1 "soft") 0) [
            uniform vec3 softparams;
            varying vec2 surface;
        ])
        @(if (>= (strstr $arg1 "haze") 0) [result [
            @(? (>= (strstr $arg1 "mix") 0) [
                uniform vec4 worldhazecolor;
                uniform vec3 worldhazeparams;
            ])
            uniform vec3 hazerefract;
            uniform vec2 hazeparams;
            uniform sampler2D tex4;
            uniform sampler2DRect tex5;
            varying vec2 texcoord1, texcoord2, texcoord3;
        ]])
        @(? (>= (strstr $arg1 "env") 0) [
            uniform samplerCube tex1;
            uniform sampler2D tex2;
            uniform float envblend;
            varying vec3 texcoord4;
        ])

        fragdata(0) vec4 fragcolor;

        void main(void)
        {
            vec4 diffuse = texture2D(tex0, texcoord0);
            @(if (>= (strstr $arg1 "env") 0) [result [
                float offset = ((diffuse.r + diffuse.g + diffuse.b + diffuse.a) * 0.5 - 1.0) * 0.05;
                vec4 envmap = textureCube(tex1, texcoord4 + vec3(offset));
                diffuse.rgb = mix(diffuse.rgb, envmap.rgb, envblend * diffuse.a);
            ]])

            @(if (|| (>= (strstr $arg1 "soft") 0) (>= (strstr $arg1 "haze") 0)) [result [
                @(gdepthunpack depth [gfetch(refractdepth, gl_FragCoord.xy)])
            ]])

            @(? (>= (strstr $arg1 "soft") 0) [
                diffuse.a *= clamp((depth - lineardepth)*softparams.x - softparams.y - dot(surface, surface), 0.0, 1.0);
            ])

            vec4 outcol = hintblend.x > 0.0 && diffuse.a < hintblend.x ? vec4(mix(color.rgb, hintcolor.rgb, diffuse.a * hintblend.y), color.a) : color;

            @(if (>= (strstr $arg1 "haze") 0) [result [
                @(? (>= (strstr $arg1 "ref") 0) [
                    float rdepth = dot(gfetch(refractmask, gl_FragCoord.xy).rgb, gdepthunpackparams);
                    float dist = max(-depth, -rdepth);
                ] [
                    float dist = -depth;
                ])
                if(dist <= 0) dist = -gdepthunpackparams.x;
                float mixer = clamp(dist*hazeparams.x, 0.0, 1.0);
                float alpha = clamp((dist + lineardepth)*hazeparams.y, 0.0, 1.0);

                vec3 bump0 = texture2D(tex4, texcoord1).rgb * 2.0 - 1.0;
                vec3 bump1 = texture2D(tex4, texcoord2).rgb * 2.0 - 1.0;
                vec3 bump2 = texture2D(tex4, texcoord3).rgb * 2.0 - 1.0;
                vec3 col0 = texture2DRect(tex5, gl_FragCoord.xy + (bump0.xy * hazerefract.x)).rgb;
                vec3 col1 = texture2DRect(tex5, gl_FragCoord.xy + (bump1.xy * hazerefract.y)).rgb;
                vec3 col2 = texture2DRect(tex5, gl_FragCoord.xy + (bump2.xy * hazerefract.z)).rgb;
                vec3 rcol = mix(col0, (col1 + col2) * 0.5 * outcol.rgb, mixer);

                @(? (>= (strstr $arg1 "mix") 0) [
                    float offset = dist - worldhazeparams.x;
                    float wmixer = clamp(offset*worldhazeparams.y, 0.0, 1.0) * clamp(offset*worldhazeparams.z, 0.0, 1.0);
                    fragcolor.rgb = mix(rcol, worldhazecolor.rgb, wmixer * worldhazecolor.a);
                ] [
                    fragcolor.rgb = rcol;
                ])
                fragcolor.a = diffuse.a * outcol.a * alpha;
            ]] [result [
                fragcolor = diffuse * outcol;
            ]])
        }
    ]
]

particleshader "particle"
particleshader "particleenv"
particleshader "particlesoft"
particleshader "particlehaze"
particleshader "particlehazemix"
particleshader "particlehazeref"
particleshader "particlehazerefmix"
