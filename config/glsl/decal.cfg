////////////////////////////////////////////////
//
// decals
//
////////////////////////////////////////////////

// decaltype:
//    e -> reserve envmap texture slot
//    r -> envmap reflection
//    R -> modulate reflection with spec map
//    s -> spec
//    S -> spec map
//    n -> normal map
//    p -> parallax
//    g -> glow
//    G -> pulse glow
//    b -> keep normals
//    v -> displacement
//    0 -> pass 0
//    1 -> pass 1

dtopt = [ >= (strstr $decaltype $arg1) 0 ]

decalvariantshader = [
    local decaltype
    decaltype = $arg2
    stype = $SHADER_WORLD
    if (dtopt "e") [
        stype = (| $stype $SHADER_ENVMAP)
    ]
    srow = (? (dtopt "1") 0 -1)
    if (dtopt "G") [
        stype = (| $stype $SHADER_DYNAMIC)
        defuniformparam "glowcolor" 1 1 1 // glow color
        defuniformparam "pulseglowspeed" 1     // pulse frequency (Hz)
        defuniformparam "pulseglowcolor" 0 0 0 // pulse glow color
    ] [if (dtopt "g") [
        defuniformparam "glowcolor" 1 1 1  // glow color
    ]]
    if (dtopt "R") [
        defuniformparam "envscale" 1 1 1 // reflectivity map multiplier
    ] [if (dtopt "r") [
        defuniformparam "envscale" 0.2 0.2 0.2 // reflectivity
    ]]
    reuseuniformparam "gloss" 1 // glossiness
    if (dtopt "S") [
        defuniformparam "specscale" 2 2 2 // spec map multiplier
    ] [if (dtopt "s") [
        defuniformparam "specscale" 1 1 1 // spec multiplier
    ]]
    if (dtopt "p") [
        defuniformparam "parallaxscale" 0.06 -0.03 // parallax scaling
    ]
    if (dtopt "n") [
        defuniformparam "bumpblend" 1 // alpha-blend strength for normals
    ]
    if (dtopt "v") [
        defuniformparam "dispscale" 0.125 0.125 0.125 0.125 // displacement scale modifier
        defuniformparam "dispscroll" 0.0 0.125 0.25 -0.25 // displacement scroll modifier
        defuniformparam "dispcontrib" 1.0 1.0 0.125 // displacement texture contribution
    ]
    variantshader $stype $arg1 $srow [
        attribute vec4 vvertex;
        @(? (dtopt "n") [
            attribute vec4 vtangent;
            varying mat3 world;
        ] [
            varying vec3 nvec;
        ])
        attribute vec4 vnormal;
        attribute vec3 vtexcoord0;
        uniform mat4 camprojmatrix;
        varying vec4 texcoord0;
        @(? (|| (dtopt "p") (dtopt "r")) [
            uniform vec3 camera;
            varying vec3 camvec;
        ])
        @(? (dtopt "G") [flat varying float pulse;])
        @(? (dtopt "v") [varying vec2 dispcoord0, dispcoord1;])
        @(? (|| (dtopt "G") (dtopt "v")) [uniform float millis;])

        void main(void)
        {
            gl_Position = camprojmatrix * vvertex;
            texcoord0.xyz = vtexcoord0;
            texcoord0.w = 3.0*vnormal.w;
            @(? (dtopt "v") [
                dispcoord0 = (texcoord0.xy + millis*dispscroll.xy) * dispscale.xy;
                dispcoord1 = (texcoord0.xy + millis*dispscroll.zw) * dispscale.zw;
            ])

            @(? (dtopt "n") [
                vec3 bitangent = cross(vnormal.xyz, vtangent.xyz) * vtangent.w;
                // calculate tangent -> world transform
                world = mat3(vtangent.xyz, bitangent, vnormal.xyz);
            ] [
                nvec = vnormal.xyz;
            ])

            @(? (|| (dtopt "p") (dtopt "r")) [
                camvec = camera - vvertex.xyz;
            ])

            @(? (dtopt "G") [
                pulse = abs(fract(millis*pulseglowspeed.x)*2.0 - 1.0);
            ])
        }
    ] [
        @(cond [dtopt "0"] [result [
            fragdata(0) vec4 gcolor;
            fragblend(0) vec4 gcolorblend;
        ]] [dtopt "1"] [
            ? $usepacknorm [
                fragdata(0) vec4 gnormal;
            ] [
                fragdata(0) vec4 gnormal;
                fragblend(0) vec4 gnormalblend;
            ]
        ] [result [
            fragdata(0) vec4 gcolor;
            fragdata(1) vec4 gnormal;
        ]])
        uniform sampler2D diffusemap;
        uniform vec4 colorparams;
        varying vec4 texcoord0;
        @(? (dtopt "n") [
            uniform sampler2D normalmap;
            varying mat3 world;
        ] [
            varying vec3 nvec;
            #define bumpblend vec4(1.0)
        ])
        @(? (|| (dtopt "p") (dtopt "r")) [varying vec3 camvec;])
        @(? (|| (dtopt "g") (dtopt "S")) [uniform sampler2D glowmap;])
        @(? (dtopt "G") [flat varying float pulse;])
        @(? (dtopt "r") [uniform samplerCube envmap;])
        @(? (dtopt "v") [
            varying vec2 dispcoord0, dispcoord1;
            uniform sampler2D dispmap;
        ])

        void main(void)
        {
            @(? (dtopt "v") [
                vec3 disp = (texture2D(dispmap, dispcoord0).rgb*dispcontrib.x + texture2D(dispmap, dispcoord1).rgb*dispcontrib.y - (dispcontrib.x+dispcontrib.y)*0.5) * dispcontrib.z;
            ])

            @(if (dtopt "n") [result [
                @(? (dtopt "p") [
                    @(? (dtopt "v") [
                        float height = texture2D(normalmap, texcoord0.xy + disp.xy).a;
                    ] [
                        float height = texture2D(normalmap, texcoord0.xy).a;
                    ])
                    vec3 camvecn = normalize(camvec);
                    vec2 dtc = texcoord0.xy + (camvecn * world).xy*(height*parallaxscale.x + parallaxscale.y);
                ] [
                    #define dtc texcoord0.xy
                ])

                @(? (|| (! (dtopt "0")) (dtopt "r")) [
                    @(? (dtopt "v") [
                        vec3 bump = texture2D(normalmap, dtc + disp.xy).rgb*2.0 - 1.0;
                    ] [
                        vec3 bump = texture2D(normalmap, dtc).rgb*2.0 - 1.0;
                    ])
                    vec3 bumpw = world * bump;
                    #define nvec bumpw
                ])
            ]] [result [
                #define dtc texcoord0.xy
            ]])

            @(if (dtopt "v") [result [
                vec4 diffuse = texture2D(diffusemap, dtc + disp.xy);
            ]] [result [
                vec4 diffuse = texture2D(diffusemap, dtc);
            ]])

            @(if (dtopt "g") [result [
                @(? (dtopt "v") [
                    vec4 glowspec = texture2D(glowmap, dtc + disp.xy);
                ] [
                    vec4 glowspec = texture2D(glowmap, dtc);
                ])
                #define glow glowspec.rgb
                #define spec glowspec.a
                glow *= @(? (dtopt "G") [mix(glowcolor.xyz, pulseglowcolor.xyz, pulse)] [glowcolor.xyz]);
                glow *= diffuse.a;
            ]])

            @(if (dtopt "0") [result [
                @(if (&& (dtopt "S") [! (dtopt "g")]) [result [
                    @(? (dtopt "v") [
                        float spec = @(? (|| (! (dtopt "n")) (dtopt "p")) [texture2D(glowmap, dtc + disp.xy).r] [texture2D(normalmap, dtc + disp.xy).a]);
                    ] [
                        float spec = @(? (|| (! (dtopt "n")) (dtopt "p")) [texture2D(glowmap, dtc).r] [texture2D(normalmap, dtc).a]);
                    ])
                ]])
                @(gspecpack [gloss.x] (if (dtopt "s") [? (dtopt "S") [spec * specscale.x] [specscale.x]]))
            ]])

            @(if (dtopt "1") [
                ? (dtopt "g") [
                   vec3 gcolor = diffuse.rgb*colorparams.rgb;
                ]
            ] [result [
                gcolor.rgb = diffuse.rgb*colorparams.rgb;

                @(if (dtopt "r") [result [
                    @(? (|| (! (dtopt "n")) (! (dtopt "p"))) [
                        vec3 camvecn = normalize(camvec);
                    ])
                    float invfresnel = dot(camvecn, nvec);
                    vec3 rvec = 2.0*nvec*invfresnel - camvecn;
                    vec3 reflect = textureCube(envmap, rvec).rgb * diffuse.a;
                    @(? (dtopt "R") [
                        vec3 rmod = envscale.xyz*spec;
                    ] [
                        #define rmod envscale.xyz
                    ])
                    reflect *= diffuse.a;
                    gcolor.rgb = mix(gcolor.rgb, reflect, rmod*clamp(1.0 - invfresnel, 0.0, 1.0));
                ]])
            ]])

            @(if (dtopt "g") [gglowpack glow packnorm])

            @(if (! (dtopt "0")) [result [
                vec3 normal = normalize(nvec);
                @(gnormpackdef normal packnorm)
            ]])

            float inside = clamp(texcoord0.z, 0.0, 1.0) * clamp(texcoord0.w, 0.0, 1.0);
            float alpha = inside * diffuse.a * colorparams.a;
            @(cond [dtopt "0"] [result [
                gcolor.rgb *= inside;
                gcolor.a *= alpha;
                gcolorblend = vec4(alpha);
            ]] [dtopt "1"] [
                ? $usepacknorm [
                    gnormal.a = alpha * bumpblend.x;
                ] [
                    gnormalblend = vec4(alpha * bumpblend.x);
                ]
            ] [result [
                gcolor.rgb *= inside;
                gcolor.a = alpha;
                @(? (dtopt "b") [
                    gnormal = vec4(0.0);
                ] [
                    gnormal.rgb *= alpha * bumpblend.x;
                    gnormal.a = alpha * bumpblend.x;
                ])
            ]])
        }
    ]
]

decalshaders = []

// 1:<hints>
finddecalshader = [
    listfind i $decalshaders [
        && [= (strlen $arg1) (strlen (at $i 1))] [strhaschars $arg1 (at $i 1)]
    ]
]

decalshader = [
    decaltype = $arg2
    stype = $SHADER_WORLD
    if (dtopt "e") [
        stype = (| $stype $SHADER_ENVMAP)
    ]
    defershader $stype $arg1 [
        if $maxdualdrawbufs [
            decalvariantshader @@arg1 @@(concatword $arg2 "0")
            if @@(! (dtopt "b")) [
                decalvariantshader @@@arg1 @@@(concatword $arg2 "1")
            ]
        ] [
            decalvariantshader @@arg1 @@arg2
        ]
    ]

    append decalshaders [[@@arg1 @@arg2]]
]

decalshader "stddecal" "b"
decalshader "dispdecal" "v"

decalshader "specdecal" "bs"
decalshader "specmapdecal" "bsS"
decalshader "specdispdecal" "bsv"
decalshader "specmapdispdecal" "bsSv"

decalshader "glowdecal" "g"
decalshader "pulseglowdecal" "gG"
decalshader "glowdispdecal" "gv"
decalshader "pulseglowdispdecal" "gGv"

decalshader "envdecal" "ber"
decalshader "envspecdecal" "besr"
decalshader "envspecmapdecal" "besSrR"
decalshader "envglowdecal" "erg"
decalshader "envpulseglowdecal" "ergG"
decalshader "envdispdecal" "berv"
decalshader "envspecdispdecal" "besrv"
decalshader "envspecmapdispdecal" "besSrRv"
decalshader "envglowdispdecal" "ergv"
decalshader "envpulseglowdispdecal" "ergGv"

decalshader "bumpdecal" "n"
decalshader "bumpspecdecal" "ns"
decalshader "bumpspecmapdecal" "nsS"
decalshader "bumpdispdecal" "nv"
decalshader "bumpspecdispdecal" "nsv"
decalshader "bumpspecmapdispdecal" "nsSv"

decalshader "bumpglowdecal" "ng"
decalshader "bumpspecglowdecal" "nsg"
decalshader "bumpspecmapglowdecal" "nsSg"
decalshader "bumpglowdispdecal" "ngv"
decalshader "bumpspecglowdispdecal" "nsgv"
decalshader "bumpspecmapglowdispdecal" "nsSgv"

decalshader "bumppulseglowdecal" "ngG"
decalshader "bumpspecpulseglowdecal" "nsgG"
decalshader "bumpspecmappulseglowdecal" "nsSgG"
decalshader "bumppulseglowdispdecal" "ngGv"
decalshader "bumpspecpulseglowdispdecal" "nsgGv"
decalshader "bumpspecmappulseglowdispdecal" "nsSgGv"

decalshader "bumpparallaxdecal" "np"
decalshader "bumpspecparallaxdecal" "nps"
decalshader "bumpspecmapparallaxdecal" "npsS"
decalshader "bumpparallaxdispdecal" "npv"
decalshader "bumpspecparallaxdispdecal" "npsv"
decalshader "bumpspecmapparallaxdispdecal" "npsSv"

decalshader "bumpparallaxglowdecal" "npg"
decalshader "bumpspecparallaxglowdecal" "npsg"
decalshader "bumpspecmapparallaxglowdecal" "npsSg"
decalshader "bumpparallaxglowdispdecal" "npgv"
decalshader "bumpspecparallaxglowdispdecal" "npsgv"
decalshader "bumpspecmapparallaxglowdispdecal" "npsSgv"

decalshader "bumpparallaxpulseglowdecal" "npgG"
decalshader "bumpspecparallaxpulseglowdecal" "npsgG"
decalshader "bumpspecmapparallaxpulseglowdecal" "npsSgG"
decalshader "bumpparallaxpulseglowdispdecal" "npgGv"
decalshader "bumpspecparallaxpulseglowdispdecal" "npsgGv"
decalshader "bumpspecmapparallaxpulseglowdispdecal" "npsSgGv"

decalshader "bumpenvdecal" "ner"
decalshader "bumpenvspecdecal" "nesr"
decalshader "bumpenvspecmapdecal" "nesSrR"
decalshader "bumpenvdispdecal" "nerv"
decalshader "bumpenvspecdispdecal" "nesrv"
decalshader "bumpenvspecmapdispdecal" "nesSrRv"

decalshader "bumpenvglowdecal" "nerg"
decalshader "bumpenvspecglowdecal" "neosrg"
decalshader "bumpenvspecmapglowdecal" "nesSrRg"
decalshader "bumpenvglowdispdecal" "nergv"
decalshader "bumpenvspecglowdispdecal" "neosrgv"
decalshader "bumpenvspecmapglowdispdecal" "nesSrRgv"

decalshader "bumpenvpulseglowdecal" "neorgG"
decalshader "bumpenvspecpulseglowdecal" "nesrgG"
decalshader "bumpenvspecmappulseglowdecal" "nesSrRgG"
decalshader "bumpenvpulseglowdispdecal" "neorgGv"
decalshader "bumpenvspecpulseglowdispdecal" "nesrgGv"
decalshader "bumpenvspecmappulseglowdispdecal" "nesSrRgGv"

decalshader "bumpenvparallaxdecal" "nepr"
decalshader "bumpenvspecparallaxdecal" "nepsr"
decalshader "bumpenvspecmapparallaxdecal" "nepsSrR"
decalshader "bumpenvparallaxdispdecal" "neprv"
decalshader "bumpenvspecparallaxdispdecal" "nepsrv"
decalshader "bumpenvspecmapparallaxdispdecal" "nepsSrRv"

decalshader "bumpenvparallaxglowdecal" "neprg"
decalshader "bumpenvspecparallaxglowdecal" "nepsrg"
decalshader "bumpenvspecmapparallaxglowdecal" "nepsSrRg"
decalshader "bumpenvparallaxglowdispdecal" "neprgv"
decalshader "bumpenvspecparallaxglowdispdecal" "nepsrgv"
decalshader "bumpenvspecmapparallaxglowdispdecal" "nepsSrRgv"

decalshader "bumpenvparallaxpulseglowdecal" "neprgG"
decalshader "bumpenvspecparallaxpulseglowdecal" "nepsrgG"
decalshader "bumpenvspecmapparallaxpulseglowdecal" "nepsSrRgG"
decalshader "bumpenvparallaxpulseglowdispdecal" "neprgGv"
decalshader "bumpenvspecparallaxpulseglowdispdecal" "nepsrgGv"
decalshader "bumpenvspecmapparallaxpulseglowdispdecal" "nepsSrRgGv"
