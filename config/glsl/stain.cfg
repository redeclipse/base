////////////////////////////////////////////////
//
// stain shaders
//
////////////////////////////////////////////////

// staintype:
//    o -> overbright
//    t -> transparent
//    f -> fogged

stopt = [ >= (strstr $stype $arg1) 0 ]

stainvariantshader = [
    local stype
    stype = $arg2
    srow = (? (stopt "t") 0 -1)
    variantshader $SHADER_DEFAULT $arg1 $srow (if (! (stopt "t")) [result [
        @(? (stopt "f") [
            //:fog
        ])
        attribute vec4 vvertex, vcolor, vnormal;
        attribute vec2 vtexcoord0;
        uniform mat4 camprojmatrix;
        uniform vec4 colorscale;
        varying vec4 color;
        varying vec2 texcoord0;
        @(? (stopt "e") [
            uniform vec3 camera;
            varying vec3 camvec;
            varying vec3 nvec;
        ])

        void main(void)
        {
            gl_Position = camprojmatrix * vvertex;
            color = vcolor * colorscale;
            texcoord0 = vtexcoord0;

            @(? (stopt "e") [
                camvec = camera - vvertex.xyz;
                camvec.z = -camvec.z;
                nvec = vnormal.xyz;
            ])
        }
    ]]) [
        uniform sampler2D tex0;
        varying vec4 color;
        varying vec2 texcoord0;
        fragdata(0) vec4 fragcolor;
        @(? (stopt "t") [
            fragdata(1) vec4 gglow;
        ])
        @(? (stopt "e") [
            uniform samplerCube tex1;
            uniform vec4 envcolor;
            varying vec3 camvec;
            varying vec3 nvec;
        ])

        void main(void)
        {
            vec4 diffuse = texture2D(tex0, texcoord0);

            @(if (stopt "e") [result [
                vec3 camvecn = normalize(camvec);
                float invfresnel = dot(camvecn, nvec);
                vec3 rvec = 2.0*nvec*invfresnel - camvecn;
                vec4 reflect = textureCube(tex1, rvec) * envcolor;

                @(? (stopt "i") [
                    reflect.rgb = vec3(1.0) - reflect.rgb;
                ])
                reflect.a *= diffuse.r;

                diffuse.rgb = mix(diffuse.rgb, reflect.rgb, reflect.a * clamp(1.0 - invfresnel, 0.0, 1.0));
            ]])

            @(if (stopt "o") [result [
                diffuse.rgb = mix(vec3(0.5), diffuse.rgb, color.rgb);
                fragcolor.rgb = diffuse.rgb;
                fragcolor.a = 0.5;

                @(? (stopt "t") [
                    gglow.rgb = diffuse.rgb;
                    gglow.a = 0.5;
                ])
            ]] [result [
                diffuse *= color;
                fragcolor = diffuse;

               @(? (stopt "t") [
                    gglow.rgb = vec3(0.0);
                    gglow.a = diffuse.a;
                ])
            ]])
        }
    ]
]

stainshader = [
    stype = $arg2
    stainvariantshader $arg1 $arg2
    if (! (stopt "f")) [
        stainvariantshader $arg1 (concatword $arg2 "t")
    ]
]

stainshader "stain" ""
stainshader "overbrightstain" "o"
stainshader "foggedstain" "f"
stainshader "foggedstaininvmod" "fi"

stainshader "stainenvmap" "e"
stainshader "overbrightstainenvmap" "oe"
stainshader "foggedstainenvmap" "fe"
stainshader "foggedstaininvmodenvmap" "fie"
