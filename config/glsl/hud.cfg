///////////////////////////////////////////////////
//
// used for rendering to the HUD
//
///////////////////////////////////////////////////

shader $SHADER_DEFAULT "hudrgb" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2D tex0;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        if(colorscale.a <= 0.0) discard;
        vec4 color = texture2D(tex0, texcoord0);
        fragcolor.rgb = colorscale.rgb * color.rgb;
        fragcolor.a   = colorscale.a;
    }
]

shader $SHADER_DEFAULT "hudrectrgb" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2DRect tex0;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        if(colorscale.a <= 0.0) discard;
        vec4 color = texture2DRect(tex0, texcoord0);
        fragcolor.rgb = colorscale.rgb * color.rgb;
        fragcolor.a   = colorscale.a;
    }
]

shader $SHADER_DEFAULT "hud2d" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2D tex0;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        vec4 color = colorscale * texture2D(tex0, texcoord0);
        if(color.a <= 0.0) discard;
        fragcolor = color;
    }
]

shader $SHADER_DEFAULT "hud3d" [
    attribute vec4 vvertex, vcolor;
    attribute vec3 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec3 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler3D tex0;
    varying vec3 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        vec4 color = colorscale * texture3D(tex0, texcoord0);
        if(color.a <= 0.0) discard;
        fragcolor = color;
    }
]

shader $SHADER_DEFAULT "hudcubemap" [
    attribute vec4 vvertex, vcolor;
    attribute vec3 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec3 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform samplerCube tex0;
    varying vec3 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        vec4 color = colorscale * textureCube(tex0, texcoord0);
        if(color.a <= 0.0) discard;
        fragcolor = color;
    }
]

hudhalo = [
    shader $SHADER_DEFAULT $arg1 [
        attribute vec4 vvertex, vcolor;
        attribute vec2 vtexcoord0;
        uniform mat4 hudmatrix;
        uniform float millis;
        varying vec2 texcoord0;
        varying vec4 colorscale;

        @(? (|| (>f $halonoisesample 0.0) (>f $halonoisemixcol 0.0) (>f $halonoisemixblend 0.0)) [
            varying float noise;
        ])

        float rand(vec2 co) { return fract(sin(dot(co.xy, vec2(12.9898, 78.233)))*43758.5453); }

        void main(void)
        {
            gl_Position = hudmatrix * vvertex;
            texcoord0 = vtexcoord0;
            colorscale = vcolor;
            @(if (|| (>f $halonoisesample 0.0) (>f $halonoisemixcol 0.0) (>f $halonoisemixblend 0.0)) [result [
                noise = (rand(vec2(millis)) - 0.5) * 2.0;
            ]])
        }
    ] [
        uniform sampler2DRect tex0;
        uniform vec3 camera;
        uniform mat4 linearworldmatrix;
        uniform vec4 halosize;
        uniform vec3 haloparams;
        uniform vec2 halodepth;
        uniform float millis;
        varying vec2 texcoord0;
        varying vec4 colorscale;

        @(? (|| (>f $halonoisesample 0.0) (>f $halonoisemixcol 0.0) (>f $halonoisemixblend 0.0)) [
            varying float noise;
        ])

        @(? (>= (strstr $arg1 "ref") 0) [
            @(gfetchdefs [refractdepth refractmask])
        ] [
            @(gfetchdefs [refractdepth])
        ])

        fragdata(0) vec4 fragcolor;

        float rand(vec2 co) { return fract(sin(dot(co.xy, vec2(12.9898, 78.233)))*43758.5453); }

        vec4 getsample(sampler2DRect tex, vec2 coord, vec2 offset)
        {
            vec2 uv = coord + vec2(offset * haloparams.z);
            @(if (>f $halonoisesample 0.0) [result [
                uv += vec2(offset * (rand(coord + (offset * haloparams.z * noise)) - 0.5) * @[halonoisesample]);
            ]])
            return texture2DRect(tex, uv);
        }

        void main(void)
        {
            @(loopconcat+ n 0 9 [
                local x y
                x = (at [0.0  1.0 -1.0  1.0 -1.0  0.0 0.0 -1.0 1.0] $n)
                y = (at [0.0 -1.0 -1.0  1.0  1.0 -1.0 1.0  0.0 0.0] $n)
                if $n [result [
                    vec4 samples@n = getsample(tex0, texcoord0, vec2(@x, @y));
                    oaccum += samples@n;
                    oaccum *= 0.5;
                ]] [result [
                    vec4 samples@n = getsample(tex0, texcoord0, vec2(@x, @y));
                    vec4 outcol = samples@n;
                    vec4 oaccum = samples@n;
                ]]
            ])

            // convert alpha back to distance
            float alpha = outcol.a, dist = (1.0 - alpha) * haloparams.x;

            // extract the depth information from the scene
            vec2 duv = gl_FragCoord.xy * halodepth;
            float depth = dot(gfetch(refractdepth, duv).rgb, gdepthunpackparams);
            vec3 pos = (linearworldmatrix * vec4(depth * gl_FragCoord.xy, depth, 1.0)).xyz;
            float maxdist = distance(camera, pos); // linearize and calculate distance

            @(? (>= (strstr $arg1 "ref") 0) [
                float rdepth = dot(gfetch(refractmask, duv).rgb, gdepthunpackparams);
                vec3 rpos = (linearworldmatrix * vec4(rdepth * gl_FragCoord.xy, rdepth, 1.0)).xyz;
                maxdist = max(maxdist, distance(camera, rpos));
            ])

            // depth test and discard if it fails
            @(if (>= (strstr $arg1 "depth") 0) [result [
                if(dist > maxdist) discard;
            ]])

            if(alpha == oaccum.a)
            {   // no change in source pixel distance, must be infill
                @(if (>= (strstr $arg1 "depth") 0) [result [
                    discard;
                ]] [result [
                    if(dist > maxdist)
                    { // behind something, draw infill
                        @(if (>f $haloinfillmix 0.0) [result [
                            outcol = mix(outcol, oaccum, @[haloinfillmix]);
                        ]])
                        outcol *= vec4(vec3(@[haloinfillcol]), @[haloinfillblend]);
                    }
                    else discard;
                ]])
            }
            else
            { // outline
                @(if (>f $halooutlinemix 0.0) [result [
                    outcol = mix(outcol, oaccum, @[halooutlinemix]);
                ]])

                @(if (>f $halooutlineshadow 0.0) [result [
                    outcol = mix(outcol, getsample(tex0, texcoord0, vec2(0.0, -1.0)), @[halooutlineshadow]);
                ]])

                outcol *= vec4(vec3(@[halooutlinecol]), @[halooutlineblend]);
            }

            @(if (>f $halonoisemixcol 0.0) [result [
                outcol.rgb = mix(outcol.rgb, vec3(alpha * rand(texcoord0 + noise)), @[halonoisemixcol]);
            ]])

            @(if (>f $halonoisemixblend 0.0) [result [
                outcol.a = mix(outcol.a, alpha * rand(texcoord0 - noise), @[halonoisemixblend]);
            ]])

            fragcolor = outcol * colorscale;
        }
    ]
]

hudhalo "hudhalodepth"
hudhalo "hudhalotop"
hudhalo "hudhalodepthref"
hudhalo "hudhalotopref"

hudglass = [
    shader $SHADER_DEFAULT $arg1 [
        attribute vec4 vvertex, vcolor;
        attribute vec2 vtexcoord0;
        uniform mat4 hudmatrix;
        varying vec2 texcoord0;

        void main(void)
        {
            gl_Position = hudmatrix * vvertex;
            texcoord0 = vtexcoord0;
        }
    ] [
        uniform sampler2DRect tex0, tex1, tex2, tex3, tex4, tex5;
        uniform vec3 glassmix;
        uniform vec2 glassworld, glassscale;
        varying vec2 texcoord0;
        @(? (>= (strstr $arg1 "view") 0) [
            uniform vec4 glasssize, glassparams;
        ])
        uniform float time;

        fragdata(0) vec4 fragcolor;

        float rand(vec2 co) { return fract(sin(dot(co.xy, vec2(12.9898, 78.233)))*43758.5453); }

        void main(void)
        {
            float alpha = texture2DRect(tex0, texcoord0).a;
            alpha = max(alpha, texture2DRect(tex1, texcoord0 * glassworld).a);

            vec2 uv = texcoord0;
            @(if (>= (strstr $arg1 "view") 0) [result [
                // WARNING: This program MUST produce the same
                // results as the engine 'visorsurf.coords()' for cursor projection

                uv *= glasssize.zw;

                uv -= vec2(0.5);
                uv *= glassparams.zw;

                float l = length(uv);
                uv.xy *= (1.0 + glassparams.x * glassparams.y * glassparams.y);
                uv.xy /= (1.0 + glassparams.x + l * l);

                uv += vec2(0.5);

                uv *= glasssize.xy;
            ]])
            alpha = max(alpha, texture2DRect(tex2, uv).a);

            alpha = max(alpha, texture2DRect(tex3, texcoord0).a);
            alpha = clamp(alpha * glassmix.x, 0.0, 1.0);

            if(alpha > 0.0)
            {
                vec2 dstcoord = texcoord0 * glassscale;
                if(glassmix.z > 0.0) dstcoord += vec2(rand(texcoord0 + time) - 0.5, rand(texcoord0 - time) - 0.5) * glassmix.z;
                vec3 srccolor = texture2DRect(tex4, texcoord0).rgb, dstcolor = texture2DRect(tex5, dstcoord).rgb * glassmix.y;

                fragcolor = vec4(mix(srccolor, dstcolor, alpha), 1.0);
            }
            else fragcolor = vec4(texture2DRect(tex4, texcoord0).rgb, 1.0);
        }
    ]
]

hudglass "hudglass"
hudglass "hudglassview"

hudvisor = [
    shader $SHADER_DEFAULT $arg1 [
        attribute vec4 vvertex, vcolor;
        attribute vec2 vtexcoord0;
        uniform mat4 hudmatrix;
        varying vec2 texcoord0;
        varying vec4 colorscale;

        void main(void)
        {
            gl_Position = hudmatrix * vvertex;
            texcoord0 = vtexcoord0;
            colorscale = vcolor;
        }
    ] [
        uniform sampler2DRect tex0;
        uniform float time;
        @(? (>= (strstr $arg1 "view") 0) [
            uniform vec4 visorparams;
        ])
        uniform vec4 visorsize;
        uniform vec4 visorfx, visorfxcol;
        varying vec2 texcoord0;
        varying vec4 colorscale;

        fragdata(0) vec4 fragcolor;

        uint hash(uint x)
        {
            x += (x << 10u);
            x ^= (x >>  6u);
            x += (x <<  3u);
            x ^= (x >> 11u);
            x += (x << 15u);

            return x;
        }

        float hash(float x) { return uintBitsToFloat(hash(floatBitsToUint(x))); }

        void main(void)
        {
            vec2 uv = texcoord0.xy;
            vec4 diffuse = vec4(0.0);

            @(if (>= (strstr $arg1 "view") 0) [result [
                // WARNING: This program MUST produce the same
                // results as the engine 'visorsurf.coords()' for cursor projection

                uv *= visorsize.zw;

                uv -= vec2(0.5);
                uv *= visorparams.zw;

                float l = length(uv);
                uv.xy *= (1.0 + visorparams.x * visorparams.y * visorparams.y);
                uv.xy /= (1.0 + visorparams.x + l * l);

                uv += vec2(0.5);

                uv *= visorsize.xy;
            ]])

            diffuse = texture2DRect(tex0, uv);
            if(diffuse.a == 0.0) discard;

            if(visorfx.x > 0.0 && visorfx.y > 0.0) // scanlines
            {
                float count = visorsize.y * visorfx.x, ycoord = 0.5 + (uv.y * visorsize.w * 0.5);
                vec2 sl = vec2(sin(ycoord * count), cos(ycoord * count));
                vec3 scanlines = mix(vec3(sl.x, sl.y, sl.x), visorfxcol.rgb, visorfxcol.a);

                diffuse.rgb += diffuse.rgb * scanlines * visorfx.y;
            }

            if(visorfx.z > 0.0) // noise
            {
                vec2 uvscaled = uv * visorsize.zw;
                float noise = clamp(hash(uvscaled.x + uvscaled.y + (int(time*10)&255)), 0.5, 1.0);
                diffuse.rgb += diffuse.rgb * vec3(noise) * visorfx.z;
            }

            if(visorfx.w > 0.0) // flicker
                diffuse.rgb += diffuse.rgb * sin(110.0 * time) * visorfx.w;

            fragcolor = colorscale * diffuse;
        }
    ]
]

hudvisor "hudvisor"
hudvisor "hudvisorview"