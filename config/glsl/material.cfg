///////////////////////////////////////////////////
//
// material shaders
//
///////////////////////////////////////////////////

shader $SHADER_DEFAULT "refractmask" [
    attribute vec4 vvertex;
    uniform mat4 camprojmatrix;
    void main(void)
    {
        gl_Position = camprojmatrix * vvertex;
    }
] [
    @(gfetchdefs refractdepth)
    uniform vec3 gdepthpackparams;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        @(if (= $gdepthformat 1) [result [
            vec3 packdepth = gfetch(refractdepth, gl_FragCoord.xy).rgb;
        ]] [result [
            @(gdepthunpack depth [gfetch(refractdepth, gl_FragCoord.xy)])
            @(gpackdepth packdepth depth)
        ]])
        fragcolor = vec4(packdepth, 0.0);
    }
]

lazyshader $SHADER_DEFAULT "minimapvol" [
    attribute vec4 vvertex;
    uniform mat4 camprojmatrix;
    @(ginterpvert)
    void main(void)
    {
        gl_Position = camprojmatrix * vvertex;
        @(gdepthpackvert)
    }
] [
    uniform vec3 watercolor;
    @(ginterpfrag)

    void main(void)
    {
        gcolor = vec4(watercolor, 0.0);
        @(gnormpack [vec3(0.5, 0.5, 1.0)])
        @(gdepthpackfrag)
    }
]

watershader = [
  lazyshader $SHADER_DEFAULT $arg1 [
    attribute vec4 vvertex;
    uniform mat4 camprojmatrix;
    uniform vec3 camera;
    uniform vec2 watertexgen;
    uniform float millis;
    varying vec2 texcoord0, texcoord1, texcoord2, texcoord3;
    varying vec3 surface;
    @(? (>= (strstr $arg1 "reflect") 0) [
        uniform mat4 raymatrix;
        varying vec3 esurface;
    ])
    @(ginterpvert 1)
    void main(void)
    {
        gl_Position = camprojmatrix * vvertex;
        surface = vvertex.xyz;
        @(? (>= (strstr $arg1 "reflect") 0) [
            esurface = (raymatrix * vvertex).xyz;
        ])

        vec2 tc = vvertex.xy * watertexgen;
        texcoord0 = tc * 0.18 + millis*vec2( 0.25,  0.75)*0.1250;
        texcoord1 = tc * 0.18 + millis*vec2(-0.75, -0.25)*0.1450;
        texcoord2 = tc * 0.08 + millis*vec2(-0.50,  0.50)*0.0805;
        texcoord3 = tc * 0.08 + millis*vec2( 0.25, -0.75)*0.0825;

        @(gdepthpackvert 1)
    }
  ] [
    @(gfetchdefs [refractmask refractlight refractdepth])
    uniform vec3 camera;
    uniform float millis;
    uniform mat4 linearworldmatrix;
    varying vec2 texcoord0, texcoord1, texcoord2, texcoord3;
    varying vec3 surface;
    uniform sampler2D tex0, tex1;
    uniform vec4 viewsize, wateredgefade, wateredgeparams;
    uniform vec3 watercolor, waterdeepcolor, waterdeepfade, wateredgecolor;
    uniform float waterfog, waterspec;
    uniform vec4 waterreflect, waterrefract;
    uniform float refractdepthscale;
    @(? (>= (strstr $arg1 "caustics") 0) [
        uniform vec3 causticsS, causticsT;
        uniform vec2 causticsblend;
        uniform sampler2D tex2;
    ])
    @(? (>= (strstr $arg1 "env") 0) [
        uniform samplerCube tex4;
    ])
    @(? (>= (strstr $arg1 "reflect") 0) [
        uniform mat4 raymatrix;
        varying vec3 esurface;
    ])
    @(ginterpfrag 1)

    #define rot2(a) mat2(sin(a), cos(a), -cos(a), sin(a))

    float rand(vec2 uv)
    {
        return fract(sin(dot(uv, vec2(12.9898, 58.233))) * 13758.5453);
    }

    vec4 foam(vec2 uv)
    {
        vec4 c = vec4(0.0);
        uv = uv * 4.0;
        vec2 uf = fract(uv);
        vec2 u = floor(uv);
        float h = rand(u);
        float i = rand(u + vec2(1, 0));
        float j = rand(u + vec2(0, 1));
        float k = rand(u + vec2(1, 1));

        float hl = length(uf);
        float il = length(uf-vec2(1, 0));
        float jl = length(uf-vec2(0, 1));
        float kl = length(uf - vec2(1));

        c.x = max(max(h * (1.0 - hl), i * (1.0 - il)), max(j * (1.0 - jl), k * (1.0 - kl)));

        return c;
    }

    void main(void)
    {
        vec3 camdir = camera - surface, camvec = normalize(camdir);

        float depth = dot(gfetch(refractmask, gl_FragCoord.xy).rgb, gdepthunpackparams);
        vec3 pos = (linearworldmatrix * vec4(depth*gl_FragCoord.xy, depth, 1.0)).xyz;
        @(if (>= (strstr $arg1 "under") 0) [result [
            float edgelength = clamp((pos.z - surface.z) * wateredgefade.y, 0.0, 1.0);
        ]] [result [
            float edgelength = clamp((surface.z - pos.z) * wateredgefade.y, 0.0, 1.0);
        ]])

        vec3 bump  = texture2D(tex1, texcoord0).rgb;
        vec3 bump2 = texture2D(tex1, texcoord1).rgb;
        vec3 bump3 = texture2D(tex1, texcoord2).rgb;
        vec3 bump4 = texture2D(tex1, texcoord3).rgb;
        bump = normalize(bump + bump2 + bump3 + bump4 - 2.0);

        vec2 rtc = bump.xy * waterrefract.w;
        float rmask = clamp(refractdepthscale * (lineardepth - dot(gfetch(refractmask, gl_FragCoord.xy + rtc).rgb, gdepthunpackparams)), 0.0, 1.0);
        rtc = gl_FragCoord.xy + rtc * rmask;

        vec3 rcolor = gfetch(refractlight, rtc).rgb * waterrefract.xyz;
        float rdepth = dot(gfetch(refractmask, rtc).rgb, gdepthunpackparams);
        vec3 rpos = (linearworldmatrix * vec4(rdepth*rtc, rdepth, 1.0)).xyz;

        @(if (>= (strstr $arg1 "under") 0) [result [
            float edgethresh = clamp((rpos.z - surface.z) * wateredgefade.x, 0.0, 1.0);
        ]] [result [
            vec3 rdir = rpos.xyz - camera;
            float raydepth = length(rdir) * (1.0 + camdir.z / rdir.z);
            float edgethresh = surface.z - rpos.z;

            @(? (>= (strstr $arg1 "caustics") 0) [
                vec2 ctc = vec2(dot(causticsS, rpos.xyz), dot(causticsT, rpos.xyz));
                float caustics = texture2D(tex2, ctc).r * causticsblend.x + causticsblend.y;
                rcolor *= caustics;
            ])

            rcolor = mix(watercolor, rcolor, clamp(exp2(waterfog * raydepth), 0.0, 1.0));
            rcolor = mix(waterdeepcolor, rcolor, clamp(exp2(edgethresh * waterdeepfade), 0.0, 1.0));

            edgethresh = clamp(edgethresh * wateredgefade.x, 0.0, 1.0);
        ]])

        float alpha = min(edgelength, edgethresh);
        vec3 reflectdir = -reflect(camvec, bump);
        reflectdir.z = abs(reflectdir.z);

        @(if (>= (strstr $arg1 "reflect") 0) [result [
            reflectdir.z += 0.125;
            vec3 edir = (raymatrix * vec4(waterreflect.w * reflectdir, 0.0)).xyz;
            vec3 epos = esurface + edir;

            @(loopconcat i 4 [result [
                @(gdepthunpack [edepth@[i]] [gfetchproj(refractdepth, epos)] [
                    if(edepth@[i] < epos.z || edepth@[i] > esurface.z) epos += edir;
                ] [
                    edepth@[i] = edepth@[i]*gdepthscale.y + gdepthscale.z;
                    if(gdepthscale.x < epos.z*edepth@[i] || gdepthscale.x > esurface.z*edepth@[i]) epos += edir;
                ])
            ]])

            vec2 etc = epos.xy/epos.z;
            @(? $msaalight [
                etc = clamp(etc, vec2(0.0), viewsize.xy);
            ])
            vec3 reflect = gfetch(refractlight, etc).rgb * waterreflect.xyz;
            float edgefade = clamp(4.0 * (0.5 - max(abs(etc.x * viewsize.z - 0.5) * 0.75 + 0.25 / 4.0, abs(etc.y * viewsize.w - 0.5))), 0.0, 1.0);
            float fresnel = 0.25 + 0.75 * pow(clamp(1.0 - dot(camvec, bump), 0.0, 1.0), 4.0);

            rcolor = mix(rcolor, reflect, fresnel * edgefade * alpha);
        ]] [if (>= (strstr $arg1 "env") 0) [result [
            vec3 reflect = textureCube(tex4, reflectdir).rgb * 0.5;
            float fresnel = 0.5 * pow(clamp(1.0 - dot(camvec, bump), 0.0, 1.0), 4.0);

            rcolor = mix(rcolor, reflect, fresnel * alpha);
        ]]])

        if(wateredgefade.z > 0.0)
        {
            float edgecolor = 0.0;
            vec2 edgecoord = surface.xy + bump.xy;

            for(float i = 0.0; i < 7.0; i++)
            {
                edgecolor += foam(edgecoord * wateredgeparams.x + edgecolor * wateredgeparams.y + millis * wateredgeparams.z).x;
                edgecoord *= 1.33333333;
                edgecoord *= rot2(0.63661977);
            }

            if(edgecolor > 0.0)
            {
                float edgedist = max((1.0 - edgelength) * wateredgefade.z, (1.0 - edgethresh) * wateredgefade.w);

                if(wateredgeparams.w != 0.0)
                {
                    float edgebump = max(bump.x * wateredgeparams.w, bump.y * wateredgeparams.w);
                    if(edgebump > 0.0) edgedist += edgebump;
                }

                rcolor = mix(rcolor, wateredgecolor, edgedist * 1.0 / edgecolor);
            }
        }

        gcolor.rgb = vec3(0.0);
        @(gspecpack 2.0 [waterspec * alpha])
        @(gnormpack bump alpha)
        gglow.rgb = rcolor * alpha;
        @(gdepthpackfrag)
    }
  ]
]

watershader "water"
watershader "watercaustics"
watershader "waterenv"
watershader "waterenvcaustics"
watershader "waterreflect"
watershader "waterreflectcaustics"
watershader "underwater"

causticshader = [
    lazyshader $SHADER_DEFAULT $arg1 [
        attribute vec4 vvertex;
        void main(void)
        {
            gl_Position = vvertex;
        }
    ] [
        @(gfetchdefs refractdepth)
        uniform mat4 causticsmatrix;
        uniform vec2 causticsblend;
        uniform sampler2D tex0, tex1;
        uniform vec4 waterdeepfade;
        fragdata(0) vec4 fragcolor;
        void main(void)
        {
            @(gdepthunpack depth [gfetch(refractdepth, gl_FragCoord.xy)] [
                vec3 ctc = (causticsmatrix * vec4(depth*gl_FragCoord.xy, depth, 1.0)).xyz;
            ] [
                vec4 ctc = causticsmatrix * vec4(gl_FragCoord.xy, depth, 1.0);
                ctc.xyz /= ctc.w;
            ])
            float caustics = texture2D(tex0, ctc.xy).r * causticsblend.x + causticsblend.y;
            caustics *= clamp(ctc.z, 0.0, 1.0) * clamp(exp2(ctc.z*waterdeepfade.w), 0.0, 1.0);
            fragcolor.rgb = vec3(0.5 + caustics);
        }
    ]
]
causticshader caustics

volfogshader = [
  lazyshader $SHADER_DEFAULT $arg1 [
    attribute vec4 vvertex;
    uniform mat4 camprojmatrix;
    varying vec3 surface;
    @(if (>= (strstr $arg1 "tex") 0) [result [
        uniform float millis;
        uniform vec4 volfogtexgen;
        @(? (>= (strstr $arg1 "smp") 0) [
            varying vec2 texcoord0, texcoord1, texcoord2, texcoord3;
        ] [
            varying vec2 texcoord0;
        ])
    ]])
    @(ginterpvert)
    void main(void)
    {
        gl_Position = camprojmatrix * vvertex;
        surface = vvertex.xyz;

        @(if (>= (strstr $arg1 "tex") 0) [result [
            @(? (>= (strstr $arg1 "smp") 0) [
                vec2 tc = (vvertex.xy + volfogtexgen.zw) * volfogtexgen.xy;
                texcoord0 = tc * 0.3 + millis*vec2( 0.02,  0.05)*0.1250;
                texcoord1 = tc * 0.2 + millis*vec2(-0.05, -0.02)*0.1450;
                texcoord2 = tc * 0.8 + millis*vec2(-0.05,  0.05)*0.0805;
                texcoord3 = tc * 0.4 + millis*vec2( 0.02, -0.05)*0.0825;
            ] [
                texcoord0 = (vvertex.xy + volfogtexgen.zw) * volfogtexgen.xy;
            ])
        ]])

        @(gdepthpackvert)
    }
  ] [
    @(gfetchdefs [refractmask refractlight])
    uniform vec3 camera;
    uniform mat4 linearworldmatrix;
    varying vec3 surface;
    uniform vec3 volfogcolor, volfogdeepcolor, volfogdeepfade;
    uniform float volfogdist;
    @(if (>= (strstr $arg1 "tex") 0) [result [
        uniform sampler2D tex0;
        uniform vec4 volfogtexcolor;
        @(? (>= (strstr $arg1 "smp") 0) [
            varying vec2 texcoord0, texcoord1, texcoord2, texcoord3;
        ] [
            varying vec2 texcoord0;
        ])
    ]])
    @(ginterpfrag)

    void main(void)
    {
        vec3 rcolor = gfetch(refractlight, gl_FragCoord.xy).rgb;
        float rdepth = dot(gfetch(refractmask, gl_FragCoord.xy).rgb, gdepthunpackparams);
        vec3 rpos = (linearworldmatrix * vec4(rdepth*gl_FragCoord.xy, rdepth, 1.0)).xyz;

        @(if (>= (strstr $arg1 "under") 0) [result [
            vec3 rdir = camera - rpos.xyz;
            float raydepth = length(rdir)*(1.0 + (surface.z - camera.z)/rdir.z);
            float mixer = clamp(exp2(volfogdist * raydepth), 0.0, 1.0);
        ]] [result [
            vec3 rdir = rpos.xyz - camera;
            float raydepth = length(rdir)*(1.0 + (camera.z - surface.z)/rdir.z);
            float deep = surface.z - rpos.z;
            float mixer = clamp(exp2(volfogdist * raydepth), 0.0, 1.0);
            rcolor = mix(volfogcolor, rcolor, mixer);
            rcolor = mix(volfogdeepcolor, rcolor, clamp(exp2(deep * volfogdeepfade), 0.0, 1.0));
        ]])

        gcolor.rgb = vec3(0.0);
        @(gnormpack [vec3(0.0, 0.0, 1.0)])
        @(if (>= (strstr $arg1 "tex") 0) [result [
            @(? (>= (strstr $arg1 "smp") 0) [
                vec4 smp1 = texture2D(tex0, texcoord0);
                vec4 smp2 = texture2D(tex0, texcoord1);
                vec4 smp3 = texture2D(tex0, texcoord2);
                vec4 smp4 = texture2D(tex0, texcoord3);

                vec4 diffuse = ((smp1 * smp2) + (smp3 * smp4)) * volfogtexcolor * 0.5;
                gglow.rgb = mix(rcolor, diffuse.rgb, diffuse.a*(1.0 - mixer));
            ] [
                vec4 diffuse = texture2D(tex0, texcoord0) * volfogtexcolor;
                gglow.rgb = mix(rcolor, diffuse.rgb, diffuse.a*(1.0 - mixer));
            ])
        ]] [result [
            gglow.rgb = rcolor;
        ]])

        @(gdepthpackfrag)
    }
  ]
]

volfogshader "volfog"
volfogshader "volfogtex"
volfogshader "volfogtexsmp"
volfogshader "undervolfog"
volfogshader "undervolfogtex"
volfogshader "undervolfogtexsmp"

depthfogshader = [
    lazyshader $SHADER_DEFAULT $arg1 [
        attribute vec4 vvertex;
        void main(void)
        {
            gl_Position = vvertex;
        }
    ] [
        @(gfetchdefs refractdepth)
        uniform vec3 camera;
        uniform mat4 worldmatrix;
        uniform vec3 fogcolor;
        uniform vec2 fogdensity;
        uniform vec3 fogdeepcolor, fogdeepfade;
        uniform float fogheight;
        fragdata(0) vec4 fragcolor;
        void main(void)
        {
            @(gdepthunpack depth [gfetch(refractdepth, gl_FragCoord.xy)] [
                vec3 pos = (worldmatrix * vec4(depth*gl_FragCoord.xy, depth, 1.0)).xyz;
            ] [
                vec4 pos = worldmatrix * vec4(gl_FragCoord.xy, depth, 1.0);
                pos.xyz /= pos.w;
            ])
            float fogbelow = fogheight - pos.z;
            if(fogbelow <= 0) discard;
            float fogcoord = distance(camera, pos.xyz);
            float foglerp = clamp(1.0 - exp2(fogcoord*fogdensity.x)*fogdensity.y, 0.0, 1.0);
            vec3 color = mix(fogdeepcolor, fogcolor, clamp(exp2(fogbelow*fogdeepfade), 0.0, 1.0));
            fragcolor.rgb = color;
            fragcolor.a = foglerp;
        }
    ]
]
depthfogshader "depthfog"

lazyshader $SHADER_DEFAULT "lava" [
    attribute vec4 vvertex;
    attribute vec3 vnormal;
    uniform mat4 camprojmatrix;
    varying mat3 world;
    uniform vec4 lavatexgen;
    varying vec2 texcoord0;
    @(ginterpvert)
    void main(void)
    {
        gl_Position = camprojmatrix * vvertex;
        vec3 tangent = mix(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0), abs(vnormal.x));
        vec3 bitangent = mix(vec3(0.0, 0.0, -1.0), vec3(0.0, 1.0, 0.0), abs(vnormal.z));
        world = mat3(tangent, bitangent, vnormal);
        vec2 tc = vec2(dot(vvertex.xy, tangent.xy), dot(vvertex.yz, bitangent.yz));
        texcoord0 = (tc + lavatexgen.zw) * lavatexgen.xy;
        @(gdepthpackvert)
    }
] [
    uniform sampler2D tex0, tex1;
    uniform float lavaglow, lavaspec;
    varying mat3 world;
    varying vec2 texcoord0;
    @(ginterpfrag)

    void main(void)
    {
        vec3 diffuse = texture2D(tex0, texcoord0).rgb;
        vec3 bump = texture2D(tex1, texcoord0).rgb*2.0-1.0;
        vec3 bumpw = normalize(world * bump);
        gcolor.rgb = diffuse;
        @(gspecpack 0.0 lavaspec)
        @(gnormpack bumpw)
        gglow.rgb = diffuse*lavaglow;
        @(gdepthpackfrag)
    }
]

lazyshader $SHADER_DEFAULT "waterfallenv" [
    attribute vec4 vvertex;
    attribute vec3 vnormal;
    uniform mat4 camprojmatrix;
    uniform vec4 camera;
    varying vec3 camdir;
    varying mat3 world;
    uniform vec4 waterfalltexgen;
    varying vec2 texcoord0;
    @(ginterpvert 1)
    void main(void)
    {
        gl_Position = camprojmatrix * vvertex;
        camdir = camera.xyz - vvertex.xyz;
        vec3 tangent = mix(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0), abs(vnormal.x));
        vec3 bitangent = mix(vec3(0.0, 0.0, -1.0), vec3(0.0, 1.0, 0.0), abs(vnormal.z));
        world = mat3(tangent, bitangent, vnormal);
        vec2 tc = vec2(dot(vvertex.xy, tangent.xy), dot(vvertex.yz, bitangent.yz));
        texcoord0 = (tc + waterfalltexgen.zw) * waterfalltexgen.xy;
        @(gdepthpackvert 1)
    }
] [
    @(gfetchdefs [refractmask refractlight])
    uniform samplerCube tex3;
    uniform sampler2D tex0, tex1;
    uniform vec3 waterfallcolor;
    uniform float waterfallspec;
    uniform vec4 waterfallrefract;
    uniform float refractdepthscale;
    varying vec3 camdir;
    varying mat3 world;
    varying vec2 texcoord0;
    @(ginterpfrag 1)

    void main(void)
    {
        vec3 camvec = normalize(camdir);
        vec3 diffuse = texture2D(tex0, texcoord0).rgb;
        vec3 bump = texture2D(tex1, texcoord0).rgb*2.0 - 1.0;
        vec3 bumpw = normalize(world * bump);

        vec2 rtc = bump.xy * waterfallrefract.w;
        float rmask = clamp(refractdepthscale*(lineardepth - dot(gfetch(refractmask, gl_FragCoord.xy + rtc).rgb, gdepthunpackparams)), 0.0, 1.0);
        rtc = gl_FragCoord.xy + rtc*rmask;
        vec3 rcolor = gfetch(refractlight, rtc).rgb * waterfallrefract.xyz;

        float invfresnel = dot(camvec, bumpw);
        vec3 env = textureCube(tex3, 2.0*bumpw*invfresnel - camvec).rgb;
        env *= 0.1 + 0.4*pow(clamp(1.0 - invfresnel, 0.0, 1.0), 2.0);

        gcolor.rgb = vec3(0.0);
        @(gspecpack 2.0 [waterfallspec*(1.0 - dot(diffuse, vec3(0.33)))]);
        @(gnormpack bumpw)
        gglow.rgb = mix(rcolor, waterfallcolor, diffuse) + env;
        @(gdepthpackfrag)
    }
]

lazyshader $SHADER_DEFAULT "waterfall" [
    attribute vec4 vvertex;
    attribute vec3 vnormal;
    uniform mat4 camprojmatrix;
    varying mat3 world;
    uniform vec4 waterfalltexgen;
    varying vec2 texcoord0;
    @(ginterpvert 1)
    void main(void)
    {
        gl_Position = camprojmatrix * vvertex;
        vec3 tangent = mix(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0), abs(vnormal.x));
        vec3 bitangent = mix(vec3(0.0, 0.0, -1.0), vec3(0.0, 1.0, 0.0), abs(vnormal.z));
        world = mat3(tangent, bitangent, vnormal);
        vec2 tc = vec2(dot(vvertex.xy, tangent.xy), dot(vvertex.yz, bitangent.yz));
        texcoord0 = (tc + waterfalltexgen.zw) * waterfalltexgen.xy;
        @(gdepthpackvert 1)
    }
] [
    @(gfetchdefs [refractmask refractlight])
    uniform sampler2D tex0, tex1;
    uniform vec3 waterfallcolor;
    uniform float waterfallspec;
    uniform vec4 waterfallrefract;
    uniform float refractdepthscale;
    varying mat3 world;
    varying vec2 texcoord0;
    @(ginterpfrag 1)

    void main(void)
    {
        vec3 diffuse = texture2D(tex0, texcoord0).rgb;
        vec3 bump = texture2D(tex1, texcoord0).rgb*2.0 - 1.0;
        vec3 bumpw = normalize(world * bump);

        vec2 rtc = bump.xy * waterfallrefract.w;
        float rmask = clamp(refractdepthscale*(lineardepth - dot(gfetch(refractmask, gl_FragCoord.xy + rtc).rgb, gdepthunpackparams)), 0.0, 1.0);
        rtc = gl_FragCoord.xy + rtc*rmask;
        vec3 rcolor = gfetch(refractlight, rtc).rgb * waterfallrefract.xyz;

        gcolor.rgb = vec3(0.0);
        @(gspecpack 2.0 [waterfallspec*(1.0 - dot(diffuse, vec3(0.33)))])
        @(gnormpack bumpw)
        gglow.rgb = mix(rcolor, waterfallcolor, diffuse);
        @(gdepthpackfrag)
    }
]

lazyshader $SHADER_DEFAULT "glassenv" [
    attribute vec4 vvertex;
    attribute vec3 vnormal;
    uniform mat4 camprojmatrix;
    uniform vec4 camera;
    varying vec3 camdir;
    varying mat3 world;
    uniform vec2 glasstexgen;
    varying vec2 texcoord0;
    @(ginterpvert 1)
    void main(void)
    {
        gl_Position = camprojmatrix * vvertex;
        camdir = camera.xyz - vvertex.xyz;
        vec3 tangent = mix(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0), abs(vnormal.x));
        vec3 bitangent = mix(vec3(0.0, 0.0, -1.0), vec3(0.0, 1.0, 0.0), abs(vnormal.z));
        world = mat3(tangent, bitangent, vnormal);
        vec2 tc = vec2(dot(vvertex.xy, tangent.xy), dot(vvertex.yz, bitangent.yz));
        texcoord0 = tc * glasstexgen;
        @(gdepthpackvert 1)
    }
] [
    @(gfetchdefs [refractmask refractlight])
    uniform samplerCube tex0;
    uniform sampler2D tex1;
    uniform float glassspec;
    uniform vec4 glassrefract;
    uniform float refractdepthscale;
    varying vec3 camdir;
    varying mat3 world;
    varying vec2 texcoord0;
    @(ginterpfrag 1)

    void main(void)
    {
        vec3 camvec = normalize(camdir);
        vec3 bump = texture2D(tex1, texcoord0).rgb*2.0 - 1.0;
        vec3 bumpw = normalize(world * bump);

        vec2 rtc = bump.xy * glassrefract.w;
        float rmask = clamp(refractdepthscale*(lineardepth - dot(gfetch(refractmask, gl_FragCoord.xy + rtc).rgb, gdepthunpackparams)), 0.0, 1.0);
        rtc = gl_FragCoord.xy + rtc*rmask;
        vec3 rcolor = gfetch(refractlight, rtc).rgb;
        rcolor *= glassrefract.xyz;

        float invfresnel = dot(camvec, bumpw);
        vec3 env = textureCube(tex0, 2.0*bumpw*invfresnel - camvec).rgb;
        env *= 0.1 + 0.4*pow(clamp(1.0 - invfresnel, 0.0, 1.0), 2.0);

        gcolor.rgb = vec3(0.0);
        @(gspecpack 2.0 glassspec)
        @(gnormpack bumpw)
        gglow.rgb = rcolor + env;
        @(gdepthpackfrag)
    }
]

lazyshader $SHADER_DEFAULT "glass" [
    attribute vec4 vvertex;
    attribute vec3 vnormal;
    uniform mat4 camprojmatrix;
    varying mat3 world;
    uniform vec2 glasstexgen;
    varying vec2 texcoord0;
    @(ginterpvert 1)
    void main(void)
    {
        gl_Position = camprojmatrix * vvertex;
        vec3 tangent = mix(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0), abs(vnormal.x));
        vec3 bitangent = mix(vec3(0.0, 0.0, -1.0), vec3(0.0, 1.0, 0.0), abs(vnormal.z));
        world = mat3(tangent, bitangent, vnormal);
        vec2 tc = vec2(dot(vvertex.xy, tangent.xy), dot(vvertex.yz, bitangent.yz));
        texcoord0 = tc * glasstexgen;
        @(gdepthpackvert 1)
    }
] [
    @(gfetchdefs [refractmask refractlight])
    uniform sampler2D tex1;
    uniform float glassspec;
    uniform vec4 glassrefract;
    uniform float refractdepthscale;
    varying mat3 world;
    varying vec2 texcoord0;
    @(ginterpfrag 1)

    void main(void)
    {
        vec3 bump = texture2D(tex1, texcoord0).rgb*2.0 - 1.0;
        vec3 bumpw = normalize(world * bump);

        vec2 rtc = bump.xy * glassrefract.w;
        float rmask = clamp(refractdepthscale*(lineardepth - dot(gfetch(refractmask, gl_FragCoord.xy + rtc).rgb, gdepthunpackparams)), 0.0, 1.0);
        rtc = gl_FragCoord.xy + rtc*rmask;
        vec3 rcolor = gfetch(refractlight, rtc).rgb;
        rcolor *= glassrefract.xyz;

        gcolor.rgb = vec3(0.0);
        @(gspecpack 2.0 glassspec)
        @(gnormpack bumpw)
        gglow.rgb = rcolor;
        @(gdepthpackfrag)
    }
]

hazeshader = [
    lazyshader $SHADER_DEFAULT $arg1 [
        attribute vec4 vvertex;
        @(? (>= (strstr $arg1 "tex") 0) [
            uniform float millis;
            uniform vec4 hazetexgen;
            varying vec2 texcoord0, texcoord1, texcoord2;
        ])
        void main(void)
        {
            gl_Position = vvertex;
            @(? (>= (strstr $arg1 "tex") 0) [
                texcoord0 = (vvertex.xy + hazetexgen.zw) * hazetexgen.xy;
                texcoord1 = texcoord0 * 0.18 + millis*vec2( 0.25,  0.75)*0.1250;
                texcoord2 = texcoord0 * 0.18 + millis*vec2(-0.75, -0.25)*0.1450;
            ])
        }
    ] [
        @(if (>= (strstr $arg1 "ref") 0) [result [
            @(gfetchdefs [refractmask refractdepth])
        ]] [result [
            @(gfetchdefs [refractdepth])
        ]])
        uniform vec3 hazerefract;
        uniform vec4 hazecolor, hazeparams;
        @(? (>= (strstr $arg1 "tex") 0) [
            uniform sampler2D tex0;
            uniform sampler2DRect refractlight;
            varying vec2 texcoord0, texcoord1, texcoord2;
        ])
        fragdata(0) vec4 fragcolor;
        void main(void)
        {
            @(gdepthunpack depth [gfetch(refractdepth, gl_FragCoord.xy)])
            @(? (>= (strstr $arg1 "ref") 0) [
                float rdepth = dot(gfetch(refractmask, gl_FragCoord.xy).rgb, gdepthunpackparams);
                float dist = max(-depth, -rdepth);
            ] [
                float dist = -depth;
            ])
            if(dist <= 0) dist = -gdepthunpackparams.x;
            if(dist < hazeparams.x) discard;

            float offset = dist - hazeparams.x;
            float mixer = clamp(offset*hazeparams.y, 0.0, 1.0);
            float alpha = clamp(offset*hazeparams.z, 0.0, 1.0);

            @(? (>= (strstr $arg1 "tex") 0) [
                vec3 bump0 = texture2D(tex0, texcoord0).rgb * 2.0 - 1.0;
                vec3 bump1 = texture2D(tex0, texcoord1).rgb * 2.0 - 1.0;
                vec3 bump2 = texture2D(tex0, texcoord2).rgb * 2.0 - 1.0;
                vec3 col0 = texture2DRect(refractlight, gl_FragCoord.xy + (bump0.xy * hazerefract.x)).rgb;
                vec3 col1 = texture2DRect(refractlight, gl_FragCoord.xy + (bump1.xy * hazerefract.y)).rgb;
                vec3 col2 = texture2DRect(refractlight, gl_FragCoord.xy + (bump2.xy * hazerefract.z)).rgb;

                fragcolor.rgb = mix(mix(col0, (col1 + col2) * 0.5, mixer), hazecolor.rgb, mixer * hazecolor.a);
                fragcolor.a = alpha * hazeparams.w;
            ] [
                fragcolor.rgb = hazecolor.rgb;
                fragcolor.a = mixer * hazecolor.a * alpha;
            ])
        }
    ]
]
hazeshader "haze"
hazeshader "hazetex"
hazeshader "hazeref"
hazeshader "hazetexref"
