////////////////////////////////////////////////
//
// sky shaders
//
////////////////////////////////////////////////

skyshader = [
    shader $SHADER_DEFAULT $arg1 [
        attribute vec4 vvertex, vcolor;
        attribute vec2 vtexcoord0;
        uniform mat4 skymatrix;
        uniform float ldrscale;
        varying vec4 colorscale;
        varying vec2 texcoord0;
        void main(void)
        {
            gl_Position = skymatrix * vvertex;
            texcoord0 = vtexcoord0;
            colorscale = vec4(ldrscale * vcolor.rgb, vcolor.a);
        }
    ] [
        uniform sampler2D tex0;
        varying vec4 colorscale;
        varying vec2 texcoord0;
        @(? (>= (strstr $arg1 "shadow") 0) [
            uniform float shadowstrength;
        ])
        @(? (>= (strstr $arg1 "overbright") 0) [
            uniform vec3 overbrightparams;
        ])

        fragdata(0) vec4 fragcolor;
        void main(void)
        {
            vec4 diffuse = texture2D(tex0, texcoord0);

            @(? (>= (strstr $arg1 "overbright") 0) [
                float lum = dot(vec3(@lumweights), diffuse.rgb);
                float overbright = mix(overbrightparams.x, overbrightparams.y, clamp(lum - overbrightparams.z, 0.0, 1.0));
                diffuse.rgb *= overbright;
            ])

            @(? (>= (strstr $arg1 "shadow") 0) [
                float alpha = colorscale.a * diffuse.a * shadowstrength;
                fragcolor = vec4(mix(vec3(1.0), diffuse.rgb*colorscale.rgb, alpha) * (1.0 - alpha), alpha);
            ] [
                fragcolor = colorscale * diffuse;
            ])
        }
    ]
]

skyshader "skybox"
skyshader "skyboxshadow"
skyshader "skyboxoverbright"

atmoshader = [
    shader $SHADER_DEFAULT $arg1 [
        attribute vec4 vvertex;
        attribute vec2 vtexcoord0;
        uniform mat4 sunmatrix;
        varying vec3 camvec;
        void main(void)
        {
            gl_Position = vvertex;

            vec4 p = sunmatrix * vvertex;
            camvec = p.xyz / p.w;
        }
    ] [
        uniform vec4 sunlight;
        uniform vec3 sundir;
        uniform vec3 sunweight;
        uniform vec3 sundiskcolor;
        uniform vec2 sundiskparams;
        uniform vec4 opticaldepthparams;
        uniform vec3 mieparams;
        uniform vec3 betarayleigh, betamie, betaozone;
        uniform float atmodither;
        @(? (>= (strstr $arg1 "cloud") 0) [
            uniform float millis;
            uniform vec3 cloudcolor;
            uniform vec4 cloudparams;
            uniform vec4 cloudshade;
            uniform vec3 cloudfade;
            uniform vec2 cloudscroll;
        ])
        uniform vec2 hdrgamma;
        varying vec3 camvec;
        fragdata(0) vec4 fragcolor;

        @(? (>= (strstr $arg1 "cloud") 0) [
            const mat2 cloudmat = mat2(1.6, 1.2, -1.2, 1.6);

            vec2 hash(vec2 p)
            {
                vec2 coord = vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)));
                return -1.0 + 2.0 * fract(sin(coord) * 43758.5453123);
            }

            float noise(vec2 p)
            {
                const float K1 = 0.366025404;
                const float K2 = 0.211324865;
                vec2 i = floor(p + (p.x + p.y) * K1);
                vec2 a = p - i + (i.x + i.y) * K2;
                vec2 o = (a.x > a.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
                vec2 b = a - o + K2;
                vec2 c = a - 1.0 + 2.0 * K2;
                vec3 h = max(0.5 - vec3(dot(a, a), dot(b, b), dot(c, c)), 0.0);
                vec3 n = h * h * h * h * vec3(dot(a, hash(i + 0.0)), dot(b, hash(i + o)), dot(c, hash(i + 1.0)));
                return dot(n, vec3(70.0));
            }

            float shape(vec2 p, float scale, float seed, float time, float wstart, float wamp, bool absolute)
            {
                float total = 0.0;
                vec2 coord = p * scale;
                coord -= (seed - time) * cloudscroll;
                float weight = wstart;
                for(int i = 0; i < cloudparams.w; i++)
                {
                    total += absolute ? abs(weight * noise(coord)) : weight*noise(coord);
                    coord = cloudmat * coord + time * cloudscroll;
                    weight *= wamp;
                }
                return total;
            }

            float fbm(vec2 p)
            {
                float total = 0.0, amplitude = 0.1;
                for(int i = 0; i < cloudparams.w; i++)
                {
                    total += noise(p) * amplitude;
                    p = cloudmat * p;
                    amplitude *= 0.4;
                }
                return total;
            }
        ])

        void main(void)
        {
            vec3 camdir = normalize(camvec);
            float costheta = dot(camdir, sundir);

            // sun disk
            float edgeoffset = max(1.0 - (1.0 - max(costheta, 0.0)*costheta)*sundiskparams.x, 0.0);
            @(? (>= (strstr $arg1 "disk") 0) [
                if(edgeoffset <= 0.0) discard;
            ])

            // limb darken with distance to edge
            vec3 limbdarken = pow(vec3(edgeoffset), vec3(0.397, 0.503, 0.64));
            // lighten edges for corona, but limit it to not interfere with limb darkening
            float corona = min(edgeoffset * sundiskparams.y, 1.0);
            corona = max(0.1725 / (1.15 - corona * corona) - 0.15, 0.0);
            // apply limb darkening and corona to clamped sunlight color
            vec3 sundisk = sundiskcolor * limbdarken * corona;

            // optical depth along view ray
            float offset = camdir.z*opticaldepthparams.w;
            vec3 depth = sqrt(offset*offset + opticaldepthparams.xyz) - offset;
            vec3 rayleighweight = betarayleigh * depth.x;
            vec3 mieweight = betamie * depth.y;
            vec3 ozoneweight = betaozone * (depth.z - depth.x);

            // extinction of light along view ray
            vec3 viewweight = sunweight - (rayleighweight + mieweight + ozoneweight);
            vec3 extinction = (exp2(viewweight) - 1.0) / viewweight;

            // calculate in-scattering
            float rphase = (1.5 + 0.5*costheta*costheta) * (3.0 / (16.0 * 3.14159265));
            float mphase = inversesqrt(mieparams.x + mieparams.y*min(costheta, mieparams.z));
            vec3 scatter = rayleighweight * rphase + mieweight * (mphase * mphase * mphase);

            // combine scattering and extinction with sundisk
            vec3 inscatter = (sunlight.rgb * scatter + sundisk) * extinction;

            // generate clouds
            @(? (>= (strstr $arg1 "cloud") 0) [
                if(camdir.z > 0)
                {
                    vec2 cloudcoord = camdir.xy / camdir.z;
                    float cloudseed = fbm(cloudcoord * cloudparams.x * 0.5);
                    float cloudrs = shape(cloudcoord, cloudparams.x, cloudseed, millis, 0.8, 0.7, true);
                    float cloudns = shape(cloudcoord, cloudparams.x, cloudseed, millis, 0.7, 0.6, false);
                    cloudns *= cloudrs + cloudns;
                    float cloudnc = shape(cloudcoord, cloudparams.x * 2.0, cloudseed, millis * 2.0, 0.4, 0.6, false);
                    float cloudrc = shape(cloudcoord, cloudparams.x * 3.0, cloudseed, millis * 3.0, 0.4, 0.6, true);
                    cloudnc += cloudrc;
                    cloudns = cloudparams.y + cloudparams.z * cloudns * cloudrs;

                    float cloudmix = clamp(cloudns + cloudnc, 0.0, 1.0) * smoothstep(cloudfade.x, cloudfade.y, camdir.z) * cloudfade.z;
                    if(cloudmix > 0.0)
                    {
                        vec3 cloudbuf = vec3(1.1, 1.1, 0.9) * clamp((cloudshade.y + cloudshade.x * cloudnc), 0.0, 1.0);
                        vec3 cloudcmb = clamp(sundiskcolor * cloudshade.z + inscatter * cloudshade.w + cloudbuf * cloudcolor, 0.0, 1.0);
                        inscatter = mix(inscatter, cloudcmb, cloudmix);
                    }
                }
            ])

            @(hdrgammaencode inscatter)

            vec4 color = vec4(inscatter, sunlight.a);
            @(? (>= (strstr $arg1 "disk") 0) [
                color.a *= corona;
            ] [
                float dither = dot(
                    fract((gl_FragCoord.xy - 0.5).xyxy*vec4(0.5, 0.5, 0.25, 0.25)),
                    vec4(0.375, 0.9375, 0.25, 0.125)) * atmodither;
                dither -= atmodither * 0.5;

                color.rgb += vec3(dither, dither, dither);
            ])

            fragcolor = color;
        }
    ]
]

atmoshader "atmosphere"
atmoshader "atmospherecloud"
atmoshader "atmospheredisk"

shader $SHADER_DEFAULT "skyfog" [
    attribute vec4 vvertex, vcolor;
    uniform mat4 skymatrix;
    uniform float ldrscale;
    varying vec4 color;
    void main(void)
    {
        gl_Position = skymatrix * vvertex;
        color = vec4(ldrscale * vcolor.rgb, vcolor.a);
    }
] [
    uniform sampler2D tex0;
    varying vec4 color;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        fragcolor =
            //:variantoverride vec4(color.rgb, color.a * color.a)
            color
            ;
    }
]

