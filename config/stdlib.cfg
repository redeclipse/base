// console language standard library

CMD_EVENT_MAPLOAD         = 0
CMD_EVENT_FIRSTRUN        = 1
CMD_EVENT_SETUPDISPLAY    = 2
CMD_EVENT_GAME_VOTE       = 3
CMD_EVENT_GAME_LOADOUT    = 4
CMD_EVENT_GAME_GUIDELINES = 5
CMD_EVENT_GAME_DISCONNECT = 6
CMD_EVENT_GAME_LEAVE      = 7

SND_NOATTEN  = (<< 1 0)
SND_NODELAY  = (<< 1 1)
SND_PRIORITY = (<< 1 2)
SND_NOPAN    = (<< 1 3)
SND_NODIST   = (<< 1 4)
SND_NOENV    = (<< 1 5)
SND_CLAMPED  = (<< 1 6)
SND_LOOP     = (<< 1 7)
SND_BUFFER   = (<< 1 8)
SND_MAP      = (<< 1 9)
SND_UNMAPPED = (<< 1 10)
SND_TRACKED  = (<< 1 11)
SND_VELEST   = (<< 1 12)
SND_NOFILTER = (<< 1 13)
SND_PREVIEW  = (<< 1 14)
SND_DUCKING  = (<< 1 15)

COLMASK_H   = (<< 1 0)
COLMASK_S   = (<< 1 1)
COLMASK_V   = (<< 1 2)
COLMASK_HS  = (| $COLMASK_H $COLMASK_S)
COLMASK_HV  = (| $COLMASK_H $COLMASK_V)
COLMASK_SV  = (| $COLMASK_S $COLMASK_V)
COLMASK_HSV = (| $COLMASK_H $COLMASK_S $COLMASK_V)

// creates locals as varname[1..N]
setlist = [
    local s
    loop j $arg2 [
        if $j [ s = (concat $s (concatword $arg1 (+ $j 1))) ] [ s = (concatword $arg1 (+ $j 1)) ]
    ]
    result $s
]

// creates and defines varname[1..N] from a list
localargs = [
    result [
        local @(setlist [@arg1] (listlen [@arg2]))
        looplistn k n [@@arg2] [
            [@@@[arg1]@(+ $n 1)] = $k
        ]
    ]
]

// sets varname[1..N] from a list
setargs = [
    looplistn k n [@arg2] [
        [@@[arg1]@(+ $n 1)] = $k
    ]
]

// defines and sets a local in one command
localdef = [
    result [
        local @arg1
        @arg1 = @arg2
    ]
]

// creates a macro whose body is a format str
// i.e. macro greet [ say Hi, %1! ]
macro = [$arg1 = (concat [format [@@arg2]] (loopconcat i $numargs [result [$arg@(+ $i 1)]]))]

swapval = [
    local tmp
    tmp = $$arg1
    $arg1 = $$arg2
    $arg2 = $tmp
]

// binds a key so that it will toggle a variable
// i.e. bindvar 9 thirdperson
bindvar = [
    bind $arg1 [set @arg2 (= $@arg2 0); if (= $@arg2 0) [echo @@arg2 OFF] [ echo @@arg2 ON]]
]; setcomplete bindvar 1

// same as above, but only binds for edit mode
editbindvar = [
    editbind $arg1 [set @arg2 (= $@arg2 0); if (= $@arg2 0) [echo @@arg2 OFF] [ echo @@arg2 ON]]
]; setcomplete editbindvar 1

// binds a key so that it will set a modifier while held down
bindmod = [
    bind $arg1 [set @arg2 1; onrelease [set @@arg2 0]]
]; setcomplete bindmod 1

// same as above, but only binds for edit mode
editbindmod = [
    editbind $arg1 [set @arg2 1; onrelease [set @@arg2 0]]
]; setcomplete editbindmod 1

quine = [echo (format "quine = [%1]" $quine)]; setcomplete quine 1

// 1:<hue> 2:<saturation> 3:<value>
hsvtohex = [tohex (intcolourhsv $arg1 $arg2 $arg3) 6]

// Returns given RGB color as a HEX color
// usage: (rgbtohex R G B)
rgbtohex = [tohex (intcolour $arg1 $arg2 $arg3) 6]

// Returns given INT color as an RGB color
// usage: (inttorgb <value> R-var G-var B-var)
inttorgb = [
   $arg2 = (& (>> $arg1 16) 0xFF)
   $arg3 = (& (>> $arg1 8) 0xFF)
   $arg4 = (& $arg1 0xFF)
]

// Returns given INT color as an RGBA color
// usage: (inttorgb <value> R-var G-var B-var A-var)
inttorgba = [
   $arg2 = (& (>> $arg1 24) 0xFF)
   $arg3 = (& (>> $arg1 16) 0xFF)
   $arg4 = (& (>> $arg1 8) 0xFF)
   $arg5 = (& $arg1 0xFF)
]

//pluralize
//pluralizes words (appends "s") depending upon value passed to it (e.g. pluralise 1 "word" outputs "word"; pluralize 2 "word" outputs "words")
//Arguments:
//    arg1   | number
//    arg2   | word to potentially pluralize
//Outputs
//    result | word(s) depending upon if number = +/-1
pluralize = [
    if (= (abs ($arg1)) 1) [ //if absolute value given is 1, throw word back unchanged
        result $arg2
    ] [ //else append "s"
        result (concatword $arg2 "s")
    ]
]

//ordinalize
//appends appropriate ordinal suffix to number (e.g. 1 -> 1st, 2-> 2nd, 23-> 23rd)
//Arguments:
//    arg1   | number
//Outputs:
//    result | string with number and ordinal suffix
ordinalize = [
    if (&& (=s (substr $arg1 (- ( strlen $arg1) 2) 1) 1) (!= $arg1 1) ) [ //if the number is in the range 10-19 append "th"
        result (concatword $arg1 "th")
    ] [
        caseif (=s (substr $arg1 (- ( strlen $arg1) 1)) 1) [ //append "st" to trailing digit of 1
            result (concatword $arg1 "st")
        ] (=s (substr $arg1 (- ( strlen $arg1) 1)) 2) [ //append "nd" to trailing digit of 2
            result (concatword $arg1 "nd")
        ] (=s (substr $arg1 (- ( strlen $arg1) 1)) 3) [ //append "rd" to trailing digit of 3
            result (concatword $arg1 "rd")
        ] () [ //else append th
            result (concatword $arg1 "th")
        ]
    ]
]

//getclientscoregroup
//Arguments:
//    arg1   | player cn
//Outputs:
//    result | player's score group
getclientscoregroup = [
    local a
    loopscoregroups i [
        loopscoreboard j $i [
            if (=s $arg1 $j) [
                a = $i
            ]
        ]
    ]
    result $a
]

//getclientrank: inverse of getrankclient (but also usable for any scoregroup)
//Arguments:
//    arg1   | player cn
//Outputs:
//    result | player's rank within scoregroup (starting from 1 counting upward)
getclientrank = [
    local ui_ranklist
    ui_ranklist = ""
    loopscoreboard i (getclientscoregroup $arg1) [
        ui_ranklist = (concat $ui_ranklist $i)
    ]
    result (+ 1 (indexof $ui_ranklist $arg1))
]

//getrankclientffa: inverse of getclientrank (for ffa)
//Inputs:
//    arg1   | rank
//Outputs:
//    result | client number for given rank in scoregroup 0 (only useful in ffa)
getrankclientffa = [
    local a b
    a = 0
    b = 0
    loopscoreboard i 0 [
        b = (+ $b 1)
        if (= $b $arg1) [
            a = $i
        ]
    ]
    result ($a)
]

//ischallengemap:returns true if the current map in play is a challenge map (takes no inputs)
//Outputs:
//    result | 1 if map is a challenge map (maps/challenge..), 0 otherwise
ischallengemap = [
    if (=s (substr $mapname 0 14) "maps/challenge")  [ result 1 ] [ result 0 ]
]

//numhumansonline: returns number of human players online
//Outputs:
//    result: | number of human players online
numhumansonline = [
    result (- (listlen (listclients 1 0)) (listlen (listclients 0 2)) )
]

// *.tex file handling
texsky      = [setshader "stdworld"; texture 0 "game/sky.png"]
texerror    = [setshader "stdworld"; texture 0 "game/notexture.png"]
texnorender = [setshader "stdworld"; texture 0 "game/norender.png"]
texload     = [
   if (! (exec [texture/@arg1.tex] 0)) [
      error [texload error: @arg1.tex not found]
      texerror
   ]
]

istexvariant = [
    && (> $arg1 -1) (!= $arg1 (getslottex (getvindex $arg1)))
]

decalload = [
   if (! (exec [@arg1.cfg] 0)) [
      error [decalload error: @arg1.cfg not found]
   ]
]

autotexangle = [
    vangle (atan (divf $arg1 8))
]; setcomplete autotexangle 1

listhas = [
    >= (indexof $arg1 $arg2) 0
]

listlast = [
    at $arg1 (- (listlen $arg1) 1)
]

// 1:<list> 2:<element>
listsortinsert = [
    local _index _found
    _index = 0
    _found = 0

    loopwhile i (listlen $arg1) [! $_found] [
        if (naturalsort $arg2 (at $arg1 $i)) [
            _index = $i
            _found = 1
        ]
    ]

    if $_found [
        listsplice $arg1 (concat $arg2 (at $arg1 $_index)) $_index 1
    ] [
        append arg1 $arg2
        result $arg1
    ]
]

getkeys = [
    keyspressed 0 "" "" " " " "
]

getkeymodifiers = [
    local modifiers klist
    modifiers = 0
    klist = (getkeys)

    if (>= (listfind key $klist [ >= (strstr $key CTRL) 0 ]) 0) [
        modifiers = (| $modifiers $KMOD_CTRL)
    ]

    if (>= (listfind key $klist [ >= (strstr $key ALT) 0 ]) 0) [
        modifiers = (| $modifiers $KMOD_ALT)
    ]

    if (>= (listfind key $klist [ >= (strstr $key SHIFT) 0 ]) 0) [
        modifiers = (| $modifiers $KMOD_SHIFT)
    ]

    result $modifiers
]

KMOD_CTRL  = 1
KMOD_ALT   = (<< 1 1)
KMOD_SHIFT = (<< 1 2)

kmod = [
    local modifiers klist
    modifiers = 0
    klist = [ @arg1 @arg2 @arg3 ]

    if (listhas $klist CTRL)  [ modifiers = (| $modifiers $KMOD_CTRL)  ]
    if (listhas $klist ALT)   [ modifiers = (| $modifiers $KMOD_ALT)   ]
    if (listhas $klist SHIFT) [ modifiers = (| $modifiers $KMOD_SHIFT) ]

    result $modifiers
]

makebindinfo = [
    local tmp key mods

    tmp = (strreplace $arg1 "+" " ")
    key = (listlast $tmp)

    do [
        mods = (kmod @tmp)
    ]

    concat $key $mods
]

prettybindinfo = [
    local key modifiers string
    string = ""
    modifiers = $arg2

    if (& $modifiers @KMOD_CTRL)  [ appendword string "CTRL+"  ]
    if (& $modifiers @KMOD_ALT)   [ appendword string "ALT+"   ]
    if (& $modifiers @KMOD_SHIFT) [ appendword string "SHIFT+" ]

    appendword string (strupper $arg1)

    result $string
]

filename = [
    listlast (strreplace (strreplace $arg1 "/" " ") "\" " ")
]

fileext = [
    local file
    file = (strreplace $arg1 "." " ")
    ? (> (listlen $file) 1) (listlast $file "")
]

filedir = [
    substr $arg1 0 (- (strrstr $arg1 (filename $arg1)) 1)
]

filenoext = [
    local file
    file = (strreplace $arg1 "." " ")
    at $file 0
]

// 1:<value> 2:<min> 3:<max>
circclamp = [
    local range m r
    range = (- $arg3 $arg2)
    m = (mod $arg1 $range)
    m = (+ $m (* $range (< $m 0)))
    r = (!= (max 0 (- $m $arg3)))

    - $m (* $range $r)
]

// 1:<value> 2:<min> 3:<max>
circclampf = [
    local range m r
    range = (-f $arg3 $arg2)
    m = (modf $arg1 $range)
    m = (+f $m (*f $range (<f $m 0)))
    r = (!=f (max 0 (-f $m $arg3)))

    -f $m (*f $range $r)
]

ishex = [
    =s (substr $arg1 0 2) "0x"
]

colourhasalpha = [
    && [ishex $arg1] [>= (strlen $arg1) 10]
]

// 1:<var>
getvardefval = [
    local vartype
    vartype = (getvartype $arg1)

    case $vartype $ididxvar [
        getvardef $arg1
    ] $ididxfvar [
        getfvardef $arg1
    ] $ididxsvar [
        getsvardef $arg1
    ]
]

// 1:<var> 2:<value>
setc = [
    if ((at [!= !=f !=s] (getvartype $arg1)) $$arg1 $arg2) [
        set $arg1 $arg2
    ]
]

// macro preprocessor
// replaces instaces of "#" with "@" according to the current nesting level
// A digit can be used directly after "#" to set the level offset.
// Used by prefixing any command or assignment.
# = [
    local i _arg _len _orig_code _code _level _leveloffset _chr _cpybegin

    loop _arg (- $numargs 1) [
        _orig_code = $(concatword arg (+ $_arg 2))
        _len = (strlen $_orig_code)
        _code = []
        _level = 0
        offset = 0
        _chr = 0
        _cpybegin = 0
        i = (strpbrk $_orig_code "[]#^"" 0)

        while [ > $i -1 ] [
            _chr = (strcode $_orig_code $i)

            case $_chr @@(strcode "^"") [
                // Get out of the quote
                i = (strpbrk $_orig_code "^"^n" (+ $i 1))
            ] @@(strcode "[") [
                _level = (+ $_level 1)
            ] @@(strcode "]") [
                _level = (max (- $_level 1) 0)
            ] @@(strcode "#") [
                appendword _code (substr $_orig_code $_cpybegin (- $i $_cpybegin))
                _leveloffset = (* (substr $_orig_code (+ $i 1) 1) 1)
                if (> $_leveloffset 0) [
                    i = (+ $i 1)
                ]

                // Allow for a space in front of the identifier
                if (=s (substr $_orig_code (+ $i 1) 1) " ") [
                    i = (+ $i 1)
                ]

                loop j (+ $_level (- 1 $_leveloffset)) [
                    appendword _code "@"
                ]

                _cpybegin = (+ $i 1)
            ]

            i = (strpbrk $_orig_code "[]#^"" (+ $i 1))
        ]

        appendword _code (substr $_orig_code $_cpybegin (- $_len $_cpybegin))

        do [
            (concatword arg (+ @_arg 2)) = [@@_code]
        ]
    ]

    if (=s $arg2 "=") [
        $arg1 = $arg3
    ] [
        case $numargs 2 [
            $arg1 $arg2
        ] 3 [
            $arg1 $arg2 $arg3
        ] 4 [
            $arg1 $arg2 $arg3 $arg4
        ] 5 [
            $arg1 $arg2 $arg3 $arg4 $arg5
        ] 6 [
            $arg1 $arg2 $arg3 $arg4 $arg5 $arg6
        ] 7 [
            $arg1 $arg2 $arg3 $arg4 $arg5 $arg6 $arg7
        ] 8 [
            $arg1 $arg2 $arg3 $arg4 $arg5 $arg6 $arg7 $arg8
        ] 9 [
            $arg1 $arg2 $arg3 $arg4 $arg5 $arg6 $arg7 $arg8 $arg9
        ]
    ]
]

// 1:<text>
is_number = [
    local _is_number _has_point _chr
    _has_point = 0
    _is_number = 1

    loopwhile i (strlen $arg1) [= $_is_number 1] [
        _chr = (strcode $arg1 $i)

        case $_chr @@(strcode "-") [
            if (!= $i 0) [
                _is_number = 0
            ]
        ] @@(strcode ".") [
            if $_has_point [
                _is_number = 0
            ] [
                _has_point = 1
            ]
        ] () [
            if (|| [< $_chr @@@@(strcode "0")] [> $_chr @@@@(strcode "9")]) [
                _is_number = 0
            ]
        ]
    ]

    result $_is_number
]

// 1:<text>
is_integer = [
    local _is_number _chr
    _is_number = 1

    loopwhile i (strlen $arg1) [= $_is_number 1] [
        _chr = (strcode $arg1 $i)

        case $_chr @@(strcode "-") [
            if (!= $i 0) [
                _is_number = 0
            ]
        ] () [
            if (|| [< $_chr @@@@(strcode "0")] [> $_chr @@@@(strcode "9")]) [
                _is_number = 0
            ]
        ]
    ]

    result $_is_number
]

// 1:<var>
cyclevar = [
    $arg1 (mod (+ $$arg1 1) (+ (getvarmax $arg1) 1))
]

// 1:<prop defs> 2:<prop var>
props = [
    local _code
    _code = []

    loop i (listlen $arg1) [
        if (= (mod $i 25) 0) [
            append _code "^nlocal"
        ]
        append _code (at (at $arg1 $i) 0)
    ]

    append _code ";"

    looplist prop $arg1 [
        append _code (format "%1 = %2 ;" (at $prop 0) (at $prop 1))
    ]

    append _code (format "doargs $%1" $arg2)

    result $_code
]

// 1:<prop defs> 2:<out var>
collect_props = [
    local _code
    _code = [ local @arg2; @arg2 ]
    append _code "= [^n"

    looplist prop $arg1 [
        append _code (concatword (at $prop 0) " = [@@" (at $prop 0) "]^n")
    ]

    append _code "]"

    result $_code
]

// 1:<path>
fixpathslashes = [
    strreplace $arg1 "\" "/"
]

// CubeScript code benchmark.
// Repeats the code a number of times until the elapsed time is at least 0.1 seconds,
// then calculates the average time per iteration.
// 1:<code>
codebench = [
    local _start_ms _end_ms _elapsed_ms _us_per_iteration _iterations

    _elapsed_ms = 0

    // Start with 10 iterations
    _iterations = 10

    // Keep repeating and increasing the number of iterations until
    // the elapsed time is at least 0.1 seconds for more accurate results
    while [ < $_elapsed_ms 100 ] [
        _start_ms = $clockmillis
        loop i $_iterations [
            @@arg1
        ]
        _end_ms = $clockmillis

        _elapsed_ms = (- $_end_ms $_start_ms)
        _iterations = (* $_iterations 10)
    ]

    _elapsed_ms = (-f $_end_ms $_start_ms)
    _us_per_iteration = (*f (divf $_elapsed_ms $_iterations) 1000)
    _elapsed_ms = (divf $_elapsed_ms 1000)

    echo (concat "Codebench:" $_iterations "iterations," $_us_per_iteration "us/it")
]

// Increments a variable by a given value
// 1:<var> 2:<value>
inc = [$arg1 = (+ $$arg1 $arg2)]
incf = [$arg1 = (+f $$arg1 $arg2)]

defvar debugvertcolors 0 0 1 resetgl

// Finds nth set bit in a value
// 1:<value> 2:<bit>
find_nth_set_bit = [
    local _i _n _result
    _n = 0
    _result = -1

    loopwhile i 32 [< $_result 0] [
        if (& $arg1 (<< 1 $i)) [
            if (= $arg2 $_n) [
                _result = $i
            ]

            inc _n 1
        ]
    ]

    result $_result
]

// Periodically cycles through set bits of a value
// Results in the value of the bit at the current time
// 1:<value> 2:<interval>
bitcycle = [
    local _select_idx _select _result
    _select_idx = (mod (div $totalmillis 1000) (popcount $arg1))
    _result = 0

    if (>= $_select_idx 0) [
        _result = (& $arg1 (<< 1 (find_nth_set_bit $arg1 $_select_idx)))
    ]

    result $_result
]

// Returns whether a given mutator is currently active
// 1:<mutator>
hasmut = [
    & $mutators (<< 1 $arg1)
]

// Appends "st", "nd", "rd" or "th" to a position number
// 1:<position number>
get_pos_string = [
    local _last_digit _second_last_digit _result
    _result            = $arg1
    _last_digit        = (mod $arg1 10)
    _second_last_digit = (mod (div $arg1 10) 10)

    if (= $_second_last_digit 1) [
        _result = (concatword $arg1 "th")
    ] [
        case $_last_digit 1 [
            _result = (concatword $arg1 "st")
        ] 2 [
            _result = (concatword $arg1 "nd")
        ] 3 [
            _result = (concatword $arg1 "rd")
        ] () [
            _result = (concatword $arg1 "th")
        ]
    ]

    result $_result
]

vendor_specific_intel = [
    if (|| [listhas $_gpu_string "HD"] [listhas $_gpu_string "UHD"]) [
        echo "Intel UHD/HD Graphics detected"
        echo "Disabling oqwait"
        oqwait 0
    ]
]

vendor_specific = [
    local _gpu_string
    _gpu_string = (getclientversion $getclientnum 10)

    if (>= (strcasestr $_gpu_string "intel") 0) [
        vendor_specific_intel
    ]
]
vendor_specific

// 1:<time>
autoscroll_timer = [
    local _period _tension
    _period = 5
    _tension = 2

    clampf (-f (*f (absf (-f (*f (modf (divf $arg1 $_period) 1) 2) 1)) (+f $_tension 1)) (*f $_tension 0.5)) 0 1
]

test_curtest  = ""
test_curstep  = 0
test_maxsteps = 0

// Test step, restart currently running test
test_restart = [
    test_curstep = -1
]

// Test step, waits until a condition evaluates to true
// 1:<condition code>
test_await = [
    if (! (arg1)) [
        inc test_curstep -1
    ]
]

// Internal test loop
test_proc = [
    local _done _next_step
    _done = 0

    if (>= $test_curstep $test_maxsteps) [
        _done = 1

        echo (format "Test %1 completed" $test_curtest)
        test_curtest = ""
    ]

    if (! $_done) [
        inc test_curstep 1
        _next_step = (at $$test_curtest $test_curstep)

        sleep (toint (*f (at $_next_step 0) 1000)) [
            @(at $_next_step 1)
            test_proc
        ]
    ]
]

// Starts a test
// It expects a list of steps to be defined in the format:
// <test name> = [
//     [<delay in seconds> [<step code>]]
//     [<delay in seconds> [<step code>]]
//     [<delay in seconds> [<step code>]]
//     ...
// ]
// 1:<test name>
test_begin = [
    test_curtest  = $arg1
    test_curstep  = -1
    test_maxsteps = (listlen $$test_curtest)

    echo (format "Running test %1 (%2 steps)" $arg1 $test_maxsteps)

    test_proc
]
