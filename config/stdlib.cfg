// console language standard library

CMD_EVENT_MAPLOAD   = 0
CMD_EVENT_FIRSTRUN  = 1
CMD_EVENT_GAME_VOTE = 2

// creates a macro whose body is a format str
// i.e. macro greet [ say Hi, %1! ]
macro = [$arg1 = (concat [format [@@arg2]] (loopconcat i $numargs [result [$arg@(+ $i 1)]]))]

swapval = [
    local tmp
    tmp = $$arg1
    $arg1 = $$arg2
    $arg2 = $tmp
]

// binds a key so that it will toggle a variable
// i.e. bindvar 9 thirdperson
bindvar = [
    bind $arg1 [set @arg2 (= $@arg2 0); if (= $@arg2 0) [echo @@arg2 OFF] [ echo @@arg2 ON]]
]; setcomplete bindvar 1

// same as above, but only binds for edit mode
editbindvar = [
    editbind $arg1 [set @arg2 (= $@arg2 0); if (= $@arg2 0) [echo @@arg2 OFF] [ echo @@arg2 ON]]
]; setcomplete editbindvar 1

// binds a key so that it will set a modifier while held down
bindmod = [
    bind $arg1 [set @arg2 1; onrelease [set @@arg2 0]]
]; setcomplete bindmod 1

// same as above, but only binds for edit mode
editbindmod = [
    editbind $arg1 [set @arg2 1; onrelease [set @@arg2 0]]
]; setcomplete editbindmod 1

quine = [echo (format "quine = [%1]" $quine)]; setcomplete quine 1

// Returns given RGB color as an INT color
// usage: (rgbtoint R G B)
rgbtoint = [+ (<< $arg1 16) (<< $arg2 8) $arg3]

// 1:<hsv>
hsvtohex = [
    local _hsv
    _hsv = (hsvtorgb $arg1)
    tohex (tool_colour_toint [@(at $_hsv 0) @(at $_hsv 1) @(at $_hsv 2)])
]

// 1:<int>
inttohsv = [
    local _r _g _b
    inttorgb $arg1 _r _g _b
    rgbtohsv [@(divf $_r 255) @(divf $_g 255) @(divf $_b 255)]
]

// Returns given RGB color as a HEX color
// usage: (rgbtohex R G B)
rgbtohex = [tohex (rgbtoint $arg1 $arg2 $arg3) 6]

// Returns given INT color as an RGB color
// usage: (inttorgb <value> R-var G-var B-var)
inttorgb = [
   $arg2 = (& (>> $arg1 16) 0xFF)
   $arg3 = (& (>> $arg1 8) 0xFF)
   $arg4 = (& $arg1 0xFF)
]

// Returns given INT color as an RGBA color
// usage: (inttorgb <value> R-var G-var B-var A-var)
inttorgba = [
   $arg2 = (& (>> $arg1 24) 0xFF)
   $arg3 = (& (>> $arg1 16) 0xFF)
   $arg4 = (& (>> $arg1 8) 0xFF)
   $arg5 = (& $arg1 0xFF)
]

// usage: (rgbtohsl R-var G-var B-var)
// Returns: [H-var S-var L-var]
rgbtohsl = [
    local r g b h s l
    r = (divf $arg1 255)
    g = (divf $arg2 255)
    b = (divf $arg3 255)

    l = (divf (+f (maxf $r $g $b) (minf $r $g $b)) 2)

    if (=f $r $g $b) [
        s = 0
    ] [
        if (<f $l 0.5) [
            s = (divf (-f (maxf $r $g $b) (minf $r $g $b)) (+f (maxf $r $g $b) (minf $r $g $b)))
        ] [ // > 0.5
            s = (divf (-f (maxf $r $g $b) (minf $r $g $b)) (-f 2 (maxf $r $g $b) (minf $r $g $b)))
        ]
    ]

    if (=f (maxf $r $g $b) $r) [
        h = (divf (-f $g $b) (-f (maxf $r $g $b) (minf $r $g $b)))
    ]

    if (=f (maxf $r $g $b) $g) [
        h = (+f 2 (divf (-f $b $r) (-f (maxf $r $g $b) (minf $r $g $b))))
    ]

    if (=f (maxf $r $g $b) $b) [
        h = (+f 4 (divf (-f $r $g) (-f (maxf $r $g $b) (minf $r $g $b))))
    ]

    h = (*f $h 60)

    if (<f $h 0) [
        h = (+f $h 360)
    ]

    result (concat $h $s $l)
]

// usage: (hsltorgb H-var S-var L-var)
// Returns: [R-var G-var B-var]
hsltorgb = [
    local r g b h s l t1 t2 tr tg tb
    h = (divf $arg1 360)
    s = $arg2
    l = $arg3

    if (>f $s 0) [
        if (<f $l 0.5) [
            t1 = (*f $l (+f 1 $s))
        ] [ // > 0.5
            t1 = (-f (+f $l $s) (*f $l $s))
        ]

        t2 = (-f (*f 2 $l) $t1)

        tr = (+f $h (divf 1 3))
        tg = $h
        tb = (-f $h (divf 1 3))

        if (<f $tr 0) [tr = (+f $tr 1)] [if (>f $tr 1) [tr = (-f $tr 1)]]
        if (<f $tg 0) [tg = (+f $tg 1)] [if (>f $tg 1) [tg = (-f $tg 1)]]
        if (<f $tb 0) [tb = (+f $tb 1)] [if (>f $tb 1) [tb = (-f $tb 1)]]

        if (<f (*f 6 $tr) 1) [ // RED
            r = (+f $t2 (*f (*f (-f $t1 - $t2) 6) $tr))
        ] [ // > 1
            if (<f (*f 2 $tr) 1) [
                r = $t1
            ] [ // > 1
                if (<f (*f 3 $tr) 2) [
                    r = (+f $t2 (*f (*f (-f $t1 $t2) (-f (divf 4 6) $tr)) 6))
                ] [ // > 1
                    r = $t2
                ]
            ]
        ]

        if (<f (*f 6 $tg) 1) [ // GREEN
            g = (+f $t2 (*f (*f (-f $t1 - $t2) 6) $tg))
        ] [ // > 1
            if (<f (*f 2 $tg) 1) [
                g = $t1
            ] [ // > 1
                if (<f (*f 3 $tg) 2) [
                    g = (+f $t2 (*f (*f (-f $t1 $t2) (-f (divf 4 6) $tg)) 6))
                ] [ // > 1
                    g = $t2
                ]
            ]
        ]

        if (<f (*f 6 $tb) 1) [ // BLUE
            b = (+f $t2 (*f (*f (-f $t1 - $t2) 6) $tb))
        ] [ // > 1
            if (<f (*f 2 $tb) 1) [
                b = $t1
            ] [ // > 1
                if (<f (*f 3 $tb) 2) [
                    b = (+f $t2 (*f (*f (-f $t1 $t2) (-f (divf 4 6) $tb)) 6))
                ] [ // > 1
                    b = $t2
                ]
            ]
        ]
    ] [
        r = $l
        g = $l
        b = $l
    ]

    result (concat (round (*f $r 255)) (round (*f $g 255)) (round (*f $b 255)))
]

// 1:<rgb> 2:<range>
rgbtohsv = [
    local range
    range = $arg2

    if $range [] [
        range = 1
    ]

    local col_r col_g col_b col_max col_min
    col_r = (divf (at $arg1 0) $range)
    col_g = (divf (at $arg1 1) $range)
    col_b = (divf (at $arg1 2) $range)

    col_max = (maxf $col_r $col_g $col_b)
    col_min = (minf $col_r $col_g $col_b)

    local delta
    delta = (-f $col_max $col_min)

    local hue sat val

    caseif (=f $delta 0) [
        hue = 0
    ] (=f $col_max $col_r) [
        hue = (divf (-f $col_g $col_b) $delta)
    ] (=f $col_max $col_g) [
        hue = (+f (divf (-f $col_b $col_r) $delta) 2)
    ] (=f $col_max $col_b) [
        hue = (+f (divf (-f $col_r $col_g) $delta) 4)
    ]

    hue = (*f $hue 60)

    if (<f $hue 0) [
        hue = (+f $hue 360)
    ]

    hue = (toint (round $hue))

    if $delta [
        sat = (divf $delta $col_max)
    ] [
        sat = 0
    ]

    val = $col_max

    concat $hue $sat $val
]

// 1:<hsv> 2:<range>
hsvtorgb = [
    local range
    range = $arg2

    if $range [] [
        range = 1
    ]

    local hue sat val
    hue = (at $arg1 0)
    sat = (at $arg1 1)
    val = (at $arg1 2)

    local C X m
    C = (*f $val $sat)
    X = (*f $C (-f 1 (absf (-f (modf (divf $hue 60) 2) 1))))
    m = (-f $val $C)

    local hue_sel
    hue_sel = (div $hue 60)

    local col_r col_g col_b
    col_r = (*f (+f (at [@C @X 0 0 @X @C] $hue_sel) $m) $range)
    col_g = (*f (+f (at [@X @C @C @X 0 0] $hue_sel) $m) $range)
    col_b = (*f (+f (at [0 0 @X @C @C @X] $hue_sel) $m) $range)

    concat $col_r $col_g $col_b
]

//pluralize
//pluralizes words (appends "s") depending upon value passed to it (e.g. pluralise 1 "word" outputs "word"; pluralize 2 "word" outputs "words")
//Arguments:
//    arg1   | number
//    arg2   | word to potentially pluralize
//Outputs
//    result | word(s) depending upon if number = +/-1
pluralize = [
    if (= (abs ($arg1)) 1) [ //if absolute value given is 1, throw word back unchanged
        result $arg2
    ] [ //else append "s"
        result (concatword $arg2 "s")
    ]
]

//ordinalize
//appends appropriate ordinal suffix to number (e.g. 1 -> 1st, 2-> 2nd, 23-> 23rd)
//Arguments:
//    arg1   | number
//Outputs:
//    result | string with number and ordinal suffix
ordinalize = [
    if (&& (=s (substr $arg1 (- ( strlen $arg1) 2) 1) 1) (!= $arg1 1) ) [ //if the number is in the range 10-19 append "th"
        result (concatword $arg1 "th")
    ] [
        caseif (=s (substr $arg1 (- ( strlen $arg1) 1)) 1) [ //append "st" to trailing digit of 1
            result (concatword $arg1 "st")
        ] (=s (substr $arg1 (- ( strlen $arg1) 1)) 2) [ //append "nd" to trailing digit of 2
            result (concatword $arg1 "nd")
        ] (=s (substr $arg1 (- ( strlen $arg1) 1)) 3) [ //append "rd" to trailing digit of 3
            result (concatword $arg1 "rd")
        ] () [ //else append th
            result (concatword $arg1 "th")
        ]
    ]
]

//getclientscoregroup
//Arguments:
//    arg1   | player cn
//Outputs:
//    result | player's score group
getclientscoregroup = [
    local a
    loopscoregroups i [
        loopscoreboard j $i [
            if (=s $arg1 $j) [
                a = $i
            ]
        ]
    ]
    result $a
]

//getclientrank: inverse of getrankclient (but also usable for any scoregroup)
//Arguments:
//    arg1   | player cn
//Outputs:
//    result | player's rank within scoregroup (starting from 1 counting upward)
getclientrank = [
    local ui_ranklist
    ui_ranklist = ""
    loopscoreboard i (getclientscoregroup $arg1) [
        ui_ranklist = (concat $ui_ranklist $i)
    ]
    result (+ 1 (indexof $ui_ranklist $arg1))
]

//getrankclientffa: inverse of getclientrank (for ffa)
//Inputs:
//    arg1   | rank
//Outputs:
//    result | client number for given rank in scoregroup 0 (only useful in ffa)
getrankclientffa = [
    local a b
    a = 0
    b = 0
    loopscoreboard i 0 [
        b = (+ $b 1)
        if (= $b $arg1) [
            a = $i
        ]
    ]
    result ($a)
]

//ischallengemap:returns true if the current map in play is a challenge map (takes no inputs)
//Outputs:
//    result | 1 if map is a challenge map (maps/challenge..), 0 otherwise
ischallengemap = [
    if (=s (substr $mapname 0 14) "maps/challenge")  [ result 1 ] [ result 0 ]
]

//numhumansonline: returns number of human players online
//Outputs:
//    result: | number of human players online
numhumansonline = [
    result (- (listlen (listclients 1 0)) (listlen (listclients 0 2)) )
]

// *.tex file handling
texsky      = [setshader "stdworld"; texture 0 "game/sky.png"]
texerror    = [setshader "stdworld"; texture 0 "game/notexture.png"]
texnorender = [setshader "stdworld"; texture 0 "game/norender.png"]
texload     = [
   if (! (exec [texture/@arg1.tex] 0)) [
      error [texload error: @arg1.tex not found]
      texerror
   ]
]

istexvariant = [
    && (> $arg1 -1) (!= $arg1 (getslottex (getvindex $arg1)))
]

decalload = [
   if (! (exec [@arg1.cfg] 0)) [
      error [decalload error: @arg1.cfg not found]
   ]
]

autotexangle = [
    vangle (atan (divf $arg1 8))
]; setcomplete autotexangle 1

listhas = [
    >= (indexof $arg1 $arg2) 0
]

listlast = [
    at $arg1 (- (listlen $arg1) 1)
]

// 1:<list> 2:<element>
listsortinsert = [
    local _index _found
    _index = 0
    _found = 0

    loopwhile i (listlen $arg1) [! $_found] [
        if (naturalsort $arg2 (at $arg1 $i)) [
            _index = $i
            _found = 1
        ]
    ]

    if $_found [
        listsplice $arg1 (concat $arg2 (at $arg1 $_index)) $_index 1
    ] [
        append arg1 $arg2
        result $arg1
    ]
]

getkeys = [
    keyspressed 0 "" "" " " " "
]

getkeymodifiers = [
    local modifiers klist
    modifiers = 0
    klist = (getkeys)

    if (>= (listfind key $klist [ >= (strstr $key CTRL) 0 ]) 0) [
        modifiers = (| $modifiers $KMOD_CTRL)
    ]

    if (>= (listfind key $klist [ >= (strstr $key ALT) 0 ]) 0) [
        modifiers = (| $modifiers $KMOD_ALT)
    ]

    if (>= (listfind key $klist [ >= (strstr $key SHIFT) 0 ]) 0) [
        modifiers = (| $modifiers $KMOD_SHIFT)
    ]

    result $modifiers
]

KMOD_CTRL  = 1
KMOD_ALT   = (<< 1 1)
KMOD_SHIFT = (<< 1 2)

kmod = [
    local modifiers klist
    modifiers = 0
    klist = [ @arg1 @arg2 @arg3 ]

    if (listhas $klist CTRL)  [ modifiers = (| $modifiers $KMOD_CTRL)  ]
    if (listhas $klist ALT)   [ modifiers = (| $modifiers $KMOD_ALT)   ]
    if (listhas $klist SHIFT) [ modifiers = (| $modifiers $KMOD_SHIFT) ]

    result $modifiers
]

makebindinfo = [
    local tmp key mods

    tmp = (strreplace $arg1 "+" " ")
    key = (listlast $tmp)

    do [
        mods = (kmod @tmp)
    ]

    concat $key $mods
]

prettybindinfo = [
    local key modifiers string
    string = ""
    modifiers = $arg2

    if (& $modifiers @KMOD_CTRL)  [ appendword string "CTRL+"  ]
    if (& $modifiers @KMOD_ALT)   [ appendword string "ALT+"   ]
    if (& $modifiers @KMOD_SHIFT) [ appendword string "SHIFT+" ]

    appendword string (strupper $arg1)

    result $string
]

filename = [
    listlast (strreplace (strreplace $arg1 "/" " ") "\" " ")
]

fileext = [
    local file
    file = (strreplace $arg1 "." " ")
    ? (> (listlen $file) 1) (listlast $file "")
]

filedir = [
    substr $arg1 0 (- (strrstr $arg1 (filename $arg1)) 1)
]

filenoext = [
    local file
    file = (strreplace $arg1 "." " ")
    at $file 0
]

// 1:<value> 2:<min> 3:<max>
circclamp = [
    local range m r
    range = (- $arg3 $arg2)
    m = (mod $arg1 $range)
    m = (+ $m (* $range (< $m 0)))
    r = (!= (max 0 (- $m $arg3)))

    - $m (* $range $r)
]

// 1:<value> 2:<min> 3:<max>
circclampf = [
    local range m r
    range = (-f $arg3 $arg2)
    m = (modf $arg1 $range)
    m = (+f $m (*f $range (<f $m 0)))
    r = (!=f (max 0 (-f $m $arg3)))

    -f $m (*f $range $r)
]

ishex = [
    =s (substr $arg1 0 2) "0x"
]

colourhasalpha = [
    && [ishex $arg1] [>= (strlen $arg1) 10]
]

// 1:<var>
getvardefval = [
    local vartype
    vartype = (getvartype $arg1)

    case $vartype $ididxvar [
        getvardef $arg1
    ] $ididxfvar [
        getfvardef $arg1
    ] $ididxsvar [
        getsvardef $arg1
    ]
]

// 1:<var> 2:<value>
setc = [
    if ((at [!= !=f !=s] (getvartype $arg1)) $$arg1 $arg2) [
        set $arg1 $arg2
    ]
]

// macro preprocessor
// replaces instaces of "#" with "@" according to the current nesting level
// A digit can be used directly after "#" to set the level offset.
// 1:<var out> 2:<code>
# = [
    local i len code level leveloffset chr cpybegin
    len = (strlen $arg2)
    code = []
    level = 0
    offset = 0
    chr = 0
    cpybegin = 0
    i = (strpbrk $arg2 "[]#^"" 0)

    while [ > $i -1 ] [
        chr = (strcode $arg2 $i)

        case $chr @@(strcode "^"") [
            // Get out of the quote
            i = (strpbrk $arg2 "^"^n" (+ $i 1))
        ] @@(strcode "[") [
            level = (+ $level 1)
        ] @@(strcode "]") [
            level = (max (- $level 1) 0)
        ] @@(strcode "#") [
            appendword code (substr $arg2 $cpybegin (- $i $cpybegin))
            leveloffset = (* (substr $arg2 (+ $i 1) 1) 1)
            if (> $leveloffset 0) [
                i = (+ $i 1)
            ]

            // Allow for a space in front of the identifier
            if (=s (substr $arg2 (+ $i 1) 1) " ") [
                i = (+ $i 1)
            ]

            loop j (+ $level (- 1 $leveloffset)) [
                appendword code "@"
            ]

            cpybegin = (+ $i 1)
        ]

        i = (strpbrk $arg2 "[]#^"" (+ $i 1))
    ]

    appendword code (substr $arg2 $cpybegin (- $len $cpybegin))
    doargs [
        @arg1 = [@@code]
    ]
]

// 1:<text>
is_number = [
    local _is_number _has_point _chr
    _has_point = 0
    _is_number = 1

    loopwhile i (strlen $arg1) [= $_is_number 1] [
        _chr = (strcode $arg1 $i)

        case $_chr @@(strcode "-") [
            if (!= $i 0) [
                _is_number = 0
            ]
        ] @@(strcode ".") [
            if $_has_point [
                _is_number = 0
            ] [
                _has_point = 1
            ]
        ] () [
            if (|| [< $_chr @@@@(strcode "0")] [> $_chr @@@@(strcode "9")]) [
                _is_number = 0
            ]
        ]
    ]

    result $_is_number
]

// 1:<text>
is_integer = [
    local _is_number _chr
    _is_number = 1

    loopwhile i (strlen $arg1) [= $_is_number 1] [
        _chr = (strcode $arg1 $i)

        case $_chr @@(strcode "-") [
            if (!= $i 0) [
                _is_number = 0
            ]
        ] () [
            if (|| [< $_chr @@@@(strcode "0")] [> $_chr @@@@(strcode "9")]) [
                _is_number = 0
            ]
        ]
    ]

    result $_is_number
]

// 1:<var>
cyclevar = [
    $arg1 (mod (+ $$arg1 1) (+ (getvarmax $arg1) 1))
]

// 1:<prop defs> 2:<prop var>
props = [
    local _code
    _code = []

    loop i (listlen $arg1) [
        if (= (mod $i 25) 0) [
            append _code "^nlocal"
        ]
        append _code (at (at $arg1 $i) 0)
    ]

    append _code ";"

    looplist prop $arg1 [
        append _code (format "%1 = %2 ;" (at $prop 0) (at $prop 1))
    ]

    append _code (format "doargs $%1" $arg2)

    result $_code
]

// 1:<prop defs> 2:<out var>
collect_props = [
    local _code
    _code = [ local @arg2; @arg2 ]
    append _code "= [^n"

    looplist prop $arg1 [
        append _code (concatword (at $prop 0) " = [@@" (at $prop 0) "]^n")
    ]

    append _code "]"

    result $_code
]

// 1:<path>
fixpathslashes = [
    strreplace $arg1 "\" "/"
]

// CubeScript code benchmark.
// Repeats the code a number of times until the elapsed time is at least 0.1 seconds,
// then calculates the average time per iteration.
// 1:<code>
codebench = [
    local _start_ms _end_ms _elapsed_ms _us_per_iteration _iterations

    _elapsed_ms = 0

    // Start with 10 iterations
    _iterations = 10

    // Keep repeating and increasing the number of iterations until
    // the elapsed time is at least 0.1 seconds for more accurate results
    while [ < $_elapsed_ms 100 ] [
        _start_ms = (getmillis -1)
        loop i $_iterations [
            @@arg1
        ]
        _end_ms = (getmillis -1)

        _elapsed_ms = (- $_end_ms $_start_ms)
        _iterations = (* $_iterations 10)
    ]

    _elapsed_ms = (-f $_end_ms $_start_ms)
    _us_per_iteration = (*f (divf $_elapsed_ms $_iterations) 1000)
    _elapsed_ms = (divf $_elapsed_ms 1000)

    echo (concat "Codebench:" $_iterations "iterations," $_us_per_iteration "us/it")
]

defvar debugvertcolors 0 0 1 resetgl
