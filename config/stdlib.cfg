// console language standard library

// creates a macro whose body is a format str
// i.e. macro greet [ say Hi, %1! ]
macro = [$arg1 = (concat [format [@@arg2]] (loopconcat i $numargs [result [$arg@(+ $i 1)]]))]

swapval = [
    local tmp
    tmp = $$arg1
    $arg1 = $$arg2
    $arg2 = $tmp
]

// binds a key so that it will toggle a variable
// i.e. bindvar 9 thirdperson
bindvar = [
    bind $arg1 [@arg2 (= $@arg2 0); if (= $@arg2 0) [echo @@arg2 OFF] [ echo @@arg2 ON]]
]; setcomplete bindvar 1

// same as above, but only binds for edit mode
editbindvar = [
    editbind $arg1 [@arg2 (= $@arg2 0); if (= $@arg2 0) [echo @@arg2 OFF] [ echo @@arg2 ON]]
]; setcomplete editbindvar 1

// binds a key so that it will set a modifier while held down
bindmod = [
    bind $arg1 [@arg2 1; onrelease [@@arg2 0]]
]; setcomplete bindmod 1

// same as above, but only binds for edit mode
editbindmod = [
    editbind $arg1 [@arg2 1; onrelease [@@arg2 0]]
]; setcomplete editbindmod 1

quine = [echo (format "quine = [%1]" $quine)]; setcomplete quine 1

// Returns given RGB color as an INT color
// usage: (rgbtoint R G B)
rgbtoint = [+ (<< $arg1 16) (<< $arg2 8) $arg3]

// Returns given RGB color as a HEX color
// usage: (rgbtohex R G B)
rgbtohex = [tohex (rgbtoint $arg1 $arg2 $arg3) 6]

// Returns given INT color as an RGB color
// usage: (inttorgb <value> R-var G-var B-var)
inttorgb = [
   $arg2 = (& (>> $arg1 16) 0xFF)
   $arg3 = (& (>> $arg1 8) 0xFF)
   $arg4 = (& $arg1 0xFF)
]

// usage: (rgbtohsl R-var G-var B-var)
// Returns: [H-var S-var L-var]
rgbtohsl = [
    local r g b h s l
    r = (divf $arg1 255)
    g = (divf $arg2 255)
    b = (divf $arg3 255)

    l = (divf (+f (maxf $r $g $b) (minf $r $g $b)) 2)

    if (=f $r $g $b) [
        s = 0
    ] [
        if (<f $l 0.5) [
            s = (divf (-f (maxf $r $g $b) (minf $r $g $b)) (+f (maxf $r $g $b) (minf $r $g $b)))
        ] [ // > 0.5
            s = (divf (-f (maxf $r $g $b) (minf $r $g $b)) (-f 2 (maxf $r $g $b) (minf $r $g $b)))
        ]
    ]

    if (=f (maxf $r $g $b) $r) [
        h = (divf (-f $g $b) (-f (maxf $r $g $b) (minf $r $g $b)))
    ]

    if (=f (maxf $r $g $b) $g) [
        h = (+f 2 (divf (-f $b $r) (-f (maxf $r $g $b) (minf $r $g $b))))
    ]

    if (=f (maxf $r $g $b) $b) [
        h = (+f 4 (divf (-f $r $g) (-f (maxf $r $g $b) (minf $r $g $b))))
    ]

    h = (*f $h 60)

    if (<f $h 0) [
        h = (+f $h 360)
    ]

    result (concat $h $s $l)
]

// usage: (hsltorgb H-var S-var L-var)
// Returns: [R-var G-var B-var]
hsltorgb = [
    local r g b h s l t1 t2 tr tg tb
    h = (divf $arg1 360)
    s = $arg2
    l = $arg3

    if (>f $s 0) [
        if (<f $l 0.5) [
            t1 = (*f $l (+f 1 $s))
        ] [ // > 0.5
            t1 = (-f (+f $l $s) (*f $l $s))
        ]

        t2 = (-f (*f 2 $l) $t1)

        tr = (+f $h (divf 1 3))
        tg = $h
        tb = (-f $h (divf 1 3))

        if (<f $tr 0) [tr = (+f $tr 1)] [if (>f $tr 1) [tr = (-f $tr 1)]]
        if (<f $tg 0) [tg = (+f $tg 1)] [if (>f $tg 1) [tg = (-f $tg 1)]]
        if (<f $tb 0) [tb = (+f $tb 1)] [if (>f $tb 1) [tb = (-f $tb 1)]]

        if (<f (*f 6 $tr) 1) [ // RED
            r = (+f $t2 (*f (*f (-f $t1 - $t2) 6) $tr))
        ] [ // > 1
            if (<f (*f 2 $tr) 1) [
                r = $t1
            ] [ // > 1
                if (<f (*f 3 $tr) 2) [
                    r = (+f $t2 (*f (*f (-f $t1 $t2) (-f (divf 4 6) $tr)) 6))
                ] [ // > 1
                    r = $t2
                ]
            ]
        ]

        if (<f (*f 6 $tg) 1) [ // GREEN
            g = (+f $t2 (*f (*f (-f $t1 - $t2) 6) $tg))
        ] [ // > 1
            if (<f (*f 2 $tg) 1) [
                g = $t1
            ] [ // > 1
                if (<f (*f 3 $tg) 2) [
                    g = (+f $t2 (*f (*f (-f $t1 $t2) (-f (divf 4 6) $tg)) 6))
                ] [ // > 1
                    g = $t2
                ]
            ]
        ]

        if (<f (*f 6 $tb) 1) [ // BLUE
            b = (+f $t2 (*f (*f (-f $t1 - $t2) 6) $tb))
        ] [ // > 1
            if (<f (*f 2 $tb) 1) [
                b = $t1
            ] [ // > 1
                if (<f (*f 3 $tb) 2) [
                    b = (+f $t2 (*f (*f (-f $t1 $t2) (-f (divf 4 6) $tb)) 6))
                ] [ // > 1
                    b = $t2
                ]
            ]
        ]
    ] [
        r = $l
        g = $l
        b = $l
    ]

    result (concat (round (*f $r 255)) (round (*f $g 255)) (round (*f $b 255)))
]

//pluralize
//pluralizes words (appends "s") depending upon value passed to it (e.g. pluralise 1 "word" outputs "word"; pluralize 2 "word" outputs "words")
//Arguments:
//    arg1   | number
//    arg2   | word to potentially pluralize
//Outputs
//    result | word(s) depending upon if number = +/-1
pluralize = [
    if (= (abs ($arg1)) 1) [ //if absolute value given is 1, throw word back unchanged
        result $arg2
    ] [ //else append "s"
        result (concatword $arg2 "s")
    ]
]

//ordinalize
//appends appropriate ordinal suffix to number (e.g. 1 -> 1st, 2-> 2nd, 23-> 23rd)
//Arguments:
//    arg1   | number
//Outputs:
//    result | string with number and ordinal suffix
ordinalize = [
    if (&& (=s (substr $arg1 (- ( strlen $arg1) 2) 1) 1) (!= $arg1 1) ) [ //if the number is in the range 10-19 append "th"
        result (concatword $arg1 "th")
    ] [
        caseif (=s (substr $arg1 (- ( strlen $arg1) 1)) 1) [ //append "st" to trailing digit of 1
            result (concatword $arg1 "st")
        ] (=s (substr $arg1 (- ( strlen $arg1) 1)) 2) [ //append "nd" to trailing digit of 2
            result (concatword $arg1 "nd")
        ] (=s (substr $arg1 (- ( strlen $arg1) 1)) 3) [ //append "rd" to trailing digit of 3
            result (concatword $arg1 "rd")
        ] () [ //else append th
            result (concatword $arg1 "th")
        ]
    ]
]

//getclientscoregroup
//Arguments:
//    arg1   | player cn
//Outputs:
//    result | player's score group
getclientscoregroup = [
    local a
    loopscoregroups i [
        loopscoreboard j $i [
            if (=s $arg1 $j) [
                a = $i
            ]
        ]
    ]
    result $a
]

//getclientrank: inverse of getrankclient (but also usable for any scoregroup)
//Arguments:
//    arg1   | player cn
//Outputs:
//    result | player's rank within scoregroup (starting from 1 counting upward)
getclientrank = [
    local ui_ranklist
    ui_ranklist = ""
    loopscoreboard i (getclientscoregroup $arg1) [
        ui_ranklist = (concat $ui_ranklist $i)
    ]
    result (+ 1 (indexof $ui_ranklist $arg1))
]

//getrankclientffa: inverse of getclientrank (for ffa)
//Inputs:
//    arg1   | rank
//Outputs:
//    result | client number for given rank in scoregroup 0 (only useful in ffa)
getrankclientffa = [
    local a b
    a = 0
    b = 0
    loopscoreboard i 0 [
        b = (+ $b 1)
        if (= $b $arg1) [
            a = $i
        ]
    ]
    result ($a)
]

//ischallengemap:returns true if the current map in play is a challenge map (takes no inputs)
//Outputs:
//    result | 1 if map is a challenge map (maps/challenge...), 0 otherwise
ischallengemap = [
    if (=s (substr $mapname 0 14 ) "maps/challenge") [ result 1 ] [ result 0 ]
]

//numhumansonline: returns number of human players online
//Outputs:
//    result: | number of human players online
numhumansonline = [
    result (- (listlen (listclients 1 0)) (listlen (listclients 0 2)) )
]

// *.tex file handling
texsky      = [setshader "stdworld"; texture 0 "game/sky.png"]
texerror    = [setshader "stdworld"; texture 0 "game/notexture.png"]
texnorender = [setshader "stdworld"; texture 0 "game/norender.png"]
texload     = [
   if (! (exec [texture/@arg1.tex] 0)) [
      error [texload error: @arg1.tex not found]
      texerror
   ]
]

decalload = [
   if (! (exec [@arg1.cfg] 0)) [
      error [decalload error: @arg1.cfg not found]
   ]
]
